<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Demo" resourceRoot="${projectDir}" soapui-version="5.1.2" abortOnError="false" runType="SEQUENTIAL" id="3c022363-07ba-47f5-9c6a-04eb68e9515b" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="MMA Marketlink Test Suite"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="Participant Id TestCase"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="TestSuite Report"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="MMA E2E Regression"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="Employee with Family"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" id="0c55f4a9-7c0f-4629-8362-f51a17692820" wadlVersion="http://wadl.dev.java.net/2009/02" name="MMA MarketLink API" type="rest" basePath="/api" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:endpoint>http://ec2-23-21-239-5.compute-1.amazonaws.com:8081</con:endpoint><con:endpoint>http://localhost:8089</con:endpoint></con:endpoints><con:resource name="Session" path="/session" id="4c0effed-0f84-4f22-baf9-2d0a6580b284"><con:description xsi:nil="true"/><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style></con:parameter></con:parameters><con:resource name="Session Context" path="/context" id="cfe2d406-ff30-49ff-be08-a2540a4c7a70"><con:description xsi:nil="true"/><con:settings/><con:parameters/><con:method name="get" id="44e2454b-9603-4826-bc75-c6cb6db986dc" method="GET"><con:description>Retrieves an authenticated users system settings and metadata.</con:description><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style><con:default xsi:nil="true"/><con:description>A custom mma token used to secure API requests.</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:description>Session context was returned successfully</con:description></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:description>Could not retrieve session context.</con:description></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:con1="http://localhost/api/session/context">con1:Fault</con:element></con:representation><con:request name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="3cc2ef639a5563b2a993757cd18b3ce2" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:method name="post" id="b0621e0a-0e63-4b39-adb5-0d2584b4e871" method="POST"><con:description>Create a new session token.</con:description><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:description>Successful authentication. Session details are returned.</con:description></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:description>Unauthorized. Unsuccessful authentication. Error details are returned.</con:description></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:ses="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session">ses:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 500</con:status><con:params/><con:element xmlns:ses="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session">ses:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "RegressionUser1",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="Bad Username" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "RegressionUserXXX",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="Bad Password" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "RegressionUser1",
   "password": "passwordXXX"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="put" method="PUT" id="6f7a80dc-bf85-4317-ad31-022f680216f0"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Put Session Token" mediaType="application/json" postQueryString="false" id="cc4f0c82-3e67-4680-9fbe-d8f5d09d89c2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Participants" path="/participants" id="9836ace7-c0ac-4ed6-b146-0caf24f9ef0f"><con:description xsi:nil="true"/><con:settings/><con:parameters/><con:resource name="Participant Id" path="/{participantId}" id="d9242c5c-9ec5-4975-9f24-7d385fb335f1"><con:description xsi:nil="true"/><con:settings/><con:parameters><con:parameter required="false"><con:name>participantId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="Dependents" path="/dependents" id="ca2971b8-ae74-4662-b3ec-628c5236073a"><con:description xsi:nil="true"/><con:settings/><con:parameters><con:parameter required="true"><con:name>participantId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="Dependent Id" path="/{dependentId}" id="0b9cae36-c1f5-44c8-a027-01b67c758e7a"><con:description xsi:nil="true"/><con:settings/><con:parameters><con:parameter required="true"><con:name>participantId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>dependentId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description>Unique identifier for the dependent.</con:description></con:parameter></con:parameters><con:resource name="Coverage Status" path="/coveragestatus" id="9aec63bb-ecf7-4025-ae7f-cfaa02cf827c"><con:description xsi:nil="true"/><con:settings/><con:parameters><con:parameter required="true"><con:name>participantId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>dependentId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="put" id="5aca49e1-9567-4f79-9331-8118d8496576" method="PUT"><con:description>Update coverage status for a dependent. Valid status values include "active" and "inactive".</con:description><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style><con:default xsi:nil="true"/><con:description>A custom mma token used to secure API requests.</con:description></con:parameter><con:parameter><con:name>enrollmentType</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:status>204</con:status><con:params/><con:description>Update successful.</con:description></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dep="http://localhost/api/participants/0/dependents">dep:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:cov="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus">cov:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:cov="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus">cov:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PUT Activate Dependent" id="2a1e5f4d-594a-4460-a03b-da1626b0bc64" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"header": 
	{
		
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"status": "active"
	}
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="0f21a74ea98ae62aafbda23a0b3c0617"/>
  <con:entry key="dependentId" value="1921733"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:request><con:request name="PUT Inctivate Dependent" id="2a1e5f4d-594a-4460-a03b-da1626b0bc64" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"header": 
	{
		
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"status": "inactive"
	}
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="0f21a74ea98ae62aafbda23a0b3c0617"/>
  <con:entry key="dependentId" value="1921733"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:method name="put" id="732adf5a-3ecf-46f7-97b8-29b5af8d574d" method="PUT"><con:description>Update a dependent.</con:description><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style><con:default xsi:nil="true"/><con:description>A custom mma token used to secure API requests.</con:description></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:status>204</con:status><con:params/><con:description>Update successful.</con:description></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:ns="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1923850">ns:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:ns="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1923850">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Update Dependant" id="8d45d260-c40d-4bcd-914c-d018e4df94a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"header": 
	{
		"httpstatus": 200
	},

	"metadata": 
	{
		"ssn": 
		{
			"update": true,
			"required": false,
			"caption": "SSN",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(15)",
			"max_length": 15
		},

		"first_name": 
		{
			"update": true,
			"required": false,
			"caption": "First Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(30)",
			"max_length": 30
		},

		"middle_name": 
		{
			"update": true,
			"required": false,
			"caption": "Middle Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(30)",
			"max_length": 30
		},

		"last_name": 
		{
			"update": true,
			"required": false,
			"caption": "Last Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(50)",
			"max_length": 50
		},

		"birthdate": 
		{
			"update": true,
			"required": false,
			"caption": "Birthdate",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		},

		"gender": 
		{
			"update": true,
			"required": false,
			"caption": "Gender",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"Male",
					"M"
				],

				[
					"Female",
					"F"
				]
			],

			"sql_type": "varchar(2)",
			"max_length": 2
		},

		"relationship_code": 
		{
			"update": true,
			"required": true,
			"caption": "Relationship",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"Spouse",
					"spouse"
				],

				[
					"Child",
					"child"
				],

				[
					"Student",
					"student"
				],

				[
					"Disabled Dependent",
					"disabled"
				],

				[
					"Domestic Partner",
					"partner"
				],

				[
					"Child of Domestic Partner",
					"child_of_partner"
				],

				[
					"Common Law Spouse",
					"cl_spouse"
				],

				[
					"Grandchild",
					"grandchild"
				],

				[
					"Child Age 26 to 30",
					"chile_age_26_to_30"
				]
			],

			"max_length": 60,
			"sql_type": "varchar(60)"
		},

		"qmcso": 
		{
			"update": false,
			"required": false,
			"caption": "QMCSO",
			"data_type": "BOOLEAN",
			"validation_data": null,
			"sql_type": "tinyint(1)"
		},

		"lives_at_home": 
		{
			"update": true,
			"required": true,
			"caption": "Lives At Home",
			"data_type": "BOOLEAN",
			"validation_data": null,
			"sql_type": null
		},

		"address_1": 
		{
			"update": true,
			"required": false,
			"caption": "Address 1",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"address_2": 
		{
			"update": true,
			"required": false,
			"caption": "Address 2",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"city": 
		{
			"update": true,
			"required": false,
			"caption": "City",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"state": 
		{
			"update": true,
			"required": false,
			"caption": "State",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"APO Europe",
					"AE"
				],

				[
					"Alabama",
					"AL"
				],

				[
					"Alaska",
					"AK"
				],

				[
					"American Samoa",
					"AS"
				],

				[
					"APO Pacific",
					"AP"
				],

				[
					"Arizona",
					"AZ"
				],

				[
					"Arkansas",
					"AR"
				],

				[
					"California",
					"CA"
				],

				[
					"Colorado",
					"CO"
				],

				[
					"Connecticut",
					"CT"
				],

				[
					"Delaware",
					"DE"
				],

				[
					"District Of Columbia",
					"DC"
				],

				[
					"Florida",
					"FL"
				],

				[
					"Georgia",
					"GA"
				],

				[
					"Guam",
					"GU"
				],

				[
					"Hawaii",
					"HI"
				],

				[
					"Idaho",
					"ID"
				],

				[
					"Illinois",
					"IL"
				],

				[
					"Indiana",
					"IN"
				],

				[
					"Iowa",
					"IA"
				],

				[
					"Kansas",
					"KS"
				],

				[
					"Kentucky",
					"KY"
				],

				[
					"Louisiana",
					"LA"
				],

				[
					"Maine",
					"ME"
				],

				[
					"Marshall Islands",
					"MH"
				],

				[
					"Maryland",
					"MD"
				],

				[
					"Massachusetts",
					"MA"
				],

				[
					"Michigan",
					"MI"
				],

				[
					"Minnesota",
					"MN"
				],

				[
					"Mississippi",
					"MS"
				],

				[
					"Missouri",
					"MO"
				],

				[
					"Montana",
					"MT"
				],

				[
					"Nebraska",
					"NE"
				],

				[
					"Nevada",
					"NV"
				],

				[
					"New Hampshire",
					"NH"
				],

				[
					"New Jersey",
					"NJ"
				],

				[
					"New Mexico",
					"NM"
				],

				[
					"New York",
					"NY"
				],

				[
					"North Carolina",
					"NC"
				],

				[
					"North Dakota",
					"ND"
				],

				[
					"Northern Mariana Is.",
					"MP"
				],

				[
					"Ohio",
					"OH"
				],

				[
					"Oklahoma",
					"OK"
				],

				[
					"Oregon",
					"OR"
				],

				[
					"Palau",
					"PW"
				],

				[
					"Pennsylvania",
					"PA"
				],

				[
					"Puerto Rico",
					"PR"
				],

				[
					"Rhode Island",
					"RI"
				],

				[
					"South Carolina",
					"SC"
				],

				[
					"South Dakota",
					"SD"
				],

				[
					"Tennessee",
					"TN"
				],

				[
					"Texas",
					"TX"
				],

				[
					"US Virgin Islands",
					"VI"
				],

				[
					"Utah",
					"UT"
				],

				[
					"Vermont",
					"VT"
				],

				[
					"Virginia",
					"VA"
				],

				[
					"Washington",
					"WA"
				],

				[
					"West Virginia",
					"WV"
				],

				[
					"Wisconsin",
					"WI"
				],

				[
					"Wyoming",
					"WY"
				]
			],

			"sql_type": "varchar(5)",
			"max_length": 5
		},

		"zip_code": 
		{
			"update": true,
			"required": false,
			"caption": "Zip",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(15)",
			"max_length": 15
		},

		"country": 
		{
			"update": true,
			"required": false,
			"caption": "Country",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"is_smoker": 
		{
			"update": true,
			"required": false,
			"caption": "Tobacco User",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"YES",
					"YES"
				],

				[
					"NO",
					"NO"
				]
			],

			"sql_type": "varchar(16)",
			"max_length": 16
		},

		"termination_date": 
		{
			"update": true,
			"required": false,
			"caption": "Termination Date",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		}
	},

	"data": 
	{
		"coveragestatus": "active",			
		"id": 1921707,
		"ssn": "XXX-XX-1212",
		"first_name": "Walter",
		"middle_name": "P.",
		"last_name": "Melon",
		"birthdate": "1998/08/01",
		"gender": "M",
		"relationship_code": "child",
		"qmcso": false,
		"lives_at_home": true,
		"address_1": "1111 Ocean Ave",
		"address_2": "Apt #1",
		"city": "Brooklyn",
		"state": "NY",
		"zip_code": "11230",
		"country": "USA",
		"is_smoker": "NO",
		"termination_date": null
	}
}</con:request><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="dependentId" value="1923850"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:method name="get" id="ff24eecf-aa48-4ce9-862e-9f01ccfb026d" method="GET"><con:description>Get a list of dependents.</con:description><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style><con:default xsi:nil="true"/><con:description>A custom mma token used to secure API requests.</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dep="http://localhost/api/participants/0/dependents">dep:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:dep="http://localhost/api/participants/0/dependents">dep:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:dep="http://localhost/api/participants/0/dependents">dep:Fault</con:element></con:representation><con:request name="Get Dependants" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="3cc2ef639a5563b2a993757cd18b3ce2"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:request></con:method><con:method name="post" id="8adae8f6-1fb4-467a-bcde-9ba394b50498" method="POST"><con:description>Create a new dependent.  Metadata can be empty.  ID should be empty.</con:description><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style><con:default xsi:nil="true"/><con:description>A custom mma token used to secure API requests.</con:description></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:description>Creation successful.  Returns dependent with newly created ID.</con:description></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dep="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents">dep:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:dep="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents">dep:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:dep="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents">dep:Fault</con:element></con:representation><con:request name="Create Dependant" id="edda3517-d49d-4080-9513-fe511cfead4f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "header": {"httpstatus": 200},
   "metadata":    {
      "ssn":       {
         "update": true,
         "required": false,
         "caption": "SSN",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(15)",
         "max_length": 15
      },
      "first_name":       {
         "update": true,
         "required": false,
         "caption": "First Name",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(30)",
         "max_length": 30
      },
      "middle_name":       {
         "update": true,
         "required": false,
         "caption": "Middle Name",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(30)",
         "max_length": 30
      },
      "last_name":       {
         "update": true,
         "required": false,
         "caption": "Last Name",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(50)",
         "max_length": 50
      },
      "birthdate":       {
         "update": true,
         "required": false,
         "caption": "Birthdate",
         "data_type": "DATE",
         "validation_data": null,
         "sql_type": "date"
      },
      "gender":       {
         "update": true,
         "required": false,
         "caption": "Gender",
         "data_type": "TEXT",
         "validation_data":          [
                        [
               "Male",
               "M"
            ],
                        [
               "Female",
               "F"
            ]
         ],
         "sql_type": "varchar(2)",
         "max_length": 2
      },
      "relationship_code":       {
         "update": true,
         "required": true,
         "caption": "Relationship",
         "data_type": "TEXT",
         "validation_data":          [
                        [
               "Spouse",
               "spouse"
            ],
                        [
               "Child",
               "child"
            ],
                        [
               "Student",
               "student"
            ],
                        [
               "Disabled Dependent",
               "disabled"
            ],
                        [
               "Domestic Partner",
               "partner"
            ],
                        [
               "Child of Domestic Partner",
               "child_of_partner"
            ],
                        [
               "Common Law Spouse",
               "cl_spouse"
            ],
                        [
               "Grandchild",
               "grandchild"
            ],
                        [
               "Child Age 26 to 30",
               "chile_age_26_to_30"
            ]
         ],
         "max_length": 60,
         "sql_type": "varchar(60)"
      },
      "qmcso":       {
         "update": false,
         "required": false,
         "caption": "QMCSO",
         "data_type": "BOOLEAN",
         "validation_data": null,
         "sql_type": "tinyint(1)"
      },
      "lives_at_home":       {
         "update": true,
         "required": true,
         "caption": "Lives At Home",
         "data_type": "BOOLEAN",
         "validation_data": null,
         "sql_type": null
      },
      "address_1":       {
         "update": true,
         "required": false,
         "caption": "Address 1",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(60)",
         "max_length": 60
      },
      "address_2":       {
         "update": true,
         "required": false,
         "caption": "Address 2",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(60)",
         "max_length": 60
      },
      "city":       {
         "update": true,
         "required": false,
         "caption": "City",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(60)",
         "max_length": 60
      },
      "state":       {
         "update": true,
         "required": false,
         "caption": "State",
         "data_type": "TEXT",
         "validation_data":          [
                        [
               "APO Europe",
               "AE"
            ],
                        [
               "Alabama",
               "AL"
            ],
                        [
               "Alaska",
               "AK"
            ],
                        [
               "American Samoa",
               "AS"
            ],
                        [
               "APO Pacific",
               "AP"
            ],
                        [
               "Arizona",
               "AZ"
            ],
                        [
               "Arkansas",
               "AR"
            ],
                        [
               "California",
               "CA"
            ],
                        [
               "Colorado",
               "CO"
            ],
                        [
               "Connecticut",
               "CT"
            ],
                        [
               "Delaware",
               "DE"
            ],
                        [
               "District Of Columbia",
               "DC"
            ],
                        [
               "Florida",
               "FL"
            ],
                        [
               "Georgia",
               "GA"
            ],
                        [
               "Guam",
               "GU"
            ],
                        [
               "Hawaii",
               "HI"
            ],
                        [
               "Idaho",
               "ID"
            ],
                        [
               "Illinois",
               "IL"
            ],
                        [
               "Indiana",
               "IN"
            ],
                        [
               "Iowa",
               "IA"
            ],
                        [
               "Kansas",
               "KS"
            ],
                        [
               "Kentucky",
               "KY"
            ],
                        [
               "Louisiana",
               "LA"
            ],
                        [
               "Maine",
               "ME"
            ],
                        [
               "Marshall Islands",
               "MH"
            ],
                        [
               "Maryland",
               "MD"
            ],
                        [
               "Massachusetts",
               "MA"
            ],
                        [
               "Michigan",
               "MI"
            ],
                        [
               "Minnesota",
               "MN"
            ],
                        [
               "Mississippi",
               "MS"
            ],
                        [
               "Missouri",
               "MO"
            ],
                        [
               "Montana",
               "MT"
            ],
                        [
               "Nebraska",
               "NE"
            ],
                        [
               "Nevada",
               "NV"
            ],
                        [
               "New Hampshire",
               "NH"
            ],
                        [
               "New Jersey",
               "NJ"
            ],
                        [
               "New Mexico",
               "NM"
            ],
                        [
               "New York",
               "NY"
            ],
                        [
               "North Carolina",
               "NC"
            ],
                        [
               "North Dakota",
               "ND"
            ],
                        [
               "Northern Mariana Is.",
               "MP"
            ],
                        [
               "Ohio",
               "OH"
            ],
                        [
               "Oklahoma",
               "OK"
            ],
                        [
               "Oregon",
               "OR"
            ],
                        [
               "Palau",
               "PW"
            ],
                        [
               "Pennsylvania",
               "PA"
            ],
                        [
               "Puerto Rico",
               "PR"
            ],
                        [
               "Rhode Island",
               "RI"
            ],
                        [
               "South Carolina",
               "SC"
            ],
                        [
               "South Dakota",
               "SD"
            ],
                        [
               "Tennessee",
               "TN"
            ],
                        [
               "Texas",
               "TX"
            ],
                        [
               "US Virgin Islands",
               "VI"
            ],
                        [
               "Utah",
               "UT"
            ],
                        [
               "Vermont",
               "VT"
            ],
                        [
               "Virginia",
               "VA"
            ],
                        [
               "Washington",
               "WA"
            ],
                        [
               "West Virginia",
               "WV"
            ],
                        [
               "Wisconsin",
               "WI"
            ],
                        [
               "Wyoming",
               "WY"
            ]
         ],
         "sql_type": "varchar(5)",
         "max_length": 5
      },
      "zip_code":       {
         "update": true,
         "required": false,
         "caption": "Zip",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(15)",
         "max_length": 15
      },
      "country":       {
         "update": true,
         "required": false,
         "caption": "Country",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(60)",
         "max_length": 60
      },
      "is_smoker":       {
         "update": true,
         "required": false,
         "caption": "Tobacco User",
         "data_type": "TEXT",
         "validation_data":          [
                        [
               "YES",
               "YES"
            ],
                        [
               "NO",
               "NO"
            ]
         ],
         "sql_type": "varchar(16)",
         "max_length": 16
      },
      "termination_date":       {
         "update": true,
         "required": false,
         "caption": "Termination Date",
         "data_type": "DATE",
         "validation_data": null,
         "sql_type": "date"
      }
   },
   "data":    {
      "coveragestatus": "active",
      "id": 1921707,
      "ssn": "XXX-XX-1212",
      "first_name": "Walter",
      "middle_name": "P.",
      "last_name": "White",
      "birthdate": "1998/08/01",
      "gender": "M",
      "relationship_code": "child",
      "qmcso": false,
      "lives_at_home": true,
      "address_1": "1111 Ocean Ave",
      "address_2": "Apt #1",
      "city": "Brooklyn",
      "state": "NY",
      "zip_code": "11230",
      "country": "USA",
      "is_smoker": "NO",
      "termination_date": null
   }
}</con:request><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="participantId" value="0" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Benefits" path="/benefits" id="fe7cb67a-17ea-4db8-b950-b821869b78d4"><con:description xsi:nil="true"/><con:settings/><con:parameters><con:parameter required="true"><con:name>participantId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="Benefit Id" path="/{benefitId}" id="6aa1e714-93f1-4aa6-91c3-aaf34d54165b"><con:description xsi:nil="true"/><con:settings/><con:parameters><con:parameter required="true"><con:name>participantId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>benefitId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="Coverage" path="/coverage" id="2c84fe56-6109-4f18-b97c-eed80b87d63f"><con:description xsi:nil="true"/><con:settings/><con:parameters><con:parameter required="true"><con:name>participantId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>benefitId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="get" id="67240c11-31d7-44d8-a4ff-b95f1d12f5b3" method="GET"><con:description>Get the coverage for the benefit</con:description><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style><con:default xsi:nil="true"/><con:description>A custom mma token used to secure API requests.</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:description>Basic Life example provided.  Does not contain all possible attributes.  See schema for all attributes. Missing attributes include "org\_fsa\_amount", "req\_org\_fsa\_amount", "req\_subscriber\_election\_amount", "req_subscriber\_fsa\_amount", "subscriber\_election\_amount", "subscriber\_fsa\_amount".</con:description></con:representation><con:request name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="benefitId" value="0"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:request></con:method><con:method name="put" id="edc3db52-d94f-47f5-b34d-360021b774c9" method="PUT"><con:description>Update the coverage for the benefit</con:description><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style><con:default xsi:nil="true"/><con:description>A custom mma token used to secure API requests.</con:description></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:status>204</con:status><con:params/><con:description>Update successful.</con:description></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:plan="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans">plan:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 500</con:status><con:params/><con:element xmlns:cov="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage">cov:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:cov="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage">cov:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"header": 
	{
		"httpstatus": 200
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"org_plan_id": 166555,
		"org_plan_name": "Basic Life eligible",
		"coverage_level_id": 26,
		"coverage_level_name": "Employee Only",
		"coverage_level_lookup_code": "EE",
		"original_effective_date": "2014/04/04",
		"change_effective_date": "2014/04/04",
		"termination_date": null,
		"req_subscriber_premium": "2.31",
		"subscriber_premium": "2.31",
		"req_org_premium": "4.62",
		"org_premium": "4.62",
		"carrier_name": "Unum",
		"carrier_logo_url": null,
		"dependent_coverages": 
		[
			
		],

		"waiting_for_eoi": false,
		"warning_dependencies": null,
		"req_increments": "0.0",
		"increments": "0.0",
		"req_volume": "130000.0",
		"volume": "130000.0",
		"beneficiaries": 
		[
			{
				"id": 2729980,
				"name": "RegressionUser1 Beneficiary",
				"relationship": "none",
				"allocation": "100.0",
				"primary_beneficiary": true
			}
		],

		"defined_benefit_credits": 
		[
			
		]
	}
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="benefitId" value="0"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="Plans" path="/plans" id="0973d4f5-e2c3-4956-8942-0034c72e4998"><con:description xsi:nil="true"/><con:settings/><con:parameters><con:parameter required="true"><con:name>participantId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>benefitId</con:name><con:style>TEMPLATE</con:style><con:default xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="get" id="46f491e1-d459-495a-9325-5570a06da5e8" method="GET"><con:description>Get a list of plans.</con:description><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style><con:default xsi:nil="true"/><con:description>A custom mma token used to secure API requests.</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:description>Basic Life example provided.  Does not contain all possible attributes.  See schema for all attributes. Missing attributes include "contribution\_amount\_type", "subscriber\_min\_amount", "subscriber\_max\_amount", "combined\_max\_amount", "fsa\_match\_percent", "org\_base\_amount", "org\_max\_amount", "defined\_benefit\_contribution\_subscriber\_fsa\_amount".</con:description></con:representation><con:request name="Request 1" id="a4d90749-d8a4-4522-a785-c426a1e9c97e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/></con:credentials><con:parameters/><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry></con:parameterOrder></con:request></con:method><con:method name="put" method="PUT" id="a096286e-045a-4be6-ac1a-d987b2077d09"><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>enrollmentType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:plan="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans">plan:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>401 403</con:status><con:params/><con:element xmlns:plan="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans">plan:Fault</con:element></con:representation><con:request name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="6e184596-92b8-4d90-8d23-b2aaed5e8ca6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="0f21a74ea98ae62aafbda23a0b3c0617"/>
  <con:entry key="benefitId" value="58736"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:method name="get" id="5b9e9455-64d6-4905-aceb-c736a8663919" method="GET"><con:description>Get a benefit</con:description><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style><con:default xsi:nil="true"/><con:description>A custom mma token used to secure API requests.</con:description></con:parameter><con:parameter><con:name>enrollmentType</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:ns="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0">ns:Fault</con:element></con:representation><con:request name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="benefitId" value="0"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:method name="get" id="4938a3ba-2700-4a86-a866-168921e52bf1" method="GET"><con:description>Get a list of benefits.</con:description><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style><con:default xsi:nil="true"/><con:description>A custom mma token used to secure API requests.</con:description></con:parameter><con:parameter><con:name>enrollmentType</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:ben="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits">ben:Fault</con:element></con:representation><con:request name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="participantId" value="0" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:method name="put" id="8b2396ae-5caa-4421-9d6b-049e208d15b4" method="PUT"><con:description>Update a participant.  Request should contain one and only one participant.</con:description><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:style>HEADER</con:style><con:default xsi:nil="true"/><con:description>A custom mma token used to secure API requests.</con:description></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:status>204</con:status><con:params/><con:description>Update successful.</con:description></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:ns="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=utf-8</con:mediaType><con:status>401 403</con:status><con:params/><con:element xmlns:ns="http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "header": {"httpstatus": 200},
   "metadata":    {
      "participant_id":       {
         "update": true,
         "required": false,
         "caption": "Participant Id",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(60)"
      },
      "address_1":       {
         "update": true,
         "required": false,
         "caption": "Address 1",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(60)"
      },
      "address_2":       {
         "update": true,
         "required": false,
         "caption": "Address 2",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(60)"
      },
      "bank_account_number":       {
         "update": false,
         "required": false,
         "caption": "Bank Account Number",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "null"
      },
      "bank_account_type":       {
         "update": false,
         "required": false,
         "caption": "Bank Account Type",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(1)"
      },
      "bank_routing_number":       {
         "update": false,
         "required": false,
         "caption": "Bank Routing Number",
         "data_type": "NUMBER",
         "validation_data": null,
         "sql_type": "null"
      },
      "benefits_start_date":       {
         "update": false,
         "required": false,
         "caption": "Eligibility Period Start Date",
         "data_type": "DATE",
         "validation_data": null,
         "sql_type": "date"
      },
      "birthdate":       {
         "update": false,
         "required": false,
         "caption": "Birthdate",
         "data_type": "DATE",
         "validation_data": null,
         "sql_type": "date"
      },
      "business_title":       {
         "update": false,
         "required": false,
         "caption": "Business Title",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(50)"
      },
      "cell_phone":       {
         "update": false,
         "required": false,
         "caption": "Cell",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(30)"
      },
      "city":       {
         "update": true,
         "required": false,
         "caption": "City",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(60)"
      },
      "country":       {
         "update": true,
         "required": false,
         "caption": "Country",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(60)"
      },
      "current_salary":       {
         "update": false,
         "required": false,
         "caption": "Current Salary",
         "data_type": "NUMBER",
         "validation_data": null,
         "sql_type": "decimal(10,2)"
      },
      "division":       {
         "update": false,
         "required": false,
         "caption": "Division",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(50)"
      },
      "ee_code":       {
         "update": false,
         "required": false,
         "caption": "External Private ID",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "email":       {
         "update": false,
         "required": false,
         "caption": "E-mail",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(100)"
      },
      "email2":       {
         "update": true,
         "required": false,
         "caption": "Alternate E-mail",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(100)"
      },
      "employee_number":       {
         "update": false,
         "required": false,
         "caption": "Employee Number",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "employee_type":       {
         "update": false,
         "required": false,
         "caption": "Employee Type",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(60)"
      },
      "employment_level":       {
         "update": false,
         "required": false,
         "caption": "Employment Level",
         "data_type": "TEXT",
         "validation_data":          [
                        [
               "F",
               "F"
            ],
                        [
               "P",
               "P"
            ]
         ],
         "sql_type": "varchar(50)"
      },
      "first_name":       {
         "update": true,
         "required": false,
         "caption": "First Name",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(30)"
      },
      "gender":       {
         "update": true,
         "required": false,
         "caption": "Gender",
         "data_type": "TEXT",
         "validation_data":          [
                        [
               "M",
               "M"
            ],
                        [
               "F",
               "F"
            ]
         ],
         "sql_type": "varchar(2)"
      },
      "highly_compensated":       {
         "update": false,
         "required": false,
         "caption": "Highly Compensated",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "tinyint(1)"
      },
      "hire_date":       {
         "update": false,
         "required": false,
         "caption": "Hire Date",
         "data_type": "DATE",
         "validation_data": null,
         "sql_type": "date"
      },
      "home_phone":       {
         "update": true,
         "required": false,
         "caption": "Home Phone",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(30)"
      },
      "hours_per_week":       {
         "update": false,
         "required": false,
         "caption": "Hours Per Week",
         "data_type": "NUMBER",
         "validation_data": null,
         "sql_type": "int(11)"
      },
      "is_smoker":       {
         "update": false,
         "required": false,
         "caption": "Tobacco User",
         "data_type": "TEXT",
         "validation_data":          [
                        [
               "YES",
               "YES"
            ],
                        [
               "NO",
               "NO"
            ]
         ],
         "sql_type": "varchar(16)"
      },
      "is_voluntary_termination":       {
         "update": false,
         "required": false,
         "caption": "Voluntary Termination",
         "data_type": "NUMBER",
         "validation_data": null,
         "sql_type": "tinyint(1)"
      },
      "last_name":       {
         "update": true,
         "required": false,
         "caption": "Last Name",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(50)"
      },
      "location":       {
         "update": false,
         "required": false,
         "caption": "Location",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(50)"
      },
      "marital_status":       {
         "update": true,
         "required": false,
         "caption": "Marital Status",
         "data_type": "TEXT",
         "validation_data":          [
                        [
               "Married",
               "M"
            ],
                        [
               "Single",
               "S"
            ],
                        [
               "Domestic Partner",
               "P"
            ],
                        [
               "Unreported",
               "U"
            ]
         ],
         "sql_type": "varchar(1)"
      },
      "middle_name":       {
         "update": true,
         "required": false,
         "caption": "Middle Name",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(30)"
      },
      "name_suffix":       {
         "update": false,
         "required": false,
         "caption": "Name Suffix",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(60)"
      },
      "org_class":       {
         "update": false,
         "required": false,
         "caption": "Class",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(50)"
      },
      "organization_code":       {
         "update": false,
         "required": false,
         "caption": "Organization_code",
         "data_type": "null",
         "validation_data": null,
         "sql_type": "varchar(128)"
      },
      "organization_id":       {
         "update": false,
         "required": false,
         "caption": "Organization_id",
         "data_type": "null",
         "validation_data": null,
         "sql_type": "int(11)"
      },
      "original_effective_date":       {
         "update": false,
         "required": false,
         "caption": "Original Effective Date",
         "data_type": "DATE",
         "validation_data": null,
         "sql_type": "date"
      },
      "original_hire_date":       {
         "update": false,
         "required": false,
         "caption": "Original Hire Date",
         "data_type": "DATE",
         "validation_data": null,
         "sql_type": "date"
      },
      "owner":       {
         "update": false,
         "required": false,
         "caption": "Owner",
         "data_type": "NUMBER",
         "validation_data": null,
         "sql_type": "tinyint(1)"
      },
      "pay_rate":       {
         "update": false,
         "required": false,
         "caption": "Pay Rate",
         "data_type": "NUMBER",
         "validation_data": null,
         "sql_type": "decimal(10,2)"
      },
      "preferred_locale":       {
         "update": false,
         "required": false,
         "caption": "Preferred Language",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(32)"
      },
      "seniority_date":       {
         "update": false,
         "required": false,
         "caption": "Seniority Date",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "date"
      },
      "shareholder":       {
         "update": false,
         "required": false,
         "caption": "Shareholder",
         "data_type": "NUMBER",
         "validation_data": null,
         "sql_type": "tinyint(1)"
      },
      "spoken_language":       {
         "update": false,
         "required": false,
         "caption": "Preferred Spoken Language",
         "data_type": "TEXT",
         "validation_data":          [
                        [
               "AMERICAN INDIAN",
               "AMERICAN INDIAN"
            ],
                        [
               "ARABIC",
               "ARABIC"
            ],
                        [
               "ARAMAIC",
               "ARAMAIC"
            ],
                        [
               "ARMENIAN",
               "ARMENIAN"
            ],
                        [
               "CAMBODIAN",
               "CAMBODIAN"
            ],
                        [
               "CANTONESE",
               "CANTONESE"
            ],
                        [
               "CHINESE",
               "CHINESE"
            ],
                        [
               "DECLINED TO STATE",
               "DECLINED TO STATE"
            ],
                        [
               "ENGLISH",
               "ENGLISH"
            ],
                        [
               "FARSI",
               "FARSI"
            ],
                        [
               "FRENCH",
               "FRENCH"
            ],
                        [
               "GERMAN",
               "GERMAN"
            ],
                        [
               "HAWAIIAN",
               "HAWAIIAN"
            ],
                        [
               "HEARING IMPAIRED",
               "HEARING IMPAIRED"
            ],
                        [
               "HEBEEW",
               "HEBEEW"
            ],
                        [
               "HINDI",
               "HINDI"
            ],
                        [
               "HMONG",
               "HMONG"
            ],
                        [
               "ILOCANO",
               "ILOCANO"
            ],
                        [
               "INDONESIAN",
               "INDONESIAN"
            ],
                        [
               "IRISH",
               "IRISH"
            ],
                        [
               "ITALIAN",
               "ITALIAN"
            ],
                        [
               "JAPANESE",
               "JAPANESE"
            ],
                        [
               "KOREAN",
               "KOREAN"
            ],
                        [
               "LAO",
               "LAO"
            ],
                        [
               "MANDARIN",
               "MANDARIN"
            ],
                        [
               "MEIN",
               "MEIN"
            ],
                        [
               "NIGERIAN",
               "NIGERIAN"
            ],
                        [
               "OTHER NON-ENGLISH",
               "OTHER NON-ENGLISH"
            ],
                        [
               "PERSIAN",
               "PERSIAN"
            ],
                        [
               "POLISH",
               "POLISH"
            ],
                        [
               "PUSHTO",
               "PUSHTO"
            ],
                        [
               "RUSSIAN",
               "RUSSIAN"
            ],
                        [
               "SAMOAN",
               "SAMOAN"
            ],
                        [
               "SCOTTISH",
               "SCOTTISH"
            ],
                        [
               "SIGNLANGUAGE",
               "SIGNLANGUAGE"
            ],
                        [
               "SPANISH",
               "SPANISH"
            ],
                        [
               "SPEECHLOSS",
               "SPEECHLOSS"
            ],
                        [
               "TAGALOG",
               "TAGALOG"
            ],
                        [
               "TAHITIAN",
               "TAHITIAN"
            ],
                        [
               "THAI",
               "THAI"
            ],
                        [
               "TURKISH",
               "TURKISH"
            ],
                        [
               "UNDETERMINED",
               "UNDETERMINED"
            ],
                        [
               "VIETNAMESE",
               "VIETNAMESE"
            ]
         ],
         "sql_type": "varchar(30)"
      },
      "ssn":       {
         "update": true,
         "required": false,
         "caption": "SSN",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(15)"
      },
      "state":       {
         "update": true,
         "required": false,
         "caption": "State",
         "data_type": "TEXT",
         "validation_data":          [
                        [
               "APO Europe",
               "AE"
            ],
                        [
               "Alabama",
               "AL"
            ],
                        [
               "Alaska",
               "AK"
            ],
                        [
               "American Samoa",
               "AS"
            ],
                        [
               "APO Pacific",
               "AP"
            ],
                        [
               "Arizona",
               "AZ"
            ],
                        [
               "Arkansas",
               "AR"
            ],
                        [
               "California",
               "CA"
            ],
                        [
               "Colorado",
               "CO"
            ],
                        [
               "Connecticut",
               "CT"
            ],
                        [
               "Delaware",
               "DE"
            ],
                        [
               "District Of Columbia",
               "DC"
            ],
                        [
               "Florida",
               "FL"
            ],
                        [
               "Georgia",
               "GA"
            ],
                        [
               "Guam",
               "GU"
            ],
                        [
               "Hawaii",
               "HI"
            ],
                        [
               "Idaho",
               "ID"
            ],
                        [
               "Illinois",
               "IL"
            ],
                        [
               "Indiana",
               "IN"
            ],
                        [
               "Iowa",
               "IA"
            ],
                        [
               "Kansas",
               "KS"
            ],
                        [
               "Kentucky",
               "KY"
            ],
                        [
               "Louisiana",
               "LA"
            ],
                        [
               "Maine",
               "ME"
            ],
                        [
               "Marshall Islands",
               "MH"
            ],
                        [
               "Maryland",
               "MD"
            ],
                        [
               "Massachusetts",
               "MA"
            ],
                        [
               "Michigan",
               "MI"
            ],
                        [
               "Minnesota",
               "MN"
            ],
                        [
               "Mississippi",
               "MS"
            ],
                        [
               "Missouri",
               "MO"
            ],
                        [
               "Montana",
               "MT"
            ],
                        [
               "Nebraska",
               "NE"
            ],
                        [
               "Nevada",
               "NV"
            ],
                        [
               "New Hampshire",
               "NH"
            ],
                        [
               "New Jersey",
               "NJ"
            ],
                        [
               "New Mexico",
               "NM"
            ],
                        [
               "New York",
               "NY"
            ],
                        [
               "North Carolina",
               "NC"
            ],
                        [
               "North Dakota",
               "ND"
            ],
                        [
               "Northern Mariana Is.",
               "MP"
            ],
                        [
               "Ohio",
               "OH"
            ],
                        [
               "Oklahoma",
               "OK"
            ],
                        [
               "Oregon",
               "OR"
            ],
                        [
               "Palau",
               "PW"
            ],
                        [
               "Pennsylvania",
               "PA"
            ],
                        [
               "Puerto Rico",
               "PR"
            ],
                        [
               "Rhode Island",
               "RI"
            ],
                        [
               "South Carolina",
               "SC"
            ],
                        [
               "South Dakota",
               "SD"
            ],
                        [
               "Tennessee",
               "TN"
            ],
                        [
               "Texas",
               "TX"
            ],
                        [
               "US Virgin Islands",
               "VI"
            ],
                        [
               "Utah",
               "UT"
            ],
                        [
               "Vermont",
               "VT"
            ],
                        [
               "Virginia",
               "VA"
            ],
                        [
               "Washington",
               "WA"
            ],
                        [
               "West Virginia",
               "WV"
            ],
                        [
               "Wisconsin",
               "WI"
            ],
                        [
               "Wyoming",
               "WY"
            ]
         ],
         "sql_type": "varchar(5)"
      },
      "status_ends_on_expected":       {
         "update": false,
         "required": false,
         "caption": "Expected Status End Date",
         "data_type": "DATE",
         "validation_data": null,
         "sql_type": "date"
      },
      "subscriber_code":       {
         "update": false,
         "required": false,
         "caption": "API-SSO Lookup Code",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "termination_date":       {
         "update": false,
         "required": false,
         "caption": "Termination Date",
         "data_type": "DATE",
         "validation_data": null,
         "sql_type": "date"
      },
      "udef_1":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field1",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_10":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field10",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_11":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field11",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_12":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field12",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_13":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field13",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_14":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field14",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_15":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field15",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_16":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field16",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_17":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field17",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_18":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field18",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_19":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field19",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_2":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field2",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_20":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field20",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_3":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field3",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_4":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field4",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_5":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field5",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_6":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field6",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_7":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field7",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_8":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field8",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "udef_9":       {
         "update": false,
         "required": false,
         "caption": "User Defined Field9",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "union_code":       {
         "update": false,
         "required": false,
         "caption": "Union",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(255)"
      },
      "vip":       {
         "update": false,
         "required": false,
         "caption": "VIP",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "tinyint(1)"
      },
      "work_phone":       {
         "update": true,
         "required": false,
         "caption": "Office",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(30)"
      },
      "written_language":       {
         "update": false,
         "required": false,
         "caption": "Preferred Written Language",
         "data_type": "TEXT",
         "validation_data":          [
                        [
               "AMERICAN INDIAN",
               "AMERICAN INDIAN"
            ],
                        [
               "ARABIC",
               "ARABIC"
            ],
                        [
               "ARAMAIC",
               "ARAMAIC"
            ],
                        [
               "ARMENIAN",
               "ARMENIAN"
            ],
                        [
               "CAMBODIAN",
               "CAMBODIAN"
            ],
                        [
               "CANTONESE",
               "CANTONESE"
            ],
                        [
               "CHINESE",
               "CHINESE"
            ],
                        [
               "DECLINED TO STATE",
               "DECLINED TO STATE"
            ],
                        [
               "ENGLISH",
               "ENGLISH"
            ],
                        [
               "FARSI",
               "FARSI"
            ],
                        [
               "FRENCH",
               "FRENCH"
            ],
                        [
               "GERMAN",
               "GERMAN"
            ],
                        [
               "HAWAIIAN",
               "HAWAIIAN"
            ],
                        [
               "HEARING IMPAIRED",
               "HEARING IMPAIRED"
            ],
                        [
               "HEBEEW",
               "HEBEEW"
            ],
                        [
               "HINDI",
               "HINDI"
            ],
                        [
               "HMONG",
               "HMONG"
            ],
                        [
               "ILOCANO",
               "ILOCANO"
            ],
                        [
               "INDONESIAN",
               "INDONESIAN"
            ],
                        [
               "IRISH",
               "IRISH"
            ],
                        [
               "ITALIAN",
               "ITALIAN"
            ],
                        [
               "JAPANESE",
               "JAPANESE"
            ],
                        [
               "KOREAN",
               "KOREAN"
            ],
                        [
               "LAO",
               "LAO"
            ],
                        [
               "MANDARIN",
               "MANDARIN"
            ],
                        [
               "MEIN",
               "MEIN"
            ],
                        [
               "NIGERIAN",
               "NIGERIAN"
            ],
                        [
               "OTHER NON-ENGLISH",
               "OTHER NON-ENGLISH"
            ],
                        [
               "PERSIAN",
               "PERSIAN"
            ],
                        [
               "POLISH",
               "POLISH"
            ],
                        [
               "PUSHTO",
               "PUSHTO"
            ],
                        [
               "RUSSIAN",
               "RUSSIAN"
            ],
                        [
               "SAMOAN",
               "SAMOAN"
            ],
                        [
               "SCOTTISH",
               "SCOTTISH"
            ],
                        [
               "SIGNLANGUAGE",
               "SIGNLANGUAGE"
            ],
                        [
               "SPANISH",
               "SPANISH"
            ],
                        [
               "SPEECHLOSS",
               "SPEECHLOSS"
            ],
                        [
               "TAGALOG",
               "TAGALOG"
            ],
                        [
               "TAHITIAN",
               "TAHITIAN"
            ],
                        [
               "THAI",
               "THAI"
            ],
                        [
               "TURKISH",
               "TURKISH"
            ],
                        [
               "UNDETERMINED",
               "UNDETERMINED"
            ],
                        [
               "VIETNAMESE",
               "VIETNAMESE"
            ]
         ],
         "sql_type": "varchar(30)"
      },
      "zip_code":       {
         "update": true,
         "required": false,
         "caption": "Zip",
         "data_type": "TEXT",
         "validation_data": null,
         "sql_type": "varchar(15)"
      }
   },
   "data":    {
      "participant_id": "101010102",
      "address_1": "456 Main St.",
      "address_2": "Apt #3",
      "bank_account_number": "222333444",
      "bank_account_type": "S",
      "bank_routing_number": "333444555",
      "benefits_start_date": "2014/04/04",
      "birthdate": "1990/04/05",
      "business_title": "Sr. Associate",
      "cell_phone": "222-333-4445",
      "city": "Valley Forge",
      "country": "USA",
      "current_salary": "65000.0",
      "division": "Division B",
      "ee_code": "ID 124",
      "email": "testuser@email.com",
      "email2": "testuser@gmail.com",
      "employee_number": "1235",
      "employee_type": "Part Time",
      "employment_level": "P",
      "first_name": "Test",
      "gender": "M",
      "highly_compensated": "0",
      "hire_date": "2014/04/06",
      "home_phone": "333-444-5555",
      "hours_per_week": "40",
      "is_smoker": "NO",
      "is_voluntary_termination": "0",
      "last_name": "User",
      "location": "Office B",
      "marital_status": "S",
      "middle_name": "Regression",
      "name_suffix": "Dr.",
      "org_class": "ORG_CLASS_B",
      "organization_code": "test_company_a",
      "organization_id": "2270",
      "original_effective_date": "2014/05/06",
      "original_hire_date": "2014/06/06",
      "owner": "0",
      "pay_rate": "55.56",
      "preferred_locale": "Locale.CANADA",
      "seniority_date": "2014/07/06",
      "shareholder": "0",
      "spoken_language": "POLISH",
      "ssn": "111-22-0002",
      "state": "PA",
      "status_ends_on_expected": "2055/05/06",
      "subscriber_code": "101010102",
      "termination_date": "",
      "udef_1": "User Value 1",
      "udef_10": "User Value 10",
      "udef_11": "User Value 11",
      "udef_12": "User Value 12",
      "udef_13": "User Value 13",
      "udef_14": "User Value 14",
      "udef_15": "User Value 15",
      "udef_16": "User Value 16",
      "udef_17": "User Value 17",
      "udef_18": "User Value 18",
      "udef_19": "User Value 19",
      "udef_2": "User Value 2",
      "udef_20": "User Value 20",
      "udef_3": "User Value 3",
      "udef_4": "User Value 4",
      "udef_5": "User Value 5",
      "udef_6": "User Value 6",
      "udef_7": "User Value 7",
      "udef_8": "User Value 8",
      "udef_9": "User Value 9",
      "union_code": "UNION B",
      "vip": "0",
      "work_phone": "777-888-9999",
      "written_language": "GERMAN",
      "zip_code": "88888"
   }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="36801e16020024ed04e02855e95674b5 "/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:request></con:method><con:method name="get" method="GET" id="de6332ce-9e45-4109-9452-c4af42251425"><con:settings/><con:parameters><con:parameter><con:name>mmatoken</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 405</con:status><con:params/><con:element xmlns:par="http://localhost/api/participants">par:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:par="http://localhost/api/participants">par:Response</con:element></con:representation><con:request name="Get Participant" mediaType="application/json" id="91fc8319-25f1-4777-9085-ca40edde35fc"><con:settings/><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>mmatoken</con:entry><con:entry>participantId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:resource></con:interface><con:testSuite name="Regression Soapui Tests" disabled="true" id="2da2ae93-25f0-45d2-bcce-09262f587aaf"><con:description>TestSuite generated for REST Service [MMA MarketLink API]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="QA Comp Single With All Benefits +No HSA and EOI Regression" searchProperties="true" id="d6a5cd8c-bca6-4d16-ab1c-8219d9be45cb"><con:description>TestCase generated for REST Resource [Session Context] located at [/session/context]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="7fc28d67-aa5f-4228-88db-2cd356dde565"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "QASingle01",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="7d7e387d-5566-4d61-b1ec-d28493c745a2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Token" id="17688120-ae9f-4274-aacc-2e6f4b556b79"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def sessionJson = new JsonSlurper().parseText(loginResponse)

assert(sessionJson.data.mmatoken != null)
assert(sessionJson.data.expires != null)</script></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="acccb2cf-9f14-4b45-9caa-fdfa2e68e0d3"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Session Token", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="3da1e3f7-81df-42ea-8620-c8f1f8e5c1d7"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b45b937b-2c15-49f2-9c8e-2647b6916893"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="a8391881efce6deeadba4050ac37342d" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Context" id="201a968e-40ba-4d3f-b8e7-b1e9458b7fee"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def contextResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def contextJson = new JsonSlurper().parseText(contextResponse)

//Set Participant Id to Get Participant request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Participant", "participantId", contextJson.data.participant_id.toString())

/*
assert(contextJson.data.organization_id == 2523)
assert(contextJson.data.participant_id == 8290805)
def enrollment_context = contextJson.data.enrollment_context
assert(enrollment_context != null)
assert(enrollment_context.enrollment_ends_on == "2014/12/01")
assert(enrollment_context.enrollment_starts_on == "2014/10/15")
assert(enrollment_context.plan_year_starts_on == "2015/01/01")
assert(enrollment_context.enrollment_type_lookup_code == "open")
assert(enrollment_context.plan_year_ends_on == "2015/12/31")
assert(enrollment_context.org_plan_year_id == 5043)
*/</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="276e43cb-8031-4325-a10a-b386912253ad"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="83382485-b679-4f8c-99e1-1ea679dee0c0"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8391881efce6deeadba4050ac37342d"/>
  <con:entry key="participantId" value="8290805"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Participant Details Valid" id="190a7b2a-fa92-44ec-b20d-30a1d7a1bd80"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
//validate participant details
assert(participant.ssn == "666-11-1010")
assert(participant.address_1 == "256 Regression Way")
assert(participant.last_name == "QARegression1")
assert(participant.first_name == "Single")
assert(participant.city == "King of Prussia")
assert(participant.state == "PA")
assert(participant.zip_code == "19406")
assert(participant.gender == "M")
assert(participant.marital_status == "S")
assert(participant.hire_date == "2014/09/01")

</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="779ae011-ed50-4ed2-ba1e-6d245512d43f"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def updatedMap = ['data' : participant]
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()

log.info(updatedPayload)

def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="57c24d3c-85a1-4944-b4dd-333179a50128"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "hire_date": "2014/09/01",
        "zip_code": "19406",
        "organization_code": "qa_regression",
        "middle_name": "",
        "ssn": "666-11-1010",
        "state": "PA",
        "address_1": "256 Regression Way",
        "address_2": "",
        "email2": "",
        "country": "[Select a Country]",
        "city": "King of Prussia",
        "participant_id": 8290805,
        "first_name": "Single",
        "organization_id": 2523,
        "work_phone": "",
        "last_name": "QARegression1",
        "gender": "M",
        "home_phone": "",
        "marital_status": "S"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b1911359-b03c-42d2-9ed2-14e792471d76"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8391881efce6deeadba4050ac37342d"/>
  <con:entry key="participantId" value="8290805"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="f3050479-5b0b-4ab2-990c-60975a2935b9"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4174118d-5f9c-4d16-ac8e-8c86b3929a68"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8391881efce6deeadba4050ac37342d"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Ensure No Dependents Exists" id="0eda68bc-f008-43f3-b87c-559063828eda"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent == null)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="ec42a28c-ea70-40c1-adcf-4c1fd769af9e"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b585c4d9-1438-4a20-9d46-eddcc8b4225e"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8391881efce6deeadba4050ac37342d"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Benefits List" id="d7542fba-ca63-4dcb-afc2-417ee87fb493"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def BLResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(BLResponse)

def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "medical"}
log.info(MedicalBenlist)
assert(MedicalBenlist.display_order == 1)
assert(MedicalBenlist.org_benefit_name == "Medical")
assert(MedicalBenlist.enrollment_method == "standard")
assert(MedicalBenlist.premium_method == "tier")
assert(MedicalBenlist.annual_payday_count == 26)

def DentalBenlist = Json.data.find{it.benefit_lookup_code == "dental"}
log.info(DentalBenlist)
assert(DentalBenlist.display_order == 3)
assert(DentalBenlist.org_benefit_name == "Dental")
assert(DentalBenlist.enrollment_method == "standard")
assert(DentalBenlist.premium_method == "tier")
assert(DentalBenlist.annual_payday_count == 26)


def HcraBenlist = Json.data.find{it.benefit_lookup_code == "hcra"}
log.info(HcraBenlist)
assert(HcraBenlist.display_order == 4)
assert(HcraBenlist.org_benefit_name == "Health Care Reimbursement Account")
assert(HcraBenlist.enrollment_method == "enter_annual")
assert(HcraBenlist.premium_method == "annual_target")
assert(HcraBenlist.annual_payday_count == 26)

def VisionBenlist = Json.data.find{it.benefit_lookup_code == "vision"}
log.info(VisionBenlist)
assert(VisionBenlist.display_order == 5)
assert(VisionBenlist.org_benefit_name == "Vision")
assert(VisionBenlist.enrollment_method == "standard")
assert(VisionBenlist.premium_method == "tier")
assert(VisionBenlist.annual_payday_count == 26)


def BSLBenlist = Json.data.find{it.benefit_lookup_code == "basic_subscriber_life"}
log.info(BSLBenlist)
assert(BSLBenlist.display_order == 6)
assert(BSLBenlist.org_benefit_name == "Basic Employee Life")
assert(BSLBenlist.enrollment_method == "standard")
assert(BSLBenlist.premium_method == "tier")
assert(BSLBenlist.annual_payday_count == 26)


def SLBenlist = Json.data.find{it.benefit_lookup_code == "subscriber_life"}
log.info(SLBenlist)
assert(SLBenlist.display_order == 7)
assert(SLBenlist.org_benefit_name == "Voluntary Employee Life")
assert(SLBenlist.enrollment_method == "increments")
assert(SLBenlist.premium_method == "tier")
assert(SLBenlist.annual_payday_count == 26)


</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="92a70f51-958c-43d8-9755-9f45460a2a26"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="f36ca6ab-e2e8-4049-b83a-8398b050a566"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="69cedb89-db9d-4f9d-a6aa-3b28bc996788"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8391881efce6deeadba4050ac37342d"/>
  <con:entry key="benefitId" value="60809"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="112fa7ff-5f76-4ee3-bd56-d9d7dd6c1a63"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="8ed3a1b7-2f4a-494a-a7f0-22c4d7e7c131"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ea8e63c6-f7a8-4d30-82f4-96408d155a94"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8391881efce6deeadba4050ac37342d"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Get Benefit Coverage" id="79d6ce4e-c398-4f1e-b34c-395c74f51f90"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){
	//getBenefitCoverage
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)

	if(benefit.benefit_lookup_code == "medical"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Employee Only")
      	assert(coverageJson.data.coverage_level_id == 9)
      	assert(coverageJson.data.org_plan_name == "PPO Plan")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183968)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "EE")
	}
	
	if(benefit.benefit_lookup_code == "dental"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Employee Only")
      	assert(coverageJson.data.coverage_level_id == 9)
      	assert(coverageJson.data.org_plan_name == "Delta PPO")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183970)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "EE")
	}

	if(benefit.benefit_lookup_code == "subscriber_life"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	assert(coverageJson.data.org_plan_name == "Voluntary Employee Life")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183959)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")

	     def beneficiaries = coverageJson.data.beneficiaries
	     for(beneficiary in beneficiaries){
			//def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
			assert(beneficiary != null)
			assert(beneficiary.primary_beneficiary == true)
			log.info("beneficiary ="+ beneficiary)
			assert(beneficiary.allocation == "100.0")
		}
		// assert No EOI
		assert(coverageJson.data.waiting_for_eoi == false)
	}

	if(benefit.benefit_lookup_code == "basic_subscriber_life"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	//assert(coverageJson.data.org_plan_name == "Basic - $250,000")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183972)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
	}

	if(benefit.benefit_lookup_code == "vision"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Employee Only")
      	assert(coverageJson.data.coverage_level_id == 9)
      	//assert(coverageJson.data.org_plan_name == "Vision Care")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183971)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "EE")
	}

	if(benefit.benefit_lookup_code == "hcra"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	assert(coverageJson.data.org_plan_name == "Health Care Reimbursement Account")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183965)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
	}

	if(benefit.benefit_lookup_code == "hsa"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	assert(coverageJson.data.org_plan_name == "Health Savings Account")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183967)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="f7a8e7d7-e431-4152-96e9-834560c4cd1d"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="3a00c80c-b3ce-4a3c-9058-ca331414361d"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="8784f5d0-ff9d-44f6-b5e9-008b5ba72834"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="000c99cd-43db-44e6-a89c-f2e40e9e66e5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8391881efce6deeadba4050ac37342d"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare PUT Coverage Requests" id="d4c7ebcf-9500-4fd1-a8d6-5f6e96fa7cdd"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
		
	//getBenefitPlans(benefit,plansJson);
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)

	//def coverageJson 
	//getBenefitCoverage(benefit,coverageJson);
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
			
	def cur_coverage_plan_id = coverageJson.data.org_plan_id;
	def cur_org_plan_name = coverageJson.data.org_plan_name
	
	log.info("plan id from GET coverage="+ coverageJson.data.org_plan_id)
	log.info("plan name from GET coverage="+ cur_org_plan_name)
	
	// get the plans and make sure Non HSA Medical , Dental and Vision plans are selected.
	if(benefit.benefit_lookup_code == "medical" || benefit.benefit_lookup_code == "dental" 
	|| benefit.benefit_lookup_code == "vision" || benefit.benefit_lookup_code == "basic_subscriber_life"
	|| benefit.benefit_lookup_code == "hsa" || benefit.benefit_lookup_code == "subscriber_life"
	|| benefit.benefit_lookup_code == "hcra"){
		
		// if the current plan is Decline for Medical , Dental and Vision benefits, set to non decline plans
		
		if(cur_org_plan_name == "Decline"){
			
			def coveragePlan = plansJson.data.find {it.plan_name != "Decline" &amp;&amp; it.plan_name != "Medical Plan - HSA" }
								
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)			
			updateCoverage(coveragePlan,benefit);
		}	
	}
}

def getBenefitPlans(def benefit, def plansJson){
	
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	plansJson = new JsonSlurper().parseText(plansResponse)

	return plansJson;
}

def getBenefitCoverage(def benefit,def coverageJson){
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	return coverageJson;
}

def updateCoverage(def coveragePlan, def benefit) {
			
		def updateCoverageReqMap = [:]
		def updateCoverageDataMap = [:]

		log.info("coveragePlan ="+coveragePlan)
		
		updateCoverageDataMap.put("org_plan_id",coveragePlan.plan_id)
		updateCoverageDataMap.put("coverage_level_id",coveragePlan.level_id)
		updateCoverageDataMap.put("dependent_coverages",[])
		updateCoverageDataMap.put("beneficiaries",[])
		if(benefit.benefit_class == "contribution" ){
			if(coveragePlan.waived == true ){
				updateCoverageDataMap.put("subscriber_amount", "0.0")
			} else {
				updateCoverageDataMap.put("subscriber_amount",coveragePlan.subscriber_min_amount )
			}
		}else if(benefit.benefit_class == "volume" &amp;&amp; coveragePlan.waived != true ){
			if(coveragePlan.increments != null){
				updateCoverageDataMap.put("increments","2.0" )
			}
		}

		log.info("updateCoverageDataMap ="+updateCoverageDataMap)
		
		updateCoverageReqMap.put("data",updateCoverageDataMap)
		def updateCoveragePayload = new JsonBuilder(updateCoverageReqMap).toPrettyString()
		
		log.info("updateCoveragePayload ="+updateCoveragePayload)
		
		def updateCoverageRequest = testRunner.testCase.getTestStepByName("PUT Benefit Coverage").getTestRequest()
		updateCoverageRequest.setRequestContent(updateCoveragePayload)
		
		//Set benefit id for PUT Benefit Coverage request.
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
		testRunner.runTestStepByName("PUT Benefit Coverage");
	
		def updateCoverageResponse = testRunner.testCase.testSteps["PUT Benefit Coverage"].testRequest.response.contentAsString

		//log.info("updateCoverageResponse ="+updateCoverageResponse)
		//def updateCoverageJson = new JsonSlurper().parseText(updateCoverageResponse)
	
		//log.info("updateCoverageJson = "+updateCoverageJson)
	}</script></con:config></con:testStep><con:testStep type="groovy" name="Assert Benefits" id="995639f0-3f38-4033-b340-700628d0d231"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	// Get Benefit coverage
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	
	def cur_org_plan_name = coverageJson.data.org_plan_name
	log.info("plan name ="+ cur_org_plan_name +"plan id = "+coverageJson.data.org_plan_id + "from GET coverage")

	// Get plans for the given bebefit.
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)
	
	// assert basic plan is not waive
	if( benefit.benefit_lookup_code == "basic_subscriber_life" ) {		
		assert(cur_org_plan_name != "Decline")
	}else if( benefit.benefit_lookup_code == "subscriber_life"){
		assert(cur_org_plan_name != "Decline")
		def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
		assert(coveragePlan != null )
		// make sure we got Beneficiaries from Get coverage
		assert(coverageJson.data.beneficiaries != null )
		def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
		assert(primaryBeneficiary != null)
		assert(primaryBeneficiary.allocation == "100.0")

		// assert EOI
		assert(coverageJson.data.waiting_for_eoi == false)
		
	}else{
		assert(cur_org_plan_name != "Decline")
	}
	
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" disabled="true" id="7698f11b-e771-47a0-89c9-d67fb6381955"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "org_plan_id": 183865,
        "coverage_level_id": 9,
        "dependent_coverages": [
            
        ],
        "beneficiaries": [
            
        ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="de59f2ee-558a-4951-9b11-4e458cc2536d"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8391881efce6deeadba4050ac37342d"/>
  <con:entry key="benefitId" value="60769"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT Session Token-LogOff" id="571d29cc-8261-4acc-80fe-1899dda1d8ac"><con:settings/><con:config service="MMA MarketLink API" methodName="put" resourcePath="/api/session" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Session Token-LogOff" mediaType="application/json" postQueryString="false" id="25862d0b-0c9f-4f58-a1d3-3a73f7298dfa"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6441896f-53ff-438c-9264-76431ebd97b4"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="de283f80ad9f820eb2a45bedc59fbbd6" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="QA Comp Single Employee +Few Benefits with (HSA,EOI) Regression" searchProperties="true" id="f8d6b8ae-36b9-434c-9ade-a06bc975bf9e"><con:description>TestCase generated for REST Resource [Session Context] located at [/session/context]</con:description><con:settings/><con:testStep type="groovy" name="LoginScript" id="839f92dc-f979-4229-b65f-a5a96455d685"><con:settings/><con:config><script>import groovy.json.* 

//Create a new filereader object, using the context variable so it can be used between test components
context.fileReader = new BufferedReader(new FileReader("D:\\Regression soupui tests 10-22.csv"))
//Read in the first line of the data file
//Read in the first line of the data file
rowsData = context.fileReader.readLines()
int rowsize = rowsData.size()
//log.info(rowsize)
//log.info(rowsData)

for(int i =1;  i &lt; rowsize;  i++)
{
 rowdata = rowsData[i]
// log.info(rowdata)
String[] data = rowdata.split(",")
//log.info(data[0])
//log.info(data[1])

log.info(data[0]+ data[1])
def loginMap = ['username': data[0], 'password': data[1]]
def loginPayload = new JsonBuilder(loginMap).toPrettyString()
def loginRequest = testRunner.testCase.getTestStepByName("Get Session Token").getTestRequest()
loginRequest.setRequestContent(loginPayload)


testRunner.runTestStepByName("Get Session Token");


//Parse the json response from login for assertions---------------------------------------------------------------//.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

def MMATokenResponse= json.data
assert(MMATokenResponse.expires != null)
assert(MMATokenResponse.mmatoken != null)
//log.info(MMATokenResponse.mmatoken)
//==================================================================================================================
//Set mmatoken on ALL secured requests=====PASSING MAA TOKEN TO FOLLOWING REQUESTS==================================
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Logoff", "mmatoken", json.data.mmatoken)
//====================================================================================================================
// GET SESSION CONTEXT REQUEST SCRIPT=================================================================================
testRunner.runTestStepByName("Get Session Context");

//====================================================================================================================
//GET SESSION CONTEXT ASSERTIONS======================================================================================
def SessionResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def SCjson = new JsonSlurper().parseText(SessionResponse)

def SCResponse= SCjson.data
assert(SCResponse.organization_id == 2396)
assert SCResponse.participant_id == data[2].toInteger()
//log.info(SCResponse.participant_id)

//Assertions for Plan Year 1 setup details
assert(SCResponse.enrollment_context[0].enrollment_ends_on == "2014/12/31")
assert(SCResponse.enrollment_context[0].enrollment_starts_on == "2014/07/26")
assert(SCResponse.enrollment_context[0].enrollment_type_lookup_code == "open")
assert(SCResponse.enrollment_context[0].org_plan_year_id == 5015)
assert(SCResponse.enrollment_context[0].plan_year_ends_on == "2014/12/31")
assert(SCResponse.enrollment_context[0].plan_year_starts_on == "2014/01/01")

//Assertions for Plan Year 2 setup details
//assert(SCResponse.enrollment_context[1].enrollment_ends_on == "2014/12/01")
//assert(SCResponse.enrollment_context[1].enrollment_starts_on == "2014/11/01")
//assert(SCResponse.enrollment_context[1].enrollment_type_lookup_code == "open")
//assert(SCResponse.enrollment_context[1].org_plan_year_id == 5043)
//assert(SCResponse.enrollment_context[1].plan_year_ends_on == "2015/12/31")
//assert(SCResponse.enrollment_context[1].plan_year_starts_on == "2015/01/01")

//==============================================================================================================

//log.info(json.data.participant_id)
//Set mmatoken on ALL secured requests
def groovyUtils1 = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils1.setPropertyValue("Get Participant", "participantId", SCjson.data.participant_id.toString())
groovyUtils1.setPropertyValue("Get Benefits List", "participantId", SCjson.data.participant_id.toString())
groovyUtils1.setPropertyValue("Get Benefit Coverage", "participantId", SCjson.data.participant_id.toString())
//===============================================================================================================
//GET PARTICIPANT values=========================================================================================

testRunner.runTestStepByName("Get Participant");
//===============================================================================================================

def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
log.info(participant.ssn)
log.info(data[9])
assert participant.address_1 == data[3].toString()
assert(participant.city == data[4])
assert(participant.first_name == data[5])
assert(participant.last_name == data[6])
assert(participant.gender == data[7])
assert(participant.hire_date == data[8])
//Commented 
//assert(participant.ssn == data[9])
assert(participant.zip_code == data[10])
//====================================================================================================================

testRunner.runTestStepByName("Get Benefits List");

//====================================================================================================================

//=============Preparing Benefit  By Id Request=======================================================================

def benefitsResponse = testRunner.testCase.testSteps["Get Benefits List"].testRequest.response.contentAsString
def Bjson = new JsonSlurper().parseText(benefitsResponse)

def benefit = Bjson.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils3 = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils3.setPropertyValue("Get Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
//log.info("org_benefit_id = "+ benefit.org_benefit_id)

log.info("Line"+ i +"Execution completed")
}












</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Token" id="7f969f44-42a1-4132-a8f6-d4c295c918ed" disabled="true"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
    "username": "Single2",
    "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ae6baabb-03cd-43a2-9ec1-20961bdb71ff"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Token" id="15bed7c7-18d2-4e41-8402-1f17ae6e4673" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def sessionJson = new JsonSlurper().parseText(loginResponse)

assert(sessionJson.data.mmatoken != null)
assert(sessionJson.data.expires != null)</script></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="588e3703-31ff-4002-b997-a6df3c9549a3" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Session Token", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="54394478-10ac-4267-9427-c3c9dfd7d768" disabled="true"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="2d4ed4de-1ad3-487c-a071-0d03ee8de6c4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="31a8929c07c12d88b831688df9e8ccca" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Context" id="c5923552-1cae-4a38-9429-1538e326a4a4" disabled="true"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def contextResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def contextJson = new JsonSlurper().parseText(contextResponse)

//Set Participant Id to Get Participant request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Participant", "participantId", contextJson.data.participant_id.toString())

/*
assert(contextJson.data.organization_id == 2523)
assert(contextJson.data.participant_id == 8290797)
def enrollment_context = contextJson.data.enrollment_context
assert(enrollment_context != null)
assert(enrollment_context.enrollment_ends_on == "2014/12/01")
assert(enrollment_context.enrollment_starts_on == "2014/10/15")
assert(enrollment_context.plan_year_starts_on == "2015/01/01")
assert(enrollment_context.enrollment_type_lookup_code == "open")
assert(enrollment_context.plan_year_ends_on == "2015/12/31")
assert(enrollment_context.org_plan_year_id == 5043)
*/</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" disabled="true" id="bb3fdcce-ed2d-4b41-ac2c-e2404dd43216"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" mediaType="application/json" id="0c7a1360-0277-4934-8484-349bb29cbc1c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/8290797</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="8efe8e02-6b8b-4723-a603-c75bd60545cc"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31a8929c07c12d88b831688df9e8ccca"/>
  <con:entry key="participantId" value="8290637"/>
</con:parameters><con:parameterOrder><con:entry>mmatoken</con:entry><con:entry>participantId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Participant Details Valid" id="2f30c231-345f-4466-afd9-258678f67ef7" disabled="true"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
//validate participant details
assert(participant.ssn == "555-10-1003")
assert(participant.address_1 == "123 market st")
assert(participant.last_name == "qa test4")
assert(participant.first_name == "single test4")
assert(participant.city == "test city")
assert(participant.state == "PA")
assert(participant.zip_code == "19406")
assert(participant.gender == "F")
assert(participant.marital_status == "S")
assert(participant.hire_date == "2014/09/01")</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="f500b908-5c2b-482d-ab36-5ec6e8db132c" disabled="true"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def participant_toberestore = participant
def participant_tobeupdated = participant
/*
participant_tobeupdated.address_1 = "123 market st"
participant_tobeupdated.last_name="qa test4"
participant_tobeupdated.first_name = "single test4"
participant_tobeupdated.city = "test city"
participant_tobeupdated.marital_status = "S"
*/
participant_tobeupdated.address_1 = participant.address_1 + " reg"
participant_tobeupdated.last_name = participant.last_name + " reg"
participant_tobeupdated.first_name = participant.first_name + " reg"
participant_tobeupdated.city = participant.city + " reg"
//participant_tobeupdated.state = participant.state + " reg"
//participant_tobeupdated.zip_code = participant.zip_code + "1"
participant_tobeupdated.marital_status = "M"

// update the dependent

def participantMap = [:]
participantMap.put("ssn", "555-10-1003")
participantMap.put("address_1", "123 market st reg")
participantMap.put("last_name", "qa test4 reg")
participantMap.put("first_name", "single test4 reg")
participantMap.put("city", "test city reg")
participantMap.put("state", "PA reg")
participantMap.put("zip_code","19407")
participantMap.put("gender","F")
participantMap.put("marital_status","M")
participantMap.put("hire_date","2014/09/01")
participantMap.put("organization_code","qa_regression")
participantMap.put("participant_id",participant.participant_id)

def updatedMap = [:]
updatedMap.put('data', participant_tobeupdated)
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()
log.info(updatedPayload)
def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)
testRunner.runTestStepByName("Update Participant");

// Get the updated participant and assure the values are refleted.
def groovyUtils1 = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils1.setPropertyValue("Get Participant", "participantid", participant_id)
testRunner.runTestStepByName("Get Participant");

def prtcpntResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def updtedJson = new JsonSlurper().parseText(prtcpntResponse)
def updtedParticipant = updtedJson.data
log.info("updtedParticipant ="+updtedParticipant)

assert(updtedParticipant.ssn == "555-10-1003")
assert(updtedParticipant.address_1 == "123 market st reg")
assert(updtedParticipant.last_name == "qa test4 reg")
assert(updtedParticipant.first_name == "single test4 reg")
assert(updtedParticipant.city == "test city reg")
//assert(updtedParticipant.state == "PA")
//assert(updtedParticipant.zip_code == "194071")
assert(updtedParticipant.gender == "F")
assert(updtedParticipant.marital_status == "M")
assert(updtedParticipant.hire_date == "2014/09/01")

// restore the participant to orginal

participant_toberestore.address_1 = "123 market st"
participant_toberestore.last_name="qa test4"
participant_toberestore.first_name = "single test4"
participant_toberestore.city = "test city"
participant_toberestore.marital_status = "S"

log.info("participant_toberestore ="+ participant_toberestore)

updatedMap.put('data', participant_toberestore)
def restorePayload = new JsonBuilder(updatedMap).toPrettyString()
log.info(restorePayload)
def restoreRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
restoreRequest.setRequestContent(restorePayload)

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def restore_participant_id = participant_toberestore.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", restore_participant_id)
testRunner.runTestStepByName("Update Participant");

// run Assert Participant Details Valid
//testRunner.runTestStepByName("Assert Participant Details Valid");
groovyUtils1.setPropertyValue("Get Participant", "participantid", restore_participant_id)
testRunner.runTestStepByName("Get Participant");
//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def restoredParticipant = empJson.data
//validate participant details
assert(restoredParticipant.ssn == "555-10-1003")
assert(restoredParticipant.address_1 == "123 market st")
assert(restoredParticipant.last_name == "qa test4")
assert(restoredParticipant.first_name == "single test4")
assert(restoredParticipant.city == "test city")
assert(restoredParticipant.state == "PA")
assert(restoredParticipant.zip_code == "19406")
assert(restoredParticipant.gender == "F")
assert(restoredParticipant.marital_status == "S")
assert(restoredParticipant.hire_date == "2014/09/01")



</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="3e97d5b8-fd4f-4413-a4df-2e5e90b833bc" disabled="true"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
    "data": {
        "hire_date": "2014/09/01",
        "zip_code": "19406",
        "organization_code": "qa_regression",
        "middle_name": "",
        "ssn": "555-10-1003",
        "state": "PA",
        "address_1": "123 market st",
        "address_2": "",
        "email2": "",
        "country": "",
        "city": "test city",
        "participant_id": 8290797,
        "first_name": "single test4",
        "organization_id": 2523,
        "work_phone": "",
        "last_name": "qa test4",
        "gender": "F",
        "home_phone": "",
        "marital_status": "S"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="369928e9-9cb9-44c7-9a37-9848b1b24a50"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="84b7e01af19739f5d87951f55a4a474a"/>
  <con:entry key="participantId" value="8290797"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="6be26de8-0d0e-4453-b4d4-3d9db69f3f8e" disabled="true"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="73b466e0-41d5-4888-a4a2-526ccf76009d"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="84b7e01af19739f5d87951f55a4a474a"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Ensure No Dependents Exists" id="89f0c589-a856-431e-b74a-48b4175c16c1" disabled="true"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent == null)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Benefits List" id="bbb58273-7ec8-44d9-b605-cda6c20eec1a" disabled="true"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="7ade895e-dd90-425e-ab1d-444aa4bc70dc"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31a8929c07c12d88b831688df9e8ccca"/>
  <con:entry key="participantId" value="8290637"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Benefits List" id="9eb6553a-a3da-4bb0-a09d-24ab1460b1d2" disabled="true"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def BLResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(BLResponse)

def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "medical"}
log.info(MedicalBenlist)
assert(MedicalBenlist.display_order == 1)
assert(MedicalBenlist.org_benefit_name == "Medical")
assert(MedicalBenlist.enrollment_method == "standard")
assert(MedicalBenlist.premium_method == "tier")
assert(MedicalBenlist.annual_payday_count == 26)

def DentalBenlist = Json.data.find{it.benefit_lookup_code == "dental"}
log.info(DentalBenlist)
assert(DentalBenlist.display_order == 3)
assert(DentalBenlist.org_benefit_name == "Dental")
assert(DentalBenlist.enrollment_method == "standard")
assert(DentalBenlist.premium_method == "tier")
assert(DentalBenlist.annual_payday_count == 26)


def HcraBenlist = Json.data.find{it.benefit_lookup_code == "hcra"}
log.info(HcraBenlist)
assert(HcraBenlist.display_order == 4)
assert(HcraBenlist.org_benefit_name == "Health Care Reimbursement Account")
assert(HcraBenlist.enrollment_method == "enter_annual")
assert(HcraBenlist.premium_method == "annual_target")
assert(HcraBenlist.annual_payday_count == 26)

def VisionBenlist = Json.data.find{it.benefit_lookup_code == "vision"}
log.info(VisionBenlist)
assert(VisionBenlist.display_order == 5)
assert(VisionBenlist.org_benefit_name == "Vision")
assert(VisionBenlist.enrollment_method == "standard")
assert(VisionBenlist.premium_method == "tier")
assert(VisionBenlist.annual_payday_count == 26)


def BSLBenlist = Json.data.find{it.benefit_lookup_code == "basic_subscriber_life"}
log.info(BSLBenlist)
assert(BSLBenlist.display_order == 6)
assert(BSLBenlist.org_benefit_name == "Basic Employee Life")
assert(BSLBenlist.enrollment_method == "standard")
assert(BSLBenlist.premium_method == "tier")
assert(BSLBenlist.annual_payday_count == 26)


def SLBenlist = Json.data.find{it.benefit_lookup_code == "subscriber_life"}
log.info(SLBenlist)
assert(SLBenlist.display_order == 7)
assert(SLBenlist.org_benefit_name == "Voluntary Employee Life")
assert(SLBenlist.enrollment_method == "increments")
assert(SLBenlist.premium_method == "tier")
assert(SLBenlist.annual_payday_count == 26)

def HsaBenlist = Json.data.find{it.benefit_lookup_code == "hsa"}
log.info(HsaBenlist)
assert(HsaBenlist.display_order == 2)
assert(HsaBenlist.org_benefit_name == "Health Savings Account")
assert(HsaBenlist.enrollment_method == "enter_monthly")
assert(HsaBenlist.premium_method == "monthly_amount")
assert(HsaBenlist.annual_payday_count == 26)


</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="b01f1692-6d36-4c1c-90bd-93f3b64945f4" disabled="true"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="ab18ce4f-7fc8-4063-a563-393d74c9fb52" disabled="true"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="0912b702-c8a8-4f76-98d3-a0630bf7fc19"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="84b7e01af19739f5d87951f55a4a474a"/>
  <con:entry key="benefitId" value="60809"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="71da60b7-c0d6-43ee-82f7-71fcdbd5de51" disabled="true"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Benefit Coverage" id="75d6e6f5-e2a4-4545-ac17-e97b1845785c" disabled="true"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="580651ca-31d6-4a71-bbd6-246a1fba1472"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31a8929c07c12d88b831688df9e8ccca"/>
  <con:entry key="benefitId" value="60555"/>
  <con:entry key="participantId" value="8290637"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Get Benefit Coverage" id="587ba6fc-3f2e-49b6-8738-c458881f1be0" disabled="true"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){
	//getBenefitCoverage
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)

	if(benefit.benefit_lookup_code == "medical"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Employee Only")
      	assert(coverageJson.data.coverage_level_id == 9)
      	assert(coverageJson.data.org_plan_name == "HSA Eligible")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183969)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "EE")
	}
	
	if(benefit.benefit_lookup_code == "dental"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Employee Only")
      	assert(coverageJson.data.coverage_level_id == 9)
      	assert(coverageJson.data.org_plan_name == "Delta PPO")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183970)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "EE")
	}

	if(benefit.benefit_lookup_code == "subscriber_life"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	assert(coverageJson.data.org_plan_name == "Voluntary Employee Life")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183959)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")

	     def beneficiaries = coverageJson.data.beneficiaries
	     for(beneficiary in beneficiaries){
			//def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
			assert(beneficiary != null)
			assert(beneficiary.primary_beneficiary == true)
			log.info("beneficiary ="+ beneficiary)
			assert(beneficiary.allocation == "50.0")
		}
		// assert No EOI
		assert(coverageJson.data.waiting_for_eoi == false)
	}

	if(benefit.benefit_lookup_code == "basic_subscriber_life"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	//assert(coverageJson.data.org_plan_name == "Basic - $250,000")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183972)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
	}

	if(benefit.benefit_lookup_code == "vision"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Employee Only")
      	assert(coverageJson.data.coverage_level_id == 9)
      	//assert(coverageJson.data.org_plan_name == "Vision Care")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183971)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "EE")
	}

	if(benefit.benefit_lookup_code == "hcra"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183964)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	if(benefit.benefit_lookup_code == "hsa"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	assert(coverageJson.data.org_plan_name == "Health Savings Account")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183967)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="5e058480-d083-4890-84b9-4d291bd9a848" disabled="true"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="e58194e8-5c96-46ba-b4b4-1b8443b30b13" disabled="true"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="edb07f06-8755-44c3-b6c0-fae3d1992abe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="765ec3c2-d5f8-4b40-889f-95f28ce6add1"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="84b7e01af19739f5d87951f55a4a474a"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Benefits" id="1b9257a7-6f76-4986-bcda-03dcafdd2abe" disabled="true"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	// Get Benefit coverage
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	
	def cur_org_plan_name = coverageJson.data.org_plan_name
	log.info("plan name ="+ cur_org_plan_name +"\n plan id = "+coverageJson.data.org_plan_id + "from GET coverage")

	// Get plans for the given bebefit.
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)
	
	// assert basic plan is not waive
	if( benefit.benefit_lookup_code == "basic_subscriber_life" ) { 
		assert(cur_org_plan_name != "Decline")
	}else if( benefit.benefit_lookup_code == "subscriber_life"){
		assert(cur_org_plan_name != "Decline")
		def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
		assert(coveragePlan != null )
		// make sure we got Beneficiaries from Get coverage and verify allocation is 50.0 for both
		def beneficiaries = coverageJson.data.beneficiaries
		assert(beneficiaries != null )
		for(beneficiary in beneficiaries){
			//def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
			assert(beneficiary != null)
			assert(beneficiary.primary_beneficiary == true)
			log.info("beneficiary ="+ beneficiary)
			assert(beneficiary.allocation == "50.0")
		}
		// assert No EOI
		assert(coverageJson.data.waiting_for_eoi == false)
		
	}else if( benefit.benefit_lookup_code == "medical" ){
		//def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
		assert(cur_org_plan_name != "Decline")
		assert(cur_org_plan_name == "HSA Eligible")
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare PUT Coverage Requests" id="b29455f6-8228-4170-9d5d-12d14b306a09" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
	
	
	//getBenefitPlans(benefit,plansJson);
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)

	//def coverageJson 
	//getBenefitCoverage(benefit,coverageJson);
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
			
	def cur_coverage_plan_id = coverageJson.data.org_plan_id;
	def cur_org_plan_name = coverageJson.data.org_plan_name
	
	log.info("plan id from GET coverage="+ coverageJson.data.org_plan_id)
	log.info("plan name from GET coverage="+ cur_org_plan_name)
	
	// get the plans and make sure Non HSA Medical , Dental and Vision plans are selected.
	if(benefit.benefit_lookup_code == "medical" || benefit.benefit_lookup_code == "dental" 
	|| benefit.benefit_lookup_code == "vision" || benefit.benefit_lookup_code == "basic_subscriber_life"
	|| benefit.benefit_lookup_code == "hsa" || benefit.benefit_lookup_code == "subscriber_life"){
		
		// if the current plan is Decline for Medical , Dental and Vision benefits, set to non decline plans
		
		if(cur_org_plan_name == "Decline"){
			
			def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
			if(coveragePlan.plan_name != "Medical Plan - HSA" && benefit.benefit_lookup_code == "medical"){
				coveragePlan = plansJson.data.find {it.plan_name == "Medical Plan - HSA" }
			}
			if( null != coveragePlan ) {
				log.info("coverage level id = "+ coveragePlan.level_id)
				log.info("coverage plan id = "+ coveragePlan.plan_id)
				log.info("coverage plan name = "+ coveragePlan.plan_name)
				if (	benefit.benefit_lookup_code == "subscriber_life" ){
					def beneficiaries = coverageJson.data.beneficiaries
					log.info("beneficiaries="+beneficiaries)
					updateCoverage(coveragePlan,benefit,beneficiaries);
				}			
				updateCoverage(coveragePlan,benefit, null);
			}
		}else if(cur_org_plan_name != "Decline" && benefit.benefit_lookup_code == "medical"){
			def coveragePlan = plansJson.data.find {it.plan_name == "Medical Plan - HSA" }
			if( null != coveragePlan ){
				log.info("coverage level id = "+ coveragePlan.level_id)
				log.info("coverage plan id = "+ coveragePlan.plan_id)
				log.info("coverage plan name = "+ coveragePlan.plan_name)			
				updateCoverage(coveragePlan,benefit, null);
			}
		}else if(cur_org_plan_name != "Decline" && benefit.benefit_lookup_code == "subscriber_life"){
			def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
			if( null != coveragePlan ) {
				log.info("coverage level id = "+ coveragePlan.level_id)
				log.info("coverage plan id = "+ coveragePlan.plan_id)
				log.info("coverage plan name = "+ coveragePlan.plan_name)
				def beneficiaries = coverageJson.data.beneficiaries
				log.info("beneficiaries="+beneficiaries)
				for(beneficiarry in beneficiaries){
					if(beneficiarry != null && beneficiarry.primary_beneficiary == true ){
						if(! beneficiarry.allocation == "50.0"){
							beneficiarry.allocation = "50.0"
						}
					}
				}
				updateCoverage(coveragePlan,benefit,beneficiaries);
			}
					
	
		}
	}else if ( benefit.benefit_lookup_code == "hcra"){
		def coveragePlan = plansJson.data.find {it.plan_name == "Decline" }
		if(null != coveragePlan){
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)			
			updateCoverage(coveragePlan,benefit, null);
		}
	}
}

def updateCoverage(def coveragePlan, def benefit, def beneficiaries) {
			
		def updateCoverageReqMap = [:]
		def updateCoverageDataMap = [:]

		log.info("coveragePlan ="+coveragePlan)
		
		updateCoverageDataMap.put("org_plan_id",coveragePlan.plan_id)
		updateCoverageDataMap.put("coverage_level_id",coveragePlan.level_id)
		updateCoverageDataMap.put("dependent_coverages",[])
		updateCoverageDataMap.put("beneficiaries",[])
		if(benefit.benefit_class == "contribution" ){
			if(coveragePlan.waived == true ){
				updateCoverageDataMap.put("subscriber_amount", "0.0")
			} else {
				updateCoverageDataMap.put("subscriber_amount",coveragePlan.subscriber_min_amount )
			}
		}else if(benefit.benefit_class == "volume" && coveragePlan.waived != true ){
			if(coveragePlan.increments != null){
				updateCoverageDataMap.put("increments","2.0" )
			}
			if(benefit.beneficiary_required == true && beneficiaries != null ){
				updateCoverageDataMap.put("beneficiaries", beneficiaries)
			}
		}

		log.info("updateCoverageDataMap ="+updateCoverageDataMap)
		
		updateCoverageReqMap.put("data",updateCoverageDataMap)
		def updateCoveragePayload = new JsonBuilder(updateCoverageReqMap).toPrettyString()
		
		log.info("updateCoveragePayload ="+updateCoveragePayload)
		
		def updateCoverageRequest = testRunner.testCase.getTestStepByName("PUT Benefit Coverage").getTestRequest()
		updateCoverageRequest.setRequestContent(updateCoveragePayload)
		
		//Set benefit id for PUT Benefit Coverage request.
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
		testRunner.runTestStepByName("PUT Benefit Coverage");
	
		def updateCoverageResponse = testRunner.testCase.testSteps["PUT Benefit Coverage"].testRequest.response.contentAsString

		//log.info("updateCoverageResponse ="+updateCoverageResponse)
		//def updateCoverageJson = new JsonSlurper().parseText(updateCoverageResponse)
	
		//log.info("updateCoverageJson = "+updateCoverageJson)
	}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" disabled="true" id="7e2ac997-66f6-4cd7-ab20-76d45127358d"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
    "data": {
        "org_plan_id": 183959,
        "coverage_level_id": 18,
        "dependent_coverages": [
            
        ],
        "beneficiaries": [
            {
                "id": 2731408,
                "relationship": "Mother",
                "name": "Mom",
                "allocation": "50.0",
                "primary_beneficiary": true
            },
            {
                "id": 2731409,
                "relationship": "Father",
                "name": "Dad",
                "allocation": "50.0",
                "primary_beneficiary": true
            }
        ],
        "increments": "2.0"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="50fa88ac-f93a-4f0b-8def-13dfc2b355a3"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="84b7e01af19739f5d87951f55a4a474a"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Logoff" disabled="true" id="8875c304-c23d-475a-8836-dd9e0471a974"><con:settings/><con:config service="MMA MarketLink API" methodName="put" resourcePath="/api/session" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Logoff" mediaType="application/json" postQueryString="false" id="1787a74e-da46-4fae-a8e4-5ad907c72d01"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="10684a07-bf5b-49ed-bf9f-eee067a6f15c"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="31a8929c07c12d88b831688df9e8ccca" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="QA Comp Single Employee  No Benefits and No EOI  Regression" searchProperties="true" id="7753b298-f57c-4ba3-b324-0e66ecd13532"><con:description>TestCase generated for REST Resource [Session Context] located at [/session/context]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="c58f6c0f-1892-4dce-aa2f-edd39d8a4a39"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
   "username": "QASingle3",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="562d8589-050e-4025-ac0b-ae19f9b5c77a"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Token" id="196fea58-73f5-4be5-bcde-70d062b6f60b"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def sessionJson = new JsonSlurper().parseText(loginResponse)

assert(sessionJson.data.mmatoken != null)
assert(sessionJson.data.expires != null)</script></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="c42ba051-dc1f-4961-8160-6e3d8d58733b"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Session Token", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="37c91df8-95e5-4dad-884a-7f82af705f3f"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="86dc97ce-7bc0-4829-8b1a-5e5f9da064ee"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="bd22a6c96d26367fab480dc45f73bf21" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Context" id="ab6ac492-7bef-41fa-9cd6-294ca7f05ea7"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def contextResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def contextJson = new JsonSlurper().parseText(contextResponse)
//Set Participant Id to Get Participant request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Participant", "participantId", contextJson.data.participant_id.toString())


/*
assert(contextJson.data.organization_id == 2523)
assert(contextJson.data.participant_id == 8290798)
def enrollment_context = contextJson.data.enrollment_context
assert(enrollment_context != null)
assert(enrollment_context.enrollment_ends_on == "2014/12/01")
assert(enrollment_context.enrollment_starts_on == "2014/10/15")
assert(enrollment_context.plan_year_starts_on == "2015/01/01")
assert(enrollment_context.enrollment_type_lookup_code == "open")
assert(enrollment_context.plan_year_ends_on == "2015/12/31")
assert(enrollment_context.org_plan_year_id == 5043)
*/</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="96769bf1-939f-4941-957d-099eba089283"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="cdb2989c-c648-403e-acbc-cde938d9de7e"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="bd22a6c96d26367fab480dc45f73bf21"/>
  <con:entry key="participantId" value="8290798"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Participant Details Valid" id="09e3fec0-553c-4d90-b94c-7defa4ba67fc"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
//validate participant details
assert(participant.ssn == "666-11-1003")
assert(participant.address_1 == "258 Regression Way")
assert(participant.last_name == "QARegression3")
assert(participant.first_name == "Single")
assert(participant.city == "King of Prussia")
assert(participant.state == "PA")
assert(participant.zip_code == "19406")
assert(participant.gender == "M")
assert(participant.marital_status == "S")
assert(participant.hire_date == "2014/09/01")

</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="0da30862-902c-40bb-b110-b7578146935d"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def updatedMap = ['data' : participant]
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()

log.info(updatedPayload)

def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="1216bc73-7a33-4105-a133-02a3bdbe17c9"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "hire_date": "2014/09/01",
        "zip_code": "19406",
        "organization_code": "qa_regression",
        "middle_name": "",
        "ssn": "666-11-1003",
        "state": "PA",
        "address_1": "258 Regression Way",
        "address_2": "",
        "email2": "",
        "country": "",
        "city": "King of Prussia",
        "participant_id": 8290798,
        "first_name": "Single",
        "organization_id": 2523,
        "work_phone": "",
        "last_name": "QARegression3",
        "gender": "M",
        "home_phone": "",
        "marital_status": "S"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="64294ed6-e51e-483f-bc77-2510cba7f6d5"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="bd22a6c96d26367fab480dc45f73bf21"/>
  <con:entry key="participantId" value="8290798"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="fb9548b7-e36b-4ec9-bbdb-89ebd07bdace"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a2bcb808-e415-48c0-b9e6-f454e91841f2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="bd22a6c96d26367fab480dc45f73bf21"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Ensure No Dependents Exists" id="91687a9f-76a7-4095-ac90-90378cec8aa3"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent == null)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="64b2c450-59b7-4294-8627-5b9884c91803"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="5d9a690c-c111-42bb-b571-12d0f4d35c69"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="bd22a6c96d26367fab480dc45f73bf21"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Benefits List" id="c90cb769-8356-461b-80e3-7a3f560a3794"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def BLResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(BLResponse)

def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "medical"}
log.info(MedicalBenlist)
assert(MedicalBenlist.display_order == 1)
assert(MedicalBenlist.org_benefit_name == "Medical")
assert(MedicalBenlist.enrollment_method == "standard")
assert(MedicalBenlist.premium_method == "tier")
assert(MedicalBenlist.annual_payday_count == 26)

def DentalBenlist = Json.data.find{it.benefit_lookup_code == "dental"}
log.info(DentalBenlist)
assert(DentalBenlist.display_order == 3)
assert(DentalBenlist.org_benefit_name == "Dental")
assert(DentalBenlist.enrollment_method == "standard")
assert(DentalBenlist.premium_method == "tier")
assert(DentalBenlist.annual_payday_count == 26)


def HcraBenlist = Json.data.find{it.benefit_lookup_code == "hcra"}
log.info(HcraBenlist)
assert(HcraBenlist.display_order == 4)
assert(HcraBenlist.org_benefit_name == "Health Care Reimbursement Account")
assert(HcraBenlist.enrollment_method == "enter_annual")
assert(HcraBenlist.premium_method == "annual_target")
assert(HcraBenlist.annual_payday_count == 26)

def VisionBenlist = Json.data.find{it.benefit_lookup_code == "vision"}
log.info(VisionBenlist)
assert(VisionBenlist.display_order == 5)
assert(VisionBenlist.org_benefit_name == "Vision")
assert(VisionBenlist.enrollment_method == "standard")
assert(VisionBenlist.premium_method == "tier")
assert(VisionBenlist.annual_payday_count == 26)


def BSLBenlist = Json.data.find{it.benefit_lookup_code == "basic_subscriber_life"}
log.info(BSLBenlist)
assert(BSLBenlist.display_order == 6)
assert(BSLBenlist.org_benefit_name == "Basic Employee Life")
assert(BSLBenlist.enrollment_method == "standard")
assert(BSLBenlist.premium_method == "tier")
assert(BSLBenlist.annual_payday_count == 26)


def SLBenlist = Json.data.find{it.benefit_lookup_code == "subscriber_life"}
log.info(SLBenlist)
assert(SLBenlist.display_order == 7)
assert(SLBenlist.org_benefit_name == "Voluntary Employee Life")
assert(SLBenlist.enrollment_method == "increments")
assert(SLBenlist.premium_method == "tier")
assert(SLBenlist.annual_payday_count == 26)


</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="43a8edf9-7814-45c7-b2a7-9fcc660ab9c9"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="f3f960cf-5ec6-4c38-9bed-286d73ff2aa1"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a04b40fa-eba6-4726-b91b-ad1d86362a30"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="bd22a6c96d26367fab480dc45f73bf21"/>
  <con:entry key="benefitId" value="60809"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="408a7e4f-cf2f-4408-8941-0938af6f9ce9"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="98dc61a7-b203-4262-bbf4-8d8fff053eb3"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="0f1d6518-6d87-4d8b-a9d3-4405c2ce6c93"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="bd22a6c96d26367fab480dc45f73bf21"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Get Benefit Coverage" id="a5438ec1-bf89-4ade-82d9-ad0e226d725b"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){
	//getBenefitCoverage
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)

	if(benefit.benefit_lookup_code == "medical"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183954)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}
	
	if(benefit.benefit_lookup_code == "dental"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183955)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	if(benefit.benefit_lookup_code == "subscriber_life"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	assert(coverageJson.data.org_plan_name == "Voluntary Employee Life")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183959)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")

	     def beneficiaries = coverageJson.data.beneficiaries
	     for(beneficiary in beneficiaries){
			//def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
			assert(beneficiary != null)
			assert(beneficiary.primary_beneficiary == true)
			log.info("beneficiary ="+ beneficiary)
			assert(beneficiary.allocation == "100.0")
		}
		// assert No EOI
		assert(coverageJson.data.waiting_for_eoi == false)
	}

	if(benefit.benefit_lookup_code == "basic_subscriber_life"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	//assert(coverageJson.data.org_plan_name == "Basic - $250,000")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183972)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
	}

	if(benefit.benefit_lookup_code == "vision"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183956)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	if(benefit.benefit_lookup_code == "hcra"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183964)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="57094dc7-0873-45c7-b8d0-a35c0c5b4cc5"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="90eed3a1-473e-471d-93ce-056dd7084053"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="29b105a9-2fbe-4490-8859-5ce364f01393"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="e34bdb05-89c4-4eb6-a815-51ff5f96ab41"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="bd22a6c96d26367fab480dc45f73bf21"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Benefits" id="52de41e0-13e0-4db5-af2f-b86f9fa0cf46"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	// Get Benefit coverage
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	
	def cur_org_plan_name = coverageJson.data.org_plan_name
	log.info("plan name ="+ cur_org_plan_name +"plan id = "+coverageJson.data.org_plan_id + "from GET coverage")

	// Get plans for the given bebefit.
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)
	
	// assert basic plan is not waive
	if( benefit.benefit_lookup_code == "basic_subscriber_life" ){		
		assert(cur_org_plan_name != "Decline")
	}else if( benefit.benefit_lookup_code == "subscriber_life"){
		assert(cur_org_plan_name != "Decline")
		def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
		assert(coveragePlan != null )
		// make sure we got Beneficiaries from Get coverage
		assert(coverageJson.data.beneficiaries != null )
		def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
		assert(primaryBeneficiary != null)
		assert(primaryBeneficiary.allocation == "100.0")

		// assert EOI
		assert(coverageJson.data.waiting_for_eoi == false)
		
	}else{
		assert(cur_org_plan_name == "Decline")
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare PUT Coverage Requests" id="0db954b4-9817-47de-8a16-34b161f7090d"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
	
	
	//getBenefitPlans(benefit,plansJson);
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)

	//def coverageJson 
	//getBenefitCoverage(benefit,coverageJson);
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
			
	def cur_coverage_plan_id = coverageJson.data.org_plan_id;
	def cur_org_plan_name = coverageJson.data.org_plan_name
	
	log.info("plan id from GET coverage="+ coverageJson.data.org_plan_id)
	log.info("plan name from GET coverage="+ cur_org_plan_name)
	
	// get the plans and make sure Non HSA Medical , Dental and Vision plans are selected.
	if( benefit.benefit_lookup_code == "basic_subscriber_life" || benefit.benefit_lookup_code == "subscriber_life"){
		
		// if the current plan is Decline 
		if(cur_org_plan_name == "Decline"){
			
			def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
			log.info("non Decline plan = " + coveragePlan)						
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)
			if (	benefit.benefit_lookup_code == "subscriber_life" ){
				def beneficiaries = coverageJson.data.beneficiaries
				updateCoverage(coveragePlan,benefit,beneficiaries);
			}		
			updateCoverage(coveragePlan,benefit,null);
		}
	}else {
		if( cur_org_plan_name != "Decline"){			
			def coveragePlan = plansJson.data.find {it.plan_name == "Decline" }
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)
			updateCoverage(coveragePlan,benefit, null);
		}
		
	}
}


def updateCoverage(def coveragePlan, def benefit, def beneficiaries) {
			
		def updateCoverageReqMap = [:]
		def updateCoverageDataMap = [:]

		log.info("coveragePlan ="+coveragePlan)
		
		updateCoverageDataMap.put("org_plan_id",coveragePlan.plan_id)
		updateCoverageDataMap.put("coverage_level_id",coveragePlan.level_id)
		updateCoverageDataMap.put("dependent_coverages",[])
		updateCoverageDataMap.put("beneficiaries",[])
		if(benefit.benefit_class == "contribution" ){
			if(coveragePlan.waived == true ){
				updateCoverageDataMap.put("subscriber_amount", "0.0")
			} else {
				updateCoverageDataMap.put("subscriber_amount",coveragePlan.subscriber_min_amount )
			}
		}else if(benefit.benefit_class == "volume" &amp;&amp; coveragePlan.waived != true ){
			if(coveragePlan.increments != null){
				updateCoverageDataMap.put("increments","2.0" )
			}
			if(benefit.beneficiary_required == true &amp;&amp; beneficiaries != null ){
				updateCoverageDataMap.put("beneficiaries", beneficiaries)
			}
		}

		log.info("updateCoverageDataMap ="+updateCoverageDataMap)
		
		updateCoverageReqMap.put("data",updateCoverageDataMap)
		def updateCoveragePayload = new JsonBuilder(updateCoverageReqMap).toPrettyString()
		
		log.info("updateCoveragePayload ="+updateCoveragePayload)
		
		def updateCoverageRequest = testRunner.testCase.getTestStepByName("PUT Benefit Coverage").getTestRequest()
		updateCoverageRequest.setRequestContent(updateCoveragePayload)
		
		//Set benefit id for PUT Benefit Coverage request.
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
		testRunner.runTestStepByName("PUT Benefit Coverage");
	
		def updateCoverageResponse = testRunner.testCase.testSteps["PUT Benefit Coverage"].testRequest.response.contentAsString

		//log.info("updateCoverageResponse ="+updateCoverageResponse)
		//def updateCoverageJson = new JsonSlurper().parseText(updateCoverageResponse)
	
		//log.info("updateCoverageJson = "+updateCoverageJson)
	}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" disabled="true" id="494636ff-0790-4df8-8125-245c50ec3674"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "org_plan_id": 183956,
        "coverage_level_id": 19,
        "dependent_coverages": [
            
        ],
        "beneficiaries": [
            
        ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="db6962a8-038c-46f6-b76b-caa828b049cc"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="bd22a6c96d26367fab480dc45f73bf21"/>
  <con:entry key="benefitId" value="60811"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT Session Token" id="9765c322-2ed7-4669-8055-24e603f709b8"><con:settings/><con:config service="MMA MarketLink API" methodName="put" resourcePath="/api/session" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Session Token" mediaType="application/json" postQueryString="false" id="953fb5e8-84eb-4bf7-a7ca-ee830dc7457e"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f066ff2d-7ca9-46df-aa75-c578a8c16c48"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="bd22a6c96d26367fab480dc45f73bf21" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Married With Spouse 1" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e01d6c14-8590-4b55-bd09-d6a6cff48d63"><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="bc7b412e-ff54-428a-b633-eee6863c213f"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
   "username": "QAMarried1",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6b4df92c-9a99-4d5c-9c09-6e6d53f37a71"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get MMAToken" id="28b47f4b-9b02-4d1f-b3d2-1716307e1417"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Session Token", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="groovy" name="Assertions:MAA Token" id="b22e3c7f-4834-4ddd-9d7f-7f8f58e39abc"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

def MMATokenResponse= json.data
assert(MMATokenResponse.expires != null)
assert(MMATokenResponse.mmatoken != null)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="c976ef0c-25de-407a-9d11-6241a5ed40bb"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="5e6cde1e-ee79-41c7-9baa-1b0d5369883c"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="488836df5735aadea55893e9dbbdc5bc" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Session Context" id="96ae9bf3-6b11-4fbd-9c97-a3c5bfcf46d0"><con:settings/><con:config><script>import groovy.json.*

//Parse the json response from login.
def SessionResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(SessionResponse)

def SCResponse= json.data
//Set Participant Id to Get Participant request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Participant", "participantId", SCResponse.participant_id.toString())


/*
assert(SCResponse.organization_id == 2523)
assert(SCResponse.participant_id == 8290799)
assert(SCResponse.enrollment_context.enrollment_ends_on == "2014/12/01")
assert(SCResponse.enrollment_context.enrollment_starts_on == "2014/10/15")
assert(SCResponse.enrollment_context.enrollment_type_lookup_code == "open")
assert(SCResponse.enrollment_context.org_plan_year_id == 5043)
assert(SCResponse.enrollment_context.plan_year_ends_on == "2015/12/31")
assert(SCResponse.enrollment_context.plan_year_starts_on == "2015/01/01")
*/

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="48dd54d7-8869-483e-8cbc-e3dbd37c26fd"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d99db13f-c4c0-4c2e-aa11-6c2ad9e55834"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="488836df5735aadea55893e9dbbdc5bc"/>
  <con:entry key="participantId" value="8290799"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get ParticipantId" id="caaab4b0-2283-46c1-ae05-dc01f26da383"><con:settings/><con:config><script>import groovy.json.*

//Parse the json response from login.
def PartResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(PartResponse)
def participant = json.data
//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
log.info("json.data.participant_id")

def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Get Dependents", "participantId", participant_id)
groovyUtils.setPropertyValue("Get Benefits List", "participantId", participant_id)
groovyUtils.setPropertyValue("Get Benefit Coverage", "participantId", participant_id)
</script></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Participant details" id="8acbdd27-aa61-49ce-a0ed-75df6a852e65"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
assert(participant.address_1 == "259 Regression Way")
assert(participant.city == "King of Prussia")
assert(participant.first_name == "Married")
assert(participant.gender == "M")
assert(participant.hire_date == "2014/09/01")
assert(participant.last_name == "QARegression 4")
assert(participant.marital_status == "M")
assert(participant.organization_code == "qa_regression")
assert(participant.organization_id == 2523)
assert(participant.participant_id == 8290799)
assert(participant.ssn == "666-11-1004")
assert(participant.state == "PA")
assert(participant.zip_code == "19406")





//loginfo("participant")</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="6f970b33-1cdc-4ff1-b19f-6c0ad49c2673"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a21eb6e5-2149-4f0b-8f29-7ecbccd29e10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="488836df5735aadea55893e9dbbdc5bc"/>
  <con:entry key="participantId" value="8290799"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Dependents" id="1eaa691c-ebfb-4922-82c3-1db05523610c"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def DepResponse = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(DepResponse)

def list = Json.data.dependents.find{it.relationship_code == "spouse"}
assert(list.address_1 == "259 Regression Way")
assert(list.city == "King of Prussia")
assert(list.first_name == "Spouse4")
assert(list.gender == "F")
assert(list.birthdate == "1976/10/03")
assert(list.last_name == "QARegression 4")
assert(list.id == 1925224)
assert(list.ssn == "666-22-1001")
assert(list.state == "PA")
assert(list.zip_code == "19406")</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Benefits List" id="28fc389f-0f0f-4916-91a1-b36c257cdf11"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/8290799/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3dd559c9-e036-4319-b4bb-a8eb190abcd3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="488836df5735aadea55893e9dbbdc5bc"/>
  <con:entry key="participantId" value="8290799"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Benefits List" id="9a1200d0-139a-43b0-a749-4e060cb42a72"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def BLResponse = testRunner.testCase.testSteps["Get Benefits List"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(BLResponse)

def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "medical"}
log.info(MedicalBenlist)
assert(MedicalBenlist.display_order == 1)
assert(MedicalBenlist.org_benefit_name == "Medical")
assert(MedicalBenlist.enrollment_method == "standard")
assert(MedicalBenlist.premium_method == "tier")
assert(MedicalBenlist.annual_payday_count == 26)

def DentalBenlist = Json.data.find{it.benefit_lookup_code == "dental"}
log.info(DentalBenlist)
assert(DentalBenlist.display_order == 3)
assert(DentalBenlist.org_benefit_name == "Dental")
assert(DentalBenlist.enrollment_method == "standard")
assert(DentalBenlist.premium_method == "tier")
assert(DentalBenlist.annual_payday_count == 26)


def HcraBenlist = Json.data.find{it.benefit_lookup_code == "hcra"}
log.info(HcraBenlist)
assert(HcraBenlist.display_order == 4)
assert(HcraBenlist.org_benefit_name == "Health Care Reimbursement Account")
assert(HcraBenlist.enrollment_method == "enter_annual")
assert(HcraBenlist.premium_method == "annual_target")
assert(HcraBenlist.annual_payday_count == 26)

def VisionBenlist = Json.data.find{it.benefit_lookup_code == "vision"}
log.info(VisionBenlist)
assert(VisionBenlist.display_order == 5)
assert(VisionBenlist.org_benefit_name == "Vision")
assert(VisionBenlist.enrollment_method == "standard")
assert(VisionBenlist.premium_method == "tier")
assert(VisionBenlist.annual_payday_count == 26)


def BSLBenlist = Json.data.find{it.benefit_lookup_code == "basic_subscriber_life"}
log.info(BSLBenlist)
assert(BSLBenlist.display_order == 6)
assert(BSLBenlist.org_benefit_name == "Basic Employee Life")
assert(BSLBenlist.enrollment_method == "standard")
assert(BSLBenlist.premium_method == "tier")
assert(BSLBenlist.annual_payday_count == 26)


def SLBenlist = Json.data.find{it.benefit_lookup_code == "subscriber_life"}
log.info(SLBenlist)
assert(SLBenlist.display_order == 7)
assert(SLBenlist.org_benefit_name == "Voluntary Employee Life")
assert(SLBenlist.enrollment_method == "increments")
assert(SLBenlist.premium_method == "tier")
assert(SLBenlist.annual_payday_count == 26)


def SpouseLifeBenlist = Json.data.find{it.benefit_lookup_code == "spouse_life"}
log.info(SpouseLifeBenlist)
assert(SpouseLifeBenlist.display_order == 8)
assert(SpouseLifeBenlist.org_benefit_name == "Voluntary Spouse Life")
assert(SpouseLifeBenlist.enrollment_method == "increments")
assert(SpouseLifeBenlist.premium_method == "tier")
assert(SpouseLifeBenlist.annual_payday_count == 26)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Benefit Coverage" id="89e82389-6810-4376-b0b3-f3dc72f0eb9f"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60809/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="358e8586-450a-4626-8f00-94334065dbaa"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="488836df5735aadea55893e9dbbdc5bc"/>
  <con:entry key="benefitId" value="60814"/>
  <con:entry key="participantId" value="8290799"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Benefit Coverage" id="c2afe7fc-cd9f-40e5-a820-4237f3340e96"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["Get Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){
 //getBenefitPlans
 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )    
 //groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
 //testRunner.runTestStepByName("PUT Benefit Plans");
 
 //Parse the json response from Benefit Plans.
 //def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
// def plansJson = new JsonSlurper().parseText(plansResponse)

 //getBenefitCoverage
 groovyUtils.setPropertyValue("Get Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
 testRunner.runTestStepByName("Get Benefit Coverage");
 
 //Parse the json response from GET Benefit Coverage.
 def getCoverageResponse = testRunner.testCase.testSteps["Get Benefit Coverage"].testRequest.response.contentAsString
 def coverageJson = new JsonSlurper().parseText(getCoverageResponse)





//Below variable used for both HSA &amp; EOI check
 def coverageData = coverageJson.data
 
 //Verify No HSA in "Medical" plan
 if(benefit.org_benefit_name== "Medical"){
 log.info("benefit.org_benefit_name::"+benefit.org_benefit_name)                
 log.info("coverageData.org_plan_name::"+coverageData.org_plan_name)
 assert(coverageData.org_plan_name !="%HSA%")
 }

//Checking for No EOI Requried
 assert(coverageData.waiting_for_eoi == false)
 log.info("coverageData.waiting_for_eoi::"+coverageData.waiting_for_eoi)


 if(benefit.benefit_lookup_code == "medical"){
  log.info("coverageJson ="+coverageJson)
  assert(coverageJson.data.coverage_level_name == "Employee + Spouse")
      assert(coverageJson.data.coverage_level_id == 10)
       assert(coverageJson.data.org_plan_name == "PPO Plan")
     assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183968)
    assert(coverageJson.data.waiting_for_eoi == false)
     assert(coverageJson.data.coverage_level_lookup_code == "EE+Spouse")
 }

if(benefit.benefit_lookup_code == "dental"){
  log.info("coverageJson ="+coverageJson)
  assert(coverageJson.data.coverage_level_name == "Employee + Spouse")
      assert(coverageJson.data.coverage_level_id == 10)
       assert(coverageJson.data.org_plan_name == "Delta PPO")
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183970)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "EE+Spouse")
 }


if(benefit.benefit_lookup_code == "hcra"){
  log.info("coverageJson ="+coverageJson)
     assert(coverageJson.data.coverage_level_name == "Enrolled")
     assert(coverageJson.data.coverage_level_id == 18)
     assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183965)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
}

if(benefit.benefit_lookup_code == "vision"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Employee + Spouse")
      assert(coverageJson.data.coverage_level_id == 10)
      assert(coverageJson.data.org_plan_name == "Vision Care ")
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183971)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "EE+Spouse")
 }


if(benefit.benefit_lookup_code == "basic_subscriber_life"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Enrolled")
      assert(coverageJson.data.coverage_level_id == 18)
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183972)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")


def beneficiaries = coverageJson.data.beneficiaries
  assert(beneficiaries != null )
  for(beneficiary in beneficiaries){
   //def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
   assert(beneficiary != null)
   log.info("beneficiary.primary_beneficiary="+beneficiary.primary_beneficiary)
  //assert(beneficiary.primary_beneficiary == true)
   log.info("beneficiary ="+ beneficiary)
   assert(beneficiary.allocation == "50.0")
  }


    
 }

if(benefit.benefit_lookup_code == "subscriber_life"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Enrolled")
      assert(coverageJson.data.coverage_level_id == 18)
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183959)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")

 }

if(benefit.benefit_lookup_code == "spouse_life"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Enrolled")
      assert(coverageJson.data.coverage_level_id == 18)
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183961)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
 }
 
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Session Token" id="a3df9e77-aecf-47c0-ab31-d0385b2a4bb1"><con:settings/><con:config service="MMA MarketLink API" methodName="put" resourcePath="/api/session" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Session Token" mediaType="application/json" postQueryString="false" id="4cc046d4-e695-4276-afae-24f234032e8f"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="030e5d12-5c90-4a05-97a5-fdb1bc51f505"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="488836df5735aadea55893e9dbbdc5bc" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:loadTest name="First Load Test" id="8f2fa9a0-9b08-4de5-8869-ef90fde701a0"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:reportParameters/></con:loadTest><con:properties/><con:reportParameters/><con:securityTest name="First Security Test" failOnError="true" id="f844daf7-77fa-40e6-a677-86e33e389267"><con:settings/><con:properties/><con:reportParameters/></con:securityTest></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Married With Spouse 2" searchProperties="true" id="9dac7b3e-9805-4dc3-a51d-65ca29cd3dc2"><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="6fb6857d-bf2b-4d4b-b59c-710267803ebb"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
   "username": "QAMarried2",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="72c66d05-9e88-4639-a661-e2c8b1d19e53"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get MMAToken" id="a6cb08c1-6a8f-402a-90a7-4bc7e5d5e499"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Session Token", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="groovy" name="Assertions:MAA Token" id="146902b0-dcd7-43ce-b305-5d55802cd93b"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

def MMATokenResponse= json.data
assert(MMATokenResponse.expires != null)
assert(MMATokenResponse.mmatoken != null)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="23bfc82e-e123-44a0-ad7f-6e9fef31484b"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="97529a14-74a5-4caa-9e4d-4a09ac6a4a78"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="e5b2efea01e2d996a52defa76cd99cc9" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Session Context" id="e6702c76-a218-47d7-ac2b-8c9cc27587c5"><con:settings/><con:config><script>import groovy.json.*

//Parse the json response from login.
def SessionResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(SessionResponse)

def SCResponse= json.data
//Set Participant Id to Get Participant request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Participant", "participantId", SCResponse.participant_id.toString())
/*
assert(SCResponse.organization_id == 2523)
assert(SCResponse.participant_id == 8290800)
assert(SCResponse.enrollment_context.enrollment_ends_on == "2014/12/01")
assert(SCResponse.enrollment_context.enrollment_starts_on == "2014/10/15")
assert(SCResponse.enrollment_context.enrollment_type_lookup_code == "open")
assert(SCResponse.enrollment_context.org_plan_year_id == 5043)
assert(SCResponse.enrollment_context.plan_year_ends_on == "2015/12/31")
assert(SCResponse.enrollment_context.plan_year_starts_on == "2015/01/01")
*/

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="eebe43d2-7d62-4ef7-87e0-e2069c451962"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="cd8f8c47-49d1-4218-b664-21066a5b42ed"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="e5b2efea01e2d996a52defa76cd99cc9"/>
  <con:entry key="participantId" value="8290800"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get ParticipantId" id="372fc8d5-5f7c-49c8-bd42-1006ce91f968"><con:settings/><con:config><script>import groovy.json.*

//Parse the json response from login.
def PartResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(PartResponse)
def participant = json.data
//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
log.info("json.data.participant_id")

def participant_id = participant.participant_id.toString() ?: "0"

groovyUtils.setPropertyValue("Get Dependents", "participantId", participant_id)
groovyUtils.setPropertyValue("Get Benefits List", "participantId", participant_id)
groovyUtils.setPropertyValue("Get Benefit Coverage", "participantId", participant_id)
</script></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Participant details" id="8c371fd3-3a4d-4188-b51d-2e66b4006aec"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
assert(participant.address_1 == "260 Regression Way")
assert(participant.city == "King of Prussia")
assert(participant.first_name == "Married")
assert(participant.gender == "F")
assert(participant.hire_date == "2014/09/02")
assert(participant.last_name == "QARegression 5")
assert(participant.marital_status == "M")
assert(participant.organization_code == "qa_regression")
assert(participant.organization_id == 2523)
assert(participant.participant_id == 8290800)
assert(participant.ssn == "666-11-1005")
assert(participant.state == "PA")
assert(participant.zip_code == "19406")





//loginfo("participant")</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="7f43415f-a192-4a83-86b3-261968a702a5"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="2d433a36-51cb-4947-9fbd-2848513e5655"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="e5b2efea01e2d996a52defa76cd99cc9"/>
  <con:entry key="participantId" value="8290800"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Dependents" id="b16fd3dc-0364-423f-a002-9a0c60756042"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def DepResponse = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(DepResponse)

def list = Json.data.dependents.find{it.relationship_code == "spouse"}
assert(list.address_1 == "260 Regression Way")
assert(list.city == "King of Prussia")
assert(list.first_name == "Spouse5")
assert(list.gender == "M")
assert(list.birthdate == "1976/10/04")
assert(list.last_name == "QARegression 5")
assert(list.ssn == "666-22-1002")
assert(list.state == "PA")
assert(list.zip_code == "19406")</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Benefits List" id="e9dad2f7-aa41-4f58-949b-a213a78b2f49"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/8290799/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="0c3ba375-b6e0-4a97-a35c-8fb1c3f0c0a9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="e5b2efea01e2d996a52defa76cd99cc9"/>
  <con:entry key="participantId" value="8290800"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Benefits List" id="8bbff20c-cd23-43d5-bb51-3aee0aef5bc7"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def BLResponse = testRunner.testCase.testSteps["Get Benefits List"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(BLResponse)

def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "medical"}
log.info(MedicalBenlist)
assert(MedicalBenlist.display_order == 1)
assert(MedicalBenlist.org_benefit_name == "Medical")
assert(MedicalBenlist.enrollment_method == "standard")
assert(MedicalBenlist.premium_method == "tier")
assert(MedicalBenlist.annual_payday_count == 26)

def DentalBenlist = Json.data.find{it.benefit_lookup_code == "dental"}
log.info(DentalBenlist)
assert(DentalBenlist.display_order == 3)
assert(DentalBenlist.org_benefit_name == "Dental")
assert(DentalBenlist.enrollment_method == "standard")
assert(DentalBenlist.premium_method == "tier")
assert(DentalBenlist.annual_payday_count == 26)


def HcraBenlist = Json.data.find{it.benefit_lookup_code == "hcra"}
log.info(HcraBenlist)
assert(HcraBenlist.display_order == 4)
assert(HcraBenlist.org_benefit_name == "Health Care Reimbursement Account")
assert(HcraBenlist.enrollment_method == "enter_annual")
assert(HcraBenlist.premium_method == "annual_target")
assert(HcraBenlist.annual_payday_count == 26)

def VisionBenlist = Json.data.find{it.benefit_lookup_code == "vision"}
log.info(VisionBenlist)
assert(VisionBenlist.display_order == 5)
assert(VisionBenlist.org_benefit_name == "Vision")
assert(VisionBenlist.enrollment_method == "standard")
assert(VisionBenlist.premium_method == "tier")
assert(VisionBenlist.annual_payday_count == 26)


def BSLBenlist = Json.data.find{it.benefit_lookup_code == "basic_subscriber_life"}
log.info(BSLBenlist)
assert(BSLBenlist.display_order == 6)
assert(BSLBenlist.org_benefit_name == "Basic Employee Life")
assert(BSLBenlist.enrollment_method == "standard")
assert(BSLBenlist.premium_method == "tier")
assert(BSLBenlist.annual_payday_count == 26)


def SLBenlist = Json.data.find{it.benefit_lookup_code == "subscriber_life"}
log.info(SLBenlist)
assert(SLBenlist.display_order == 7)
assert(SLBenlist.org_benefit_name == "Voluntary Employee Life")
assert(SLBenlist.enrollment_method == "increments")
assert(SLBenlist.premium_method == "tier")
assert(SLBenlist.annual_payday_count == 26)


def SpouseLifeBenlist = Json.data.find{it.benefit_lookup_code == "spouse_life"}
log.info(SpouseLifeBenlist)
assert(SpouseLifeBenlist.display_order == 8)
assert(SpouseLifeBenlist.org_benefit_name == "Voluntary Spouse Life")
assert(SpouseLifeBenlist.enrollment_method == "increments")
assert(SpouseLifeBenlist.premium_method == "tier")
assert(SpouseLifeBenlist.annual_payday_count == 26)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Benefit Coverage" id="4bc70bce-8f69-4225-8cbc-873c829ee153"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60809/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="7eaca2f0-45ae-4813-aa2c-69444928b4d8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="e5b2efea01e2d996a52defa76cd99cc9"/>
  <con:entry key="benefitId" value="60814"/>
  <con:entry key="participantId" value="8290800"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Benefit Coverage" id="04d140e1-cc44-4374-bf64-679bafb39f8d"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["Get Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){
 //getBenefitPlans
 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )    
 //groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
 //testRunner.runTestStepByName("PUT Benefit Plans");
 
 //Parse the json response from Benefit Plans.
 //def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
// def plansJson = new JsonSlurper().parseText(plansResponse)

 //getBenefitCoverage
 groovyUtils.setPropertyValue("Get Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
 testRunner.runTestStepByName("Get Benefit Coverage");
 
 //Parse the json response from GET Benefit Coverage.
 def getCoverageResponse = testRunner.testCase.testSteps["Get Benefit Coverage"].testRequest.response.contentAsString
 def coverageJson = new JsonSlurper().parseText(getCoverageResponse)





//Below variable used for both HSA &amp; EOI check
 def coverageData = coverageJson.data
 
 //Verify No HSA in "Medical" plan
 if(benefit.org_benefit_name== "Medical"){
 log.info("benefit.org_benefit_name::"+benefit.org_benefit_name)                
 log.info("coverageData.org_plan_name::"+coverageData.org_plan_name)
 assert(coverageData.org_plan_name !="%HSA%")
 }


 if(benefit.benefit_lookup_code == "medical"){
  log.info("coverageJson ="+coverageJson)
  assert(coverageJson.data.coverage_level_name == "Employee + Spouse")
      assert(coverageJson.data.coverage_level_id == 10)
       assert(coverageJson.data.org_plan_name == "HSA Eligible")
     assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183969)
    assert(coverageJson.data.waiting_for_eoi == false)
     assert(coverageJson.data.coverage_level_lookup_code == "EE+Spouse")
 }

if(benefit.benefit_lookup_code == "dental"){
  log.info("coverageJson ="+coverageJson)
  assert(coverageJson.data.coverage_level_name == "Employee + Spouse")
      assert(coverageJson.data.coverage_level_id == 10)
       assert(coverageJson.data.org_plan_name == "Delta PPO")
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183970)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "EE+Spouse")
 }


if(benefit.benefit_lookup_code == "hcra"){
  log.info("coverageJson ="+coverageJson)
     assert(coverageJson.data.coverage_level_name == "Enrolled")
     assert(coverageJson.data.coverage_level_id == 18)
     assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183965)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
}

if(benefit.benefit_lookup_code == "vision"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Employee + Spouse")
      assert(coverageJson.data.coverage_level_id == 10)
      assert(coverageJson.data.org_plan_name == "Vision Care ")
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183971)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "EE+Spouse")
 }


if(benefit.benefit_lookup_code == "basic_subscriber_life"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Enrolled")
      assert(coverageJson.data.coverage_level_id == 18)
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183972)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
    
 
def beneficiaries = coverageJson.data.beneficiaries
  assert(beneficiaries != null )
  for(beneficiary in beneficiaries){
   //def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
   assert(beneficiary != null)
   log.info("beneficiary.primary_beneficiary="+beneficiary.primary_beneficiary)
  //assert(beneficiary.primary_beneficiary == true)
   log.info("beneficiary ="+ beneficiary)
   assert(beneficiary.allocation == "100.0")
  }


    
 }

if(benefit.benefit_lookup_code == "subscriber_life"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Enrolled")
      assert(coverageJson.data.coverage_level_id == 18)
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183959)
     assert(coverageJson.data.waiting_for_eoi == true)
    assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")

 }

if(benefit.benefit_lookup_code == "spouse_life"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Enrolled")
      assert(coverageJson.data.coverage_level_id == 18)
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183961)
     assert(coverageJson.data.waiting_for_eoi == true)
    assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")

  }
 
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Session Token" id="984ee443-5c34-442d-83ae-408734bdf6d0"><con:settings/><con:config service="MMA MarketLink API" methodName="put" resourcePath="/api/session" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Session Token" mediaType="application/json" postQueryString="false" id="b82b4852-d75b-4d2a-badc-f5bcce57ba25"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f857f7df-74fc-4051-a0ea-ba9802ebefa9"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="e5b2efea01e2d996a52defa76cd99cc9" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Married With Spouse 3" searchProperties="true" id="65dedb04-236a-4379-b16c-98aa26b8ccd2"><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="aaac63c4-c6f0-4ff7-8e2f-3f1133bec9d8"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
   "username": "QAMarried3",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3605f397-1620-4037-b3fc-f54e68d651fa"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get MMAToken" id="32203127-6766-4f81-ac76-0bc9595abb3c"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Session Token", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="groovy" name="Assertions:MAA Token" id="fb0cc30e-6cd7-42d0-be78-276815ee3afb"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

def MMATokenResponse= json.data
assert(MMATokenResponse.expires != null)
assert(MMATokenResponse.mmatoken != null)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="3805fb76-47a1-45fd-96bf-588466ca7ec4"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f27bde74-5991-4940-a767-a5912d532fac"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="a8ecf906c1a0cc5df8410d918e4feac3" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Session Context" id="88f1dab8-1bde-49d8-af71-e20c68bd0e4d"><con:settings/><con:config><script>import groovy.json.*

//Parse the json response from login.
def SessionResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(SessionResponse)

def SCResponse= json.data
//Set Participant Id to Get Participant request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Participant", "participantId", SCResponse.participant_id.toString())

/*
assert(SCResponse.organization_id == 2523)
assert(SCResponse.participant_id == 8290801)
assert(SCResponse.enrollment_context.enrollment_ends_on == "2014/12/01")
assert(SCResponse.enrollment_context.enrollment_starts_on == "2014/10/15")
assert(SCResponse.enrollment_context.enrollment_type_lookup_code == "open")
assert(SCResponse.enrollment_context.org_plan_year_id == 5043)
assert(SCResponse.enrollment_context.plan_year_ends_on == "2015/12/31")
assert(SCResponse.enrollment_context.plan_year_starts_on == "2015/01/01")

*/
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="0d09756b-1c51-40f7-b565-c9fe128190da"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b4b8d723-21c4-41c2-aaf4-4f62c3f52ceb"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8ecf906c1a0cc5df8410d918e4feac3"/>
  <con:entry key="participantId" value="8290801"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get ParticipantId" id="77c04a86-bb97-47b0-b461-e2e5d54ce869"><con:settings/><con:config><script>import groovy.json.*

//Parse the json response from login.
def PartResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(PartResponse)
def participant = json.data
//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
log.info("json.data.participant_id")

def participant_id = participant.participant_id.toString() ?: "0"

groovyUtils.setPropertyValue("Get Dependents", "participantId", participant_id)
groovyUtils.setPropertyValue("Get Benefits List", "participantId", participant_id)
groovyUtils.setPropertyValue("Get Benefit Coverage", "participantId", participant_id)
</script></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Participant details" id="73a407cd-3e49-4a63-bafc-68c77eb84845"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
assert(participant.address_1 == "261 Regression Way")
assert(participant.city == "King of Prussia")
assert(participant.first_name == "Married")
assert(participant.gender == "M")
assert(participant.hire_date == "2014/09/03")
assert(participant.last_name == "QARegression 6")
assert(participant.marital_status == "M")
assert(participant.organization_code == "qa_regression")
assert(participant.organization_id == 2523)
assert(participant.participant_id == 8290801)
assert(participant.ssn == "666-11-1006")
assert(participant.state == "PA")
assert(participant.zip_code == "19406")





//loginfo("participant")</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="6562a4ef-e1c2-447c-ba47-4a9b9a74655e"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="1a439370-7152-44c4-9a7f-34bd27bc7de8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8ecf906c1a0cc5df8410d918e4feac3"/>
  <con:entry key="participantId" value="8290801"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Dependents" id="f2788a37-fe38-46c2-9c4e-f226b0c24f45"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def DepResponse = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(DepResponse)

def list = Json.data.dependents.find{it.relationship_code == "spouse"}
assert(list.address_1 == "261 Regression Way")
assert(list.city == "King of Prussia")
assert(list.first_name == "Spouse6")
assert(list.gender == "F")
assert(list.birthdate == "1976/10/05")
assert(list.last_name == "QARegression 6")
assert(list.ssn == "666-22-1003")
assert(list.state == "PA")
assert(list.zip_code == "19406")</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Benefits List" id="a70f756b-8789-4207-bff7-53bc0e08efbe"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/8290799/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="e6ecde8d-faf4-4c08-bc49-2dc771bacf4f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8ecf906c1a0cc5df8410d918e4feac3"/>
  <con:entry key="participantId" value="8290801"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Benefits List" id="f96e64a1-1ccb-4f20-8282-353e0f3fad1a"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def BLResponse = testRunner.testCase.testSteps["Get Benefits List"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(BLResponse)

def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "medical"}
log.info(MedicalBenlist)
assert(MedicalBenlist.display_order == 1)
assert(MedicalBenlist.org_benefit_name == "Medical")
assert(MedicalBenlist.enrollment_method == "standard")
assert(MedicalBenlist.premium_method == "tier")
assert(MedicalBenlist.annual_payday_count == 26)

def DentalBenlist = Json.data.find{it.benefit_lookup_code == "dental"}
log.info(DentalBenlist)
assert(DentalBenlist.display_order == 3)
assert(DentalBenlist.org_benefit_name == "Dental")
assert(DentalBenlist.enrollment_method == "standard")
assert(DentalBenlist.premium_method == "tier")
assert(DentalBenlist.annual_payday_count == 26)


def HcraBenlist = Json.data.find{it.benefit_lookup_code == "hcra"}
log.info(HcraBenlist)
assert(HcraBenlist.display_order == 4)
assert(HcraBenlist.org_benefit_name == "Health Care Reimbursement Account")
assert(HcraBenlist.enrollment_method == "enter_annual")
assert(HcraBenlist.premium_method == "annual_target")
assert(HcraBenlist.annual_payday_count == 26)

def VisionBenlist = Json.data.find{it.benefit_lookup_code == "vision"}
log.info(VisionBenlist)
assert(VisionBenlist.display_order == 5)
assert(VisionBenlist.org_benefit_name == "Vision")
assert(VisionBenlist.enrollment_method == "standard")
assert(VisionBenlist.premium_method == "tier")
assert(VisionBenlist.annual_payday_count == 26)


def BSLBenlist = Json.data.find{it.benefit_lookup_code == "basic_subscriber_life"}
log.info(BSLBenlist)
assert(BSLBenlist.display_order == 6)
assert(BSLBenlist.org_benefit_name == "Basic Employee Life")
assert(BSLBenlist.enrollment_method == "standard")
assert(BSLBenlist.premium_method == "tier")
assert(BSLBenlist.annual_payday_count == 26)


def SLBenlist = Json.data.find{it.benefit_lookup_code == "subscriber_life"}
log.info(SLBenlist)
assert(SLBenlist.display_order == 7)
assert(SLBenlist.org_benefit_name == "Voluntary Employee Life")
assert(SLBenlist.enrollment_method == "increments")
assert(SLBenlist.premium_method == "tier")
assert(SLBenlist.annual_payday_count == 26)


def SpouseLifeBenlist = Json.data.find{it.benefit_lookup_code == "spouse_life"}
log.info(SpouseLifeBenlist)
assert(SpouseLifeBenlist.display_order == 8)
assert(SpouseLifeBenlist.org_benefit_name == "Voluntary Spouse Life")
assert(SpouseLifeBenlist.enrollment_method == "increments")
assert(SpouseLifeBenlist.premium_method == "tier")
assert(SpouseLifeBenlist.annual_payday_count == 26)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Benefit Coverage" id="a8b198fb-6325-4fd8-aa64-3b2867b3641c"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60809/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c1462d1f-2c39-49fc-9b69-9f6b9b316a9a"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a8ecf906c1a0cc5df8410d918e4feac3"/>
  <con:entry key="benefitId" value="60814"/>
  <con:entry key="participantId" value="8290801"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Benefit Coverage" id="c32aecf7-cd99-45b0-84ab-c8542fc08a5f"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["Get Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){
 //getBenefitPlans
 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )    
 //groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
 //testRunner.runTestStepByName("PUT Benefit Plans");
 
 //Parse the json response from Benefit Plans.
 //def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
// def plansJson = new JsonSlurper().parseText(plansResponse)

 //getBenefitCoverage
 groovyUtils.setPropertyValue("Get Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
 testRunner.runTestStepByName("Get Benefit Coverage");
 
 //Parse the json response from GET Benefit Coverage.
 def getCoverageResponse = testRunner.testCase.testSteps["Get Benefit Coverage"].testRequest.response.contentAsString
 def coverageJson = new JsonSlurper().parseText(getCoverageResponse)





//Below variable used for both HSA &amp; EOI check
 def coverageData = coverageJson.data
 
 //Verify No HSA in "Medical" plan
 if(benefit.org_benefit_name== "Medical"){
 log.info("benefit.org_benefit_name::"+benefit.org_benefit_name)                
 log.info("coverageData.org_plan_name::"+coverageData.org_plan_name)
 assert(coverageData.org_plan_name !="%HSA%")
 }


 if(benefit.benefit_lookup_code == "medical"){
  log.info("coverageJson ="+coverageJson)
  assert(coverageJson.data.coverage_level_name == "Decline")
      assert(coverageJson.data.coverage_level_id == 19)
       assert(coverageJson.data.org_plan_name == "Decline")
     assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183954)
    assert(coverageJson.data.waiting_for_eoi == false)
     assert(coverageJson.data.coverage_level_lookup_code == "decline")
 }

if(benefit.benefit_lookup_code == "dental"){
  log.info("coverageJson ="+coverageJson)
  assert(coverageJson.data.coverage_level_name == "Decline")
      assert(coverageJson.data.coverage_level_id == 19)
       assert(coverageJson.data.org_plan_name == "Decline")
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183955)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "decline")
 }


if(benefit.benefit_lookup_code == "hcra"){
  log.info("coverageJson ="+coverageJson)
     assert(coverageJson.data.coverage_level_name == "Decline")
     assert(coverageJson.data.coverage_level_id == 19)
     assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183964)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "decline")
}

if(benefit.benefit_lookup_code == "vision"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Decline")
      assert(coverageJson.data.coverage_level_id == 19)
      assert(coverageJson.data.org_plan_name == "Decline")
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183956)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "decline")
 }


if(benefit.benefit_lookup_code == "basic_subscriber_life"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Enrolled")
      assert(coverageJson.data.coverage_level_id == 18)
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183972)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
    
 
def beneficiaries = coverageJson.data.beneficiaries
  assert(beneficiaries != null )
  for(beneficiary in beneficiaries){
   //def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
   assert(beneficiary != null)
   log.info("beneficiary.primary_beneficiary="+beneficiary.primary_beneficiary)
  //assert(beneficiary.primary_beneficiary == true)
   log.info("beneficiary ="+ beneficiary)
   assert(beneficiary.allocation == "100.0")
  }


    
 }

if(benefit.benefit_lookup_code == "subscriber_life"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Decline")
      assert(coverageJson.data.coverage_level_id == 19)
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183958)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "decline")

 }

if(benefit.benefit_lookup_code == "spouse_life"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Decline")
      assert(coverageJson.data.coverage_level_id == 19)
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183960)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "decline")

  }
 
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Session Token" id="6d1c6f23-839e-4674-840a-b6238a9f8d03"><con:settings/><con:config service="MMA MarketLink API" methodName="put" resourcePath="/api/session" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Session Token" mediaType="application/json" postQueryString="false" id="8ef98438-909d-431f-8199-59cde0a23e9d"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c378853b-64ec-4e16-81ca-56a5a0832367"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="a8ecf906c1a0cc5df8410d918e4feac3" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Employee with Family" searchProperties="true" id="4168360c-1a14-4c00-9e8b-9f094afcc6be"><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="e7b7900b-c4f0-4789-a4bc-9845e3c5cb88"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "QAFamily1",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="46124639-1eae-4ac7-9ce6-615cbe98a171"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="70322048-10bd-4050-95d7-9448352672c2"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Session Token", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="2e49488e-88f4-47f1-94bb-11b9381b6b76"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="33442381-c30a-42ae-bbf9-9020ae2cd3e4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="8ea7d4162f0b5d9d083a9ac48c1952c5" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Get Sesion Context" id="9d2128a0-1308-43d2-8a81-dab5ddee0eca"><con:settings/><con:config><script>import groovy.json.*

//Parse the json response from login.
def SessionResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(SessionResponse)

def SCResponse= json.data
//Set Participant Id to Get Participant request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Participant", "participantId", SCResponse.participant_id.toString())
log.info(SCResponse.participant_id)

/*
assert(SCResponse.organization_id == 2523)
assert(SCResponse.participant_id == 8290801)
assert(SCResponse.enrollment_context.enrollment_ends_on == "2014/12/01")
assert(SCResponse.enrollment_context.enrollment_starts_on == "2014/10/15")
assert(SCResponse.enrollment_context.enrollment_type_lookup_code == "open")
assert(SCResponse.enrollment_context.org_plan_year_id == 5043)
assert(SCResponse.enrollment_context.plan_year_ends_on == "2015/12/31")
assert(SCResponse.enrollment_context.plan_year_starts_on == "2015/01/01")

*/
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="57f23aa8-9266-4176-bdae-312593265125"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="725a376f-6134-4442-8faa-a09fdda9fe8f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="8ea7d4162f0b5d9d083a9ac48c1952c5"/>
  <con:entry key="participantId" value="8290802"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Participant Data" id="24d9ac80-720c-4cb4-a57d-b6248f5ddb66"><con:settings/><con:config><script>import groovy.json.* 

def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data
assert(participant != null)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="73725321-ff2a-470c-9e02-7931a44a231d"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d14b0cea-fa38-4726-ba53-a225c9db899a"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="8ea7d4162f0b5d9d083a9ac48c1952c5"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Dependent Data" id="418ce7e8-caf0-4077-8699-7aef652f5aa3"><con:settings/><con:config><script>import groovy.json.* 

def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

assert(json.data.dependents != null)

for(dependent in json.data.dependents){
	log.info("dependent.ssn::"+dependent.ssn)
	
	if(dependent.ssn == "666-22-1012"){

		assert(dependent.first_name == "Secondchild7")
		assert(dependent.lives_at_home == true)
		assert(dependent.zip_code == "19406")
		assert(dependent.relationship_code == "child")
		assert(dependent.coveragestatus == "active")
		assert(dependent.birthdate == "2010/08/10")
		assert(dependent.last_name == "QARegression 7")
		assert(dependent.state == "PA")
		assert(dependent.gender == "M")
		assert(dependent.address_1 == "262 Regression Way")
		assert(dependent.city == "King of Prussia")
		
	}else if(dependent.ssn == "666-22-1008"){
		
		assert(dependent.first_name == "Child7")
		assert(dependent.lives_at_home == true)
		assert(dependent.zip_code == "19406")
		assert(dependent.relationship_code == "child")
		assert(dependent.coveragestatus == "active")
		assert(dependent.birthdate == "2000/03/05")
		assert(dependent.last_name == "QARegression 7")
		assert(dependent.state == "PA")
		assert(dependent.gender == "M")
		assert(dependent.address_1 == "262 Regression Way")
		assert(dependent.city == "King of Prussia")
		
	}else if(dependent.ssn == "666-22-1004"){
		
		assert(dependent.first_name == "Spouse7")
		assert(dependent.lives_at_home == true)
		assert(dependent.zip_code == "19406")
		assert(dependent.relationship_code == "spouse")
		assert(dependent.coveragestatus == "active")
		assert(dependent.birthdate == "1976/10/06")
		assert(dependent.last_name == "QARegression 7")
		assert(dependent.state == "PA")
		assert(dependent.gender == "F")
		assert(dependent.address_1 == "262 Regression Way")
		assert(dependent.city == "King of Prussia")
	}
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="232a7c5f-edd5-45e2-812c-89efc2142806"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="12f175d8-c489-41d3-b0a9-7c673f6fab59"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="8ea7d4162f0b5d9d083a9ac48c1952c5"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="d7659f4c-d04e-4a8f-a144-6440a84978f5"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="2fe60465-c502-4568-b336-89316d1be74d"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c1260cd3-2a02-4998-b933-1a39c7a7e257"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="8ea7d4162f0b5d9d083a9ac48c1952c5"/>
  <con:entry key="benefitId" value="60809"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="c5e620f2-b35a-45cf-8307-9cbda45c4e53"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="007d777c-0d3d-4dff-9d9a-4eb6c3623628"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="5ed0ff37-df30-4c5d-9f87-50b8b10d0f4f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="8ea7d4162f0b5d9d083a9ac48c1952c5"/>
  <con:entry key="benefitId" value="60815"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="9e2bd05e-8b29-4e28-bbf6-460eb03d8e51"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="0b7e094b-32d8-41f1-872c-226de4c25d9a"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="631381fa-80a9-4e07-9328-1b5c753e7aa1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="16307a63-e55d-4cc3-bd0f-eff2108e23bc"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="8ea7d4162f0b5d9d083a9ac48c1952c5"/>
  <con:entry key="benefitId" value="60816"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Coverage and Benefit Details" id="ef7f3fa7-c6df-4f05-8c34-d1e70248cfdf"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

//Retrieve each Benefit data
for( benefit in benefitsJson.data ){
	//Verify NO EOI
	log.info("NO EOI - benefit.org_benefit_name::"+benefit.org_benefit_name)

	//Set benefit id for GET Benefit Coverage requests.
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");

	//Parse the json response from GET Benefits Coverage.
	def coverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(coverageResponse)
	
	def coverageData = coverageJson.data
	
	assert(coverageData.waiting_for_eoi == false)
	log.info("coverageData.waiting_for_eoi::"+coverageData.waiting_for_eoi)

	//Select all - Verify Whether, otherthan Waive coverage is selected for all the benefit plans
	log.info("coverageData.coverage_level_name::"+coverageData.coverage_level_name)
	assert(coverageData.coverage_level_name != "Decline")
	
	//Verify No HSA in "Medical" plan
	if(benefit.benefit_lookup_code == "medical"){
		log.info("benefit.org_benefit_name::"+benefit.org_benefit_name)
		
		log.info("coverageData.org_plan_name::"+coverageData.org_plan_name)
		assert(coverageData.org_plan_name !="%HSA%")
			
	}

	//Verify Primary Beneficiary allocation is 100% or not
	if(benefit.beneficiary_required==true){

		log.info("benefit id="+benefit.org_benefit_id)
				
		if(benefit.beneficiary_required==true &amp;&amp; coverageData.coverage_level_name != "Decline"){
			def primaryBeneficiary = coverageData.beneficiaries.find {it.primary_beneficiary == true}

			log.info("primaryBeneficiary.allocation="+primaryBeneficiary.allocation)
			assert(primaryBeneficiary.allocation == "100.0")
						
		}
	}

	// Verify all the benfits data
	if(benefit.benefit_lookup_code == "medical"){
		log.info("benefit ="+benefit)
		assert(benefit.enrollment_method == "standard")
		assert(benefit.org_benefit_name == "Medical")
		assert(benefit.hide_cost_if_empty == false)
		assert(benefit.hide_if_terminated == false)
		assert(benefit.dependents_allowed == true)
		assert(benefit.allowed_dependent_relationships == null)
		assert(benefit.active_enrollment_required == false)
		assert(benefit.hide_cost_on_confirm == false)
		assert(benefit.display_order == 1)
		assert(benefit.allowed_dependent_ids == null)
		assert(benefit.benefit_class == "tier")
		assert(benefit.hide_volume_on_confirm == false)
		assert(benefit.premium_method == "tier")
		assert(benefit.beneficiary_required == false)
		
 	}else if(benefit.benefit_lookup_code == "dental"){
		log.info("benefit ="+benefit)
		assert(benefit.enrollment_method == "standard")
		assert(benefit.org_benefit_name == "Dental")
		assert(benefit.hide_cost_if_empty == null)
		assert(benefit.hide_if_terminated == false)
		assert(benefit.dependents_allowed == true)
		assert(benefit.allowed_dependent_relationships == null)
		assert(benefit.active_enrollment_required == false)
		assert(benefit.hide_cost_on_confirm == false)
		assert(benefit.display_order == 3)
		assert(benefit.allowed_dependent_ids == null)
		assert(benefit.benefit_class == "tier")
		assert(benefit.hide_volume_on_confirm == false)
		assert(benefit.premium_method == "tier")
		assert(benefit.beneficiary_required == false)
		
 	}else if(benefit.benefit_lookup_code == "hcra"){
		log.info("benefit ="+benefit)
		assert(benefit.enrollment_method == "enter_annual")
		assert(benefit.org_benefit_name == "Health Care Reimbursement Account")
		assert(benefit.hide_cost_if_empty == null)
		assert(benefit.hide_if_terminated == false)
		assert(benefit.dependents_allowed == false)
		assert(benefit.allowed_dependent_relationships == null)
		assert(benefit.active_enrollment_required == false)
		assert(benefit.hide_cost_on_confirm == false)
		assert(benefit.display_order == 4)
		assert(benefit.allowed_dependent_ids == null)
		assert(benefit.benefit_class == "contribution")
		assert(benefit.hide_volume_on_confirm == false)
		assert(benefit.premium_method == "annual_target")
		assert(benefit.beneficiary_required == false)
		
 	}else if(benefit.benefit_lookup_code == "vision"){
		log.info("benefit ="+benefit)
		assert(benefit.enrollment_method == "standard")
		assert(benefit.org_benefit_name == "Vision")
		assert(benefit.hide_cost_if_empty == null)
		assert(benefit.hide_if_terminated == false)
		assert(benefit.dependents_allowed == true)
		assert(benefit.allowed_dependent_relationships == null)
		assert(benefit.active_enrollment_required == false)
		assert(benefit.hide_cost_on_confirm == false)
		assert(benefit.display_order == 5)
		assert(benefit.allowed_dependent_ids == null)
		assert(benefit.benefit_class == "tier")
		assert(benefit.hide_volume_on_confirm == false)
		assert(benefit.premium_method == "tier")
		assert(benefit.beneficiary_required == false)
		
 	}else if(benefit.benefit_lookup_code == "basic_subscriber_life"){
		log.info("benefit ="+benefit)
		assert(benefit.enrollment_method == "standard")
		assert(benefit.org_benefit_name == "Basic Employee Life")
		assert(benefit.hide_cost_if_empty == null)
		assert(benefit.hide_if_terminated == false)
		assert(benefit.dependents_allowed == false)
		assert(benefit.allowed_dependent_relationships == null)
		assert(benefit.active_enrollment_required == false)
		assert(benefit.hide_cost_on_confirm == false)
		assert(benefit.display_order == 6)
		assert(benefit.allowed_dependent_ids == null)
		assert(benefit.benefit_class == "volume")
		assert(benefit.hide_volume_on_confirm == false)
		assert(benefit.premium_method == "tier")
		assert(benefit.beneficiary_required == true)
		
 	}else if(benefit.benefit_lookup_code == "subscriber_life"){
		log.info("benefit ="+benefit)
		assert(benefit.enrollment_method == "increments")
		assert(benefit.org_benefit_name == "Voluntary Employee Life")
		assert(benefit.hide_cost_if_empty == null)
		assert(benefit.hide_if_terminated == false)
		assert(benefit.dependents_allowed == false)
		assert(benefit.allowed_dependent_relationships == null)
		assert(benefit.active_enrollment_required == false)
		assert(benefit.hide_cost_on_confirm == false)
		assert(benefit.display_order == 7)
		assert(benefit.allowed_dependent_ids == null)
		assert(benefit.benefit_class == "volume")
		assert(benefit.hide_volume_on_confirm == false)
		assert(benefit.premium_method == "tier")
		assert(benefit.beneficiary_required == true)
		
 	}else if(benefit.benefit_lookup_code == "spouse_life"){
		log.info("benefit ="+benefit)
		assert(benefit.enrollment_method == "increments")
		assert(benefit.org_benefit_name == "Voluntary Spouse Life")
		assert(benefit.hide_cost_if_empty == false)
		assert(benefit.hide_if_terminated == false)
		assert(benefit.dependents_allowed == false)
		assert(benefit.allowed_dependent_relationships == null)
		assert(benefit.active_enrollment_required == false)
		assert(benefit.hide_cost_on_confirm == false)
		assert(benefit.display_order == 8)
		assert(benefit.allowed_dependent_ids == null)
		assert(benefit.benefit_class == "volume")
		assert(benefit.hide_volume_on_confirm == false)
		assert(benefit.premium_method == "tier")
		assert(benefit.beneficiary_required == true)
		
 	}else if(benefit.benefit_lookup_code == "dependent_life"){
		log.info("benefit ="+benefit)
		assert(benefit.enrollment_method == "increments")
		assert(benefit.org_benefit_name == "Voluntary Dependent Life")
		assert(benefit.hide_cost_if_empty == false)
		assert(benefit.hide_if_terminated == false)
		assert(benefit.dependents_allowed == false)
		assert(benefit.allowed_dependent_relationships == null)
		assert(benefit.active_enrollment_required == false)
		assert(benefit.hide_cost_on_confirm == false)
		assert(benefit.display_order == 9)
		assert(benefit.allowed_dependent_ids == null)
		assert(benefit.benefit_class == "volume")
		assert(benefit.hide_volume_on_confirm == false)
		assert(benefit.premium_method == "tier")
		assert(benefit.beneficiary_required == true)
		
 	}
 	
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Session Token" id="82987cc7-3ab8-4299-a4c7-aa55a80894f7"><con:settings/><con:config service="MMA MarketLink API" methodName="put" resourcePath="/api/session" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Session Token" mediaType="application/json" postQueryString="false" id="9b42a296-c677-404a-9ecc-6b1da8680aff"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="086bb39d-cfc9-42a5-9d54-912e992376b8"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="8ea7d4162f0b5d9d083a9ac48c1952c5" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Employee with Family - Edit Fields With HSA" searchProperties="true" id="21132076-b3ee-4ecb-86c5-7d09aadccc09"><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="69f175ac-d31c-4c8a-b8e7-4066a0d3acba"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "QAFamily2",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="8f110859-5e1e-4ad9-b216-1a244d6801b9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Token" id="5f7557a1-7e90-4683-94b1-2784b8d7dfc3"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def sessionJson = new JsonSlurper().parseText(loginResponse)

assert(sessionJson.data.mmatoken != null)
assert(sessionJson.data.expires != null)</script></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="e38e652d-86ae-4091-9530-89b1fe2b3fc4"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Dependent", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Update Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Session Token", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="17efd4cb-1f9c-44bc-ad84-957c9bf39866"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f6bd4e96-f074-461c-aa76-85547046224b"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="cf711e37edd943908b29fbf1e4adedd7" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertion: Get Session context" id="8026d6a4-ec73-47ef-a015-808c44a4fe13"><con:settings/><con:config><script>import groovy.json.*

//Parse the json response from login.
def SessionResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(SessionResponse)

def SCResponse= json.data
//Set Participant Id to Get Participant request
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Participant", "participantId", SCResponse.participant_id.toString())

/*
assert(SCResponse.organization_id == 2523)
assert(SCResponse.participant_id == 8290801)
assert(SCResponse.enrollment_context.enrollment_ends_on == "2014/12/01")
assert(SCResponse.enrollment_context.enrollment_starts_on == "2014/10/15")
assert(SCResponse.enrollment_context.enrollment_type_lookup_code == "open")
assert(SCResponse.enrollment_context.org_plan_year_id == 5043)
assert(SCResponse.enrollment_context.plan_year_ends_on == "2015/12/31")
assert(SCResponse.enrollment_context.plan_year_starts_on == "2015/01/01")

*/
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="36a9df5c-f322-49d4-9107-d25b1680cfca"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a71c9a3d-7d0f-4680-a3e0-c4b93dbb0ada"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="cf711e37edd943908b29fbf1e4adedd7"/>
  <con:entry key="participantId" value="8290803"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Participant Details" id="20cd5c0a-1417-48c9-9f65-ee29a6422994"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
//validate participant details
assert(participant.ssn == "666-11-1008")
assert(participant.address_1 == "263 Regression Way")
assert(participant.last_name == "QARegression 8")
assert(participant.first_name == "Family")
assert(participant.city == "King of Prussia")
assert(participant.state == "PA")
assert(participant.zip_code == "19425")
assert(participant.gender == "M")
assert(participant.marital_status == "M")
assert(participant.hire_date == "2014/09/03")</script></con:config></con:testStep><con:testStep type="groovy" name="Update and Restore Participant" id="1f24dd21-e5fa-4f75-b19c-306368769ef6"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def participant_toberestore = participant
def participant_tobeupdated = participant

participant_tobeupdated.address_1 = participant.address_1 + " reg"
participant_tobeupdated.last_name = participant.last_name + " reg"
participant_tobeupdated.first_name = participant.first_name + " reg"
participant_tobeupdated.city = participant.city + " reg"
participant_tobeupdated.marital_status = "S"

def updatedMap = [:]
updatedMap.put('data', participant_tobeupdated)
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()
log.info(updatedPayload)
def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)
testRunner.runTestStepByName("Update Participant");

// Get the updated participant and assure the values are refleted.
def groovyUtils1 = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils1.setPropertyValue("Get Participant", "participantid", participant_id)
testRunner.runTestStepByName("Get Participant");

def prtcpntResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def updtedJson = new JsonSlurper().parseText(prtcpntResponse)
def updtedParticipant = updtedJson.data
log.info("updtedParticipant ="+updtedParticipant)

//assert(updtedParticipant.ssn == "666-11-8888")
assert(updtedParticipant.address_1 == "263 Regression Way reg")
assert(updtedParticipant.last_name == "QARegression 8 reg")
assert(updtedParticipant.first_name == "Family reg")
assert(updtedParticipant.city == "King of Prussia reg")
//assert(updtedParticipant.gender == "M")
assert(updtedParticipant.marital_status == "S")
//assert(updtedParticipant.hire_date == "2014/09/03")

// Restore the Participant to orginal

participant_toberestore.address_1 = "263 Regression Way"
participant_toberestore.last_name="QARegression 8"
participant_toberestore.first_name = "Family"
participant_toberestore.city = "King of Prussia"
participant_toberestore.marital_status = "M"

log.info("participant_toberestore ="+ participant_toberestore)

updatedMap.put('data', participant_toberestore)
def restorePayload = new JsonBuilder(updatedMap).toPrettyString()
log.info(restorePayload)
def restoreRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
restoreRequest.setRequestContent(restorePayload)

def restore_participant_id = participant_toberestore.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", restore_participant_id)
testRunner.runTestStepByName("Update Participant");

// run Assert Participant Details Valid
groovyUtils1.setPropertyValue("Get Participant", "participantid", restore_participant_id)
testRunner.runTestStepByName("Get Participant");
//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def restoredParticipant = empJson.data
//Validate Restore Participant details
assert(restoredParticipant.ssn == "666-11-1008")
assert(restoredParticipant.address_1 == "263 Regression Way")
assert(restoredParticipant.last_name == "QARegression 8")
assert(restoredParticipant.first_name == "Family")
assert(restoredParticipant.city == "King of Prussia")
assert(restoredParticipant.state == "PA")
assert(restoredParticipant.zip_code == "19425")
assert(restoredParticipant.gender == "M")
assert(restoredParticipant.marital_status == "M")
assert(restoredParticipant.hire_date == "2014/09/03")</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="9fb096f8-7123-4433-87c6-cee1ece52046"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "hire_date": "2014/09/03",
        "zip_code": "19425",
        "organization_code": "qa_regression",
        "middle_name": "",
        "ssn": "666-11-1008",
        "state": "PA",
        "address_1": "263 Regression Way",
        "address_2": "",
        "email2": "",
        "country": "",
        "city": "King of Prussia",
        "participant_id": 8290803,
        "first_name": "Family",
        "organization_id": 2523,
        "work_phone": "",
        "last_name": "QARegression 8",
        "gender": "M",
        "home_phone": "",
        "marital_status": "M"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="cf711e37edd943908b29fbf1e4adedd7"/>
  <con:entry key="participantId" value="8290803"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="701d1d4f-4d2d-4c8f-8c4e-ebc02734529d"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="42dd88f4-7ec1-40dd-becf-03c2f9fc47fb"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="cf711e37edd943908b29fbf1e4adedd7"/>
  <con:entry key="participantId" value="8290803"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Ensure Dependents Exists" id="f1b211c6-b2a9-478f-bd99-279517d91096"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent != null)</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Depedents" id="4bd148b4-3706-428e-a88c-ff8e2cee8d16"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from depedents.
def depedentsResponse = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(depedentsResponse)
def dependents = json.data.dependents
for(dependent in dependents){
	if(dependent.ssn == "666-22-1005"){
		dependent.first_name = "Spouse8 U"
		dependent.middle_name = "MN 8";
		dependent.last_name = "QARegression 8 U"
	} else if(dependent.ssn == "666-22-1009"){
		dependent.first_name = "Child8 U"
		dependent.middle_name = "MNC 8";
		dependent.last_name = "QAChild 8 U"
	} else if(dependent.ssn == "666-22-1013"){
		dependent.first_name = "Secondchild8 U"
		dependent.middle_name = "MNC2 8";
		dependent.last_name = "QAChild2 8 U"
	}
	
	def updatedDependentMap = ['data':dependent]
	def updatedDependentPayload = new JsonBuilder(updatedDependentMap).toPrettyString()
	def updateDependentRequest = testRunner.testCase.getTestStepByName("Update Dependent").getTestRequest()
	updateDependentRequest.setRequestContent(updatedDependentPayload)
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("Update Dependent", "dependentId", dependent.id.toString())	
  	testRunner.runTestStepByName("Update Dependent");
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Dependent" id="acccea6a-4ce4-48fa-9a7a-49ffab667789"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents/{dependentId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Dependent" id="8d45d260-c40d-4bcd-914c-d018e4df94a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "lives_at_home": false,
        "zip_code": "19404",
        "coveragestatus": "active",
        "middle_name": "",
        "state": "PA",
        "ssn": "666-22-1005",
        "address_1": "263 Regression Way1",
        "country": "India",
        "city": "King of Prussia",
        "id": 1925228,
        "first_name": "Spouse8",
        "relationship_code": "spouse",
        "last_name": "QARegression 8",
        "birthdate": "1976/10/07",
        "gender": "M"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1923850</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="cf711e37edd943908b29fbf1e4adedd7"/>
  <con:entry key="dependentId" value="1925228"/>
  <con:entry key="participantId" value="8290803"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Update Dependents" id="9d4315fd-ef4b-4cbc-97d7-1b98cd428b27"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Update Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c7d0f8c8-ade0-41ac-ab61-4334c4849273"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="cf711e37edd943908b29fbf1e4adedd7"/>
  <con:entry key="participantId" value="8290803"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Update Dependents" id="d7f6af53-7493-4c72-aceb-a768799e8f57"><con:settings/><con:config><script>import groovy.json.* 

def response = testRunner.testCase.testSteps["Get Update Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

assert(json.data.dependents != null)

for(dependent in json.data.dependents){
	log.info("dependent.ssn::"+dependent.ssn)
	
	if(dependent.ssn == "666-22-1005"){
		assert(dependent.first_name == "Spouse8 U")
		assert(dependent.middle_name = "MN 8")
		assert(dependent.last_name = "QARegression 8 U")
	}else if(dependent.ssn == "666-22-1009"){
		assert(dependent.first_name == "Child8 U")
		assert(dependent.middle_name == "MNC 8")
		assert(dependent.last_name == "QAChild 8 U")
	}else if(dependent.ssn == "666-22-1013"){
		assert(dependent.first_name == "Secondchild8 U")
		assert(dependent.middle_name == "MNC2 8")
		assert(dependent.last_name == "QAChild2 8 U")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Restore Depedents Data" id="e1c749fb-9110-4722-8319-1f76fae0084e"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from depedents.
def depedentsResponse = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(depedentsResponse)
def dependents = json.data.dependents
for(dependent in dependents){
	if(dependent.ssn == "666-22-1005"){
		dependent.first_name = "Spouse8"
		dependent.middle_name = "";
		dependent.last_name = "QARegression 8"
	} else if(dependent.ssn == "666-22-1009"){
		dependent.first_name = "Child8"
		dependent.middle_name = "";
		dependent.last_name = "QARegression 8"
	} else if(dependent.ssn == "666-22-1013"){
		dependent.first_name = "Secondchild8"
		dependent.middle_name = "";
		dependent.last_name = "QARegression 8"
	}
	
	def updatedDependentMap = ['data':dependent]
	def updatedDependentPayload = new JsonBuilder(updatedDependentMap).toPrettyString()
	def updateDependentRequest = testRunner.testCase.getTestStepByName("Update Dependent").getTestRequest()
	updateDependentRequest.setRequestContent(updatedDependentPayload)
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("Update Dependent", "dependentId", dependent.id.toString())	
  	testRunner.runTestStepByName("Update Dependent");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Restore Dependents" id="f7e144f1-652b-4549-b2c7-543abcc02e7a"><con:settings/><con:config><script>import groovy.json.* 

def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

assert(json.data.dependents != null)

for(dependent in json.data.dependents){
	log.info("dependent.ssn::"+dependent.ssn)
	
	if(dependent.ssn == "666-22-1005"){
		assert(dependent.first_name == "Spouse8")
		assert(dependent.middle_name == "")
		assert(dependent.last_name = "QARegression")
	}else if(dependent.ssn == "666-22-1009"){
		assert(dependent.first_name == "Child8")
		assert(dependent.middle_name == "MNC 8")
		assert(dependent.last_name == "QAChild 8 U")
	}else if(dependent.ssn == "666-22-1013"){
		assert(dependent.first_name == "Secondchild8")
		assert(dependent.middle_name == "")
		assert(dependent.last_name == "QARegression 8")
	}
}</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="0e67fe9b-0d6f-47a0-a64e-438bfd038a8b"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6cbae2dd-26fb-4f8f-b2fe-987a24cc58e7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="cf711e37edd943908b29fbf1e4adedd7"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="f033abe0-7a39-4671-91a5-02df590ea84f"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="42105372-d55f-447d-b013-04a1559879c7"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="2d856d89-1f26-41e8-a883-213da40d86a4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="cf711e37edd943908b29fbf1e4adedd7"/>
  <con:entry key="benefitId" value="60809"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="70e7fefe-e0c2-4384-8831-911986d7f7fa"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="e9c6fa84-ca29-4062-b513-916aa50014e0"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="0f5fd51e-8fd6-479f-a791-291a759c1208"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="cf711e37edd943908b29fbf1e4adedd7"/>
  <con:entry key="benefitId" value="60815"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="f486d438-80f2-4029-9342-8cb4e35aa66c"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="65f2f1c5-826b-40fa-9e41-aebb59de8135"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="dd7ded60-570e-4121-b943-3a560b363342"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="163f8ed5-4fc8-46fd-bdf2-80dedb5b2aa8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="cf711e37edd943908b29fbf1e4adedd7"/>
  <con:entry key="benefitId" value="60817"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Benefits Coverages" id="c5976af0-4806-4b12-a000-3788c7f8ad1d"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = benefitsJson.data.find{it.benefit_class == "tier"}
log.info("tierBenefit id="+tierBenefit.org_benefit_id)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
	
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	def coverageResponse = coverageJson.data
	
	def cur_coverage_plan_id = coverageResponse.org_plan_id;
	
	log.info("plan id from GET coverage="+ coverageResponse.org_plan_id)
	if(benefit.benefit_lookup_code == "medical"){
		assert(coverageResponse.org_plan_name == "HSA Eligible")
	} else if ((benefit.benefit_lookup_code == "hsa") || (benefit.benefit_lookup_code == "dental") || (benefit.benefit_lookup_code == "vision")
		|| (benefit.benefit_lookup_code == "hcra") || (benefit.benefit_lookup_code == "basic_subscriber_life")){
		assert(coverageResponse.org_plan_name != "Decline")
	} else if((benefit.benefit_lookup_code == "subscriber_life") || (benefit.benefit_lookup_code == "spouse_life") || (benefit.benefit_lookup_code == "dependent_life")){
		assert(coverageResponse.waiting_for_eoi == true)
	}

	if((benefit.beneficiary_required == true) &amp;&amp; (coverageResponse.beneficiaries.size > 0)){
		def primaryAllocation = 0		
		for(beneficiary in coverageResponse.beneficiaries){
			/*if(beneficiary.primary_beneficiary == true) {
				primaryAllocation = primaryAllocation + beneficiary.allocation		
			}*/
			assert(beneficiary.allocation == "100.0")
		}		
	} 

}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" disabled="true" id="c88cadce-1079-4965-a624-0d4588fb9124"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "org_plan_id": 183968,
        "coverage_level_id": 9,
        "dependent_coverages": [
            
        ],
        "beneficiaries": [
            
        ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a5d50ad6-6c02-4251-b120-002b4561e1e7"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="bcdc47159274ce12bf47403dfe5ba14b"/>
  <con:entry key="benefitId" value="60815"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT Session Token" id="06477d77-4da0-40ac-9553-3af6e1f7ee1b"><con:settings/><con:config service="MMA MarketLink API" methodName="put" resourcePath="/api/session" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Session Token" mediaType="application/json" postQueryString="false" id="808c579f-a5c8-4774-9f4b-c89570d977a5"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="bb5b2a8f-5932-4d71-91a3-c25d4a362735"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="cf711e37edd943908b29fbf1e4adedd7" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Employee with Family - Remove Dependent and Waive plans" searchProperties="true" id="b7b1f532-413d-4e4c-b655-c1a74de09c37"><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="0354b15c-a04b-44d8-8af6-184864942c3c"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "Family3",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="274e903d-b70a-4b15-8110-e2a6fd502003"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Token" id="455fc37a-5a67-4a4e-84b0-83e33c1bb709"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def sessionJson = new JsonSlurper().parseText(loginResponse)

assert(sessionJson.data.mmatoken != null)
assert(sessionJson.data.expires != null)</script></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="18827308-6319-4645-b447-e29427f671c1"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Activate Dependnet", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Inactivate Dependent", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Session Token", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="e56eb0fe-c633-4136-9a95-c7df87482178"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fd7b5b77-8972-4b0a-8378-fa029ff27498"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="31ad14a0ce728da79f4ee4528bf15d94" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Context" id="321d6472-d1b0-4cdf-96d4-9c95a1725923"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def contextResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def contextJson = new JsonSlurper().parseText(contextResponse)


def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Participant", "participantId", contextJson.participant_id.toString())



/*
assert(contextJson.data.organization_id == 2396)
assert(contextJson.data.participant_id == 8290644)
def enrollment_context = contextJson.data.enrollment_context
assert(enrollment_context != null)
assert(enrollment_context.enrollment_ends_on == "2014/12/31")
assert(enrollment_context.enrollment_starts_on == "2014/07/26")
assert(enrollment_context.plan_year_starts_on == "2014/01/01")
assert(enrollment_context.enrollment_type_lookup_code == "open")
assert(enrollment_context.plan_year_ends_on == "2014/12/31")
assert(enrollment_context.org_plan_year_id == 5015)
*/</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="49fd6ea4-fe35-4722-aaa5-dce524a55f20"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="5a99da4d-fd19-42b3-8962-c847773b6039"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31ad14a0ce728da79f4ee4528bf15d94"/>
  <con:entry key="participantId" value="null"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Participant Details Valid" id="38f8127b-82e6-4e95-833a-07bd5dd9dd2c"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
//validate participant details
assert(participant.ssn == "XXX-XX-1009")
assert(participant.address_1 == "264 Regression Way")
assert(participant.last_name == "Regression 9")
assert(participant.first_name == "Family")
assert(participant.city == "King of Prussia")
assert(participant.state == "PA")
assert(participant.zip_code == "19406")
assert(participant.gender == "M")
assert(participant.marital_status == "M")
assert(participant.hire_date == "2014/09/03")

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="25db8d60-cf6d-4a3a-bfac-b0828eabf104"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="59141dfa-047d-41aa-a381-21bb4e683bd9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31ad14a0ce728da79f4ee4528bf15d94"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare InActivate Dependent" id="30fb9e97-fd5c-460d-9933-8391c5aa3f61"><con:settings/><con:config><script>import groovy.json.* 

def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def activeDependent = json.data.dependents.find { it.coveragestatus == "active" }
def inactiveDependent = json.data.inactive_dependents.find { it.coveragestatus == "inactive" }
//assert(dependent != null)

if(activeDependent == null){
	
log.info("inactive dependent id ="+ inactiveDependent.id)

//Set active dependent id for Inactive Dpendent request.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Activate Dependnet", "dependentId", inactiveDependent.id.toString())
groovyUtils.setPropertyValue("PUT Inactivate Dependent", "dependentId", inactiveDependent.id.toString())
testRunner.gotoStepByName(  "PUT Activate Dependnet")
}
else{


log.info("dependent id ="+ activeDependent.id)

//Set active dependent id for Inactive Dpendent request.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Inactivate Dependent", "dependentId", activeDependent.id.toString())
testRunner.gotoStepByName(  "PUT Inactivate Dependent")
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Activate Dependnet" id="34084e3e-93ec-41bc-8e2c-112c7657004f"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents/{dependentId}/coveragestatus" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Activate Dependnet" id="2a1e5f4d-594a-4460-a03b-da1626b0bc64" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"header": 
	{
		
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"status": "active"
	}
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="5d6686d7-049a-4deb-bef5-15553c989df3"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31ad14a0ce728da79f4ee4528bf15d94"/>
  <con:entry key="dependentId" value="1924902"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT Inactivate Dependent" id="c7dbcdc2-5065-4b36-9798-bd9630e0ea88"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents/{dependentId}/coveragestatus" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Inactivate Dependent" id="2a1e5f4d-594a-4460-a03b-da1626b0bc64" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"header": 
	{
		
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"status": "inactive"
	}
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="74d0e781-39d9-4b4f-8152-b3621b3c8461"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31ad14a0ce728da79f4ee4528bf15d94"/>
  <con:entry key="dependentId" value="1924906"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="1abf6926-adc4-4bb1-b77e-13d08571c62b"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="62a2d4ac-9a68-41f3-b43d-ef8ca8c698a8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31ad14a0ce728da79f4ee4528bf15d94"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Benefits List" id="ab251ab5-bf7d-432b-a334-a8ffe25fd194"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def BLResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(BLResponse)

def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "medical"}
log.info(MedicalBenlist)
assert(MedicalBenlist.display_order == 1)
assert(MedicalBenlist.org_benefit_name == "Medical")
assert(MedicalBenlist.enrollment_method == "standard")
assert(MedicalBenlist.premium_method == "tier")
assert(MedicalBenlist.annual_payday_count == 26)
/*
def hsaBenefitList = Json.data.find{it.benefit_lookup_code == "medical"}
assert(hsaBenefitList.display_order == 2)
assert(hsaBenefitList.org_benefit_name == "Health Savings Account")
assert(hsaBenefitList.enrollment_method == "enter_annual")
assert(hsaBenefitList.premium_method == "annual_target")
assert(hsaBenefitList.annual_payday_count == 26)*/

def DentalBenlist = Json.data.find{it.benefit_lookup_code == "dental"}
log.info(DentalBenlist)
assert(DentalBenlist.display_order == 3)
assert(DentalBenlist.org_benefit_name == "Dental")
assert(DentalBenlist.enrollment_method == "standard")
assert(DentalBenlist.premium_method == "tier")
assert(DentalBenlist.annual_payday_count == 26)


def HcraBenlist = Json.data.find{it.benefit_lookup_code == "hcra"}
log.info(HcraBenlist)
assert(HcraBenlist.display_order == 5)
assert(HcraBenlist.org_benefit_name == "Health Care Reimbursement Account")
assert(HcraBenlist.enrollment_method == "enter_annual")
assert(HcraBenlist.premium_method == "annual_target")
assert(HcraBenlist.annual_payday_count == 26)

def VisionBenlist = Json.data.find{it.benefit_lookup_code == "vision"}
log.info(VisionBenlist)
assert(VisionBenlist.display_order == 4)
assert(VisionBenlist.org_benefit_name == "Vision")
assert(VisionBenlist.enrollment_method == "standard")
assert(VisionBenlist.premium_method == "tier")
assert(VisionBenlist.annual_payday_count == 26)


def BSLBenlist = Json.data.find{it.benefit_lookup_code == "basic_subscriber_life"}
log.info(BSLBenlist)
assert(BSLBenlist.display_order == 6)
assert(BSLBenlist.org_benefit_name == "Basic Employee Life")
assert(BSLBenlist.enrollment_method == "standard")
assert(BSLBenlist.premium_method == "tier")
assert(BSLBenlist.annual_payday_count == 26)


def SLBenlist = Json.data.find{it.benefit_lookup_code == "subscriber_life"}
log.info(SLBenlist)
assert(SLBenlist.display_order == 7)
assert(SLBenlist.org_benefit_name == "Voluntary Employee Life")
assert(SLBenlist.enrollment_method == "increments")
assert(SLBenlist.premium_method == "tier")
assert(SLBenlist.annual_payday_count == 26)


</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="9d6f37f2-27f4-45ad-9647-1ffc7a8d4dce"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="a58c0940-ea9c-4db6-b40a-0b46c52c0f63"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="31ad384a-ec6c-4ade-91a7-3f0d4671e935"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31ad14a0ce728da79f4ee4528bf15d94"/>
  <con:entry key="benefitId" value="60555"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="da9e503a-3f6b-4a14-a5be-44fddc2458c4"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="8d377934-ee93-4e1e-a455-85d2fa7396e8"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="64890d36-fa6f-4584-b4e4-edc95f638910"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31ad14a0ce728da79f4ee4528bf15d94"/>
  <con:entry key="benefitId" value="60804"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="1929b864-9874-4df8-b1ae-68f57b860885"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="a1e6446b-4106-4ba2-a122-406eb84c1fec"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="4d876c8d-2e88-4b79-aa9b-25f4ac2ae4b6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="85dbe26a-58f9-44a1-a4bb-10b3058812d9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31ad14a0ce728da79f4ee4528bf15d94"/>
  <con:entry key="benefitId" value="60804"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="PUT Coverage Requests" id="e2a6eaaa-02b2-4db3-ac8a-b87cee8e6d78"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
	
	
	//getBenefitPlans(benefit,plansJson);
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)

	//def coverageJson 
	//getBenefitCoverage(benefit,coverageJson);
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
			
	def cur_coverage_plan_id = coverageJson.data.org_plan_id;
	def cur_org_plan_name = coverageJson.data.org_plan_name
	
	log.info("plan id from GET coverage="+ coverageJson.data.org_plan_id)
	log.info("plan name from GET coverage="+ cur_org_plan_name)
	
	// get the plans and make sure Non HSA Medical , Dental and Vision plans are selected.
	if( benefit.benefit_lookup_code == "basic_subscriber_life" || benefit.benefit_lookup_code == "subscriber_life"){
		
		// if the current plan is Decline 
		if(cur_org_plan_name == "Decline"){
			
			def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
			log.info("non Decline plan = " + coveragePlan)						
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)
			if (	benefit.benefit_lookup_code == "subscriber_life" ){
				def beneficiaries = coverageJson.data.beneficiaries
				updateCoverage(coveragePlan,benefit,beneficiaries);
			}		
			updateCoverage(coveragePlan,benefit,null);
		}
	}else {
		if( cur_org_plan_name != "Decline"){			
			def coveragePlan = plansJson.data.find {it.plan_name == "Decline" }
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)
			updateCoverage(coveragePlan,benefit, null);
		}
		
	}
}


def updateCoverage(def coveragePlan, def benefit, def beneficiaries) {
			
		def updateCoverageReqMap = [:]
		def updateCoverageDataMap = [:]

		log.info("coveragePlan ="+coveragePlan)
		
		updateCoverageDataMap.put("org_plan_id",coveragePlan.plan_id)
		updateCoverageDataMap.put("coverage_level_id",coveragePlan.level_id)
		updateCoverageDataMap.put("dependent_coverages",[])
		updateCoverageDataMap.put("beneficiaries",[])
		if(benefit.benefit_class == "contribution" ){
			if(coveragePlan.waived == true ){
				updateCoverageDataMap.put("subscriber_amount", "0.0")
			} else {
				updateCoverageDataMap.put("subscriber_amount",coveragePlan.subscriber_min_amount )
			}
		}else if(benefit.benefit_class == "volume" &amp;&amp; coveragePlan.waived != true ){
			if(coveragePlan.increments != null){
				updateCoverageDataMap.put("increments","2.0" )
			}
			if(benefit.beneficiary_required == true &amp;&amp; beneficiaries != null ){
				updateCoverageDataMap.put("beneficiaries", beneficiaries)
			}
		}

		log.info("updateCoverageDataMap ="+updateCoverageDataMap)
		
		updateCoverageReqMap.put("data",updateCoverageDataMap)
		def updateCoveragePayload = new JsonBuilder(updateCoverageReqMap).toPrettyString()
		
		log.info("updateCoveragePayload ="+updateCoveragePayload)
		
		def updateCoverageRequest = testRunner.testCase.getTestStepByName("PUT Benefit Coverage").getTestRequest()
		updateCoverageRequest.setRequestContent(updateCoveragePayload)
		
		//Set benefit id for PUT Benefit Coverage request.
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
		testRunner.runTestStepByName("PUT Benefit Coverage");
	
		def updateCoverageResponse = testRunner.testCase.testSteps["PUT Benefit Coverage"].testRequest.response.contentAsString

		//log.info("updateCoverageResponse ="+updateCoverageResponse)
		//def updateCoverageJson = new JsonSlurper().parseText(updateCoverageResponse)
	
		//log.info("updateCoverageJson = "+updateCoverageJson)
	}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" disabled="true" id="f055ff0b-8b00-4b49-a677-447847122b43"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "org_plan_id": 182426,
        "coverage_level_id": 18,
        "dependent_coverages": [
            
        ],
        "beneficiaries": [
            
        ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6c4c0126-d7c2-4bad-980b-579494e27fa1"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="31ad14a0ce728da79f4ee4528bf15d94"/>
  <con:entry key="benefitId" value="60561"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Get Benefit Coverage" id="ed952279-f97f-4127-9820-794763602e6f"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){
	//getBenefitCoverage
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)

	if(benefit.benefit_lookup_code == "medical"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2014/09/03")
	     assert(coverageJson.data.org_plan_id == 182415)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	if(benefit.benefit_lookup_code == "hsa"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2014/09/03")
	     assert(coverageJson.data.org_plan_id == 182417)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}
	
	
	if(benefit.benefit_lookup_code == "dental"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2014/09/03")
	     assert(coverageJson.data.org_plan_id == 182419)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	
	if(benefit.benefit_lookup_code == "basic_subscriber_life"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)      	
	     assert(coverageJson.data.original_effective_date == "2014/09/03")
	     assert(coverageJson.data.org_plan_id == 182426)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
	}

	if(benefit.benefit_lookup_code == "vision"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2014/09/03")
	     assert(coverageJson.data.org_plan_id == 183935)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	if(benefit.benefit_lookup_code == "hcra"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2014/09/03")
	     assert(coverageJson.data.org_plan_id == 182425)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Session Token" id="08dee793-debc-4f6e-9c45-0438abd0902b"><con:settings/><con:config service="MMA MarketLink API" methodName="put" resourcePath="/api/session" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Session Token" mediaType="application/json" postQueryString="false" id="71cf2fb9-2f9f-48a2-ad6a-ae55ce6eeb83"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6607f142-37da-48f8-8ef7-dd4882a40755"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="31ad14a0ce728da79f4ee4528bf15d94" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="QA Comp Employee with Family - Reactivate Dependent and Waive plans" searchProperties="true" id="745b96d9-63e0-4e37-aad9-afce54a80d12"><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="f4366a8c-6ec4-4d3d-8cd7-885e42328983"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "QAFamily4",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="edfe4664-0a1e-4bfc-9f1e-57d9afac8c5d"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Token" id="d0255a70-f365-49cb-91a0-dee5ec4ba638"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)


//assert that the mma token is not null
assert (json.data.mmatoken !=null)
log.info (" MMA TOKEN OBTAINED IS -  "+json.data.mmatoken)

assert (json.data.expires !=null)
log.info (" EXPIRES IS NOT NULL -  "+json.data.expires)
</script></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="920d7827-7ad4-4a22-b7be-42f7e878c7a2"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Activate Dependnet", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Inactivate Dependent", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Session Token", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="95d66651-db80-4777-8a50-9be97c2e15ac"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3f7f753f-2cad-48cf-8c37-06077970fae9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="88e868facf8fbfeab4d686fa3de1f5e4" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Enrollment Period Open" id="b05a7af8-95c5-441c-8492-47d3db299b3b"><con:settings/><con:config><script>
import groovy.json.* 

//Parse the json response from login.
def contextResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def contextJson = new JsonSlurper().parseText(contextResponse)


def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Participant", "participantId", contextJson.participant_id.toString())



/*
assert(contextJson.data.organization_id == 2396)
assert(contextJson.data.participant_id == 8290644)
def enrollment_context = contextJson.data.enrollment_context
assert(enrollment_context != null)
assert(enrollment_context.enrollment_ends_on == "2014/12/31")
assert(enrollment_context.enrollment_starts_on == "2014/07/26")
assert(enrollment_context.plan_year_starts_on == "2014/01/01")
assert(enrollment_context.enrollment_type_lookup_code == "open")
assert(enrollment_context.plan_year_ends_on == "2014/12/31")
assert(enrollment_context.org_plan_year_id == 5015)
*/

/*
import groovy.json.* 

//Parse the json response from login.
testRunner.runTestStepByName("Get Session Context");
def response = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

//obtain the values of enrollment start date, end date, etc.,
def enroll_start = json.data.enrollment_context.enrollment_starts_on.toString()
def enroll_end = json.data.enrollment_context.enrollment_ends_on.toString()
def enrollment_status = json.data.enrollment_context.enrollment_type_lookup_code.toString()
def plan_yr_start = json.data.enrollment_context.plan_year_starts_on.toString()
def plan_yr_end = json.data.enrollment_context.plan_year_ends_on.toString()
def participant_id = json.data.participant_id.toString() 
def organization_id = json.data.organization_id.toString() 
def org_plan_year_id = json.data.enrollment_context.org_plan_year_id

assert (json.data.enrollment_context != null)
assert enroll_start=="2014/10/15"
assert enroll_end=="2014/12/01"
assert enrollment_status=="open"
assert plan_yr_start == "2015/01/01"
assert plan_yr_end == "2015/12/31"
assert participant_id == "8290806"
assert organization_id == "2523"
assert org_plan_year_id == 5043

log.info(" Enrollment Start Date is: " +enroll_start)
log.info(" Enrollment End Date is: " +enroll_end)
log.info(" Enrollment Status is: " +enrollment_status)
log.info(" plan_yr_start is: " +plan_yr_start)
log.info(" plan_yr_end is: " +plan_yr_end)
log.info(" participant_id is: " +participant_id)
log.info(" organization_id is: " +organization_id)
log.info(" org_plan_year_id is: " +org_plan_year_id)


*/</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="7dffcecf-2537-423f-a38d-0fa529eeb545"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="0e7d31a1-3b9b-43d4-99ee-c8532929c0b7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="88e868facf8fbfeab4d686fa3de1f5e4"/>
  <con:entry key="participantId" value="null"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Participant Details Valid" id="5e1efdeb-46c9-438d-8218-8a5e973477d8"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
//validate participant details
assert(participant.ssn == "666-11-1011")
assert(participant.address_1 == "265 Regression Way")
assert(participant.last_name == "QARegression 10")
assert(participant.first_name == "Family")
assert(participant.city == "King of Prussia")
assert(participant.state == "PA")
assert(participant.zip_code == "19406")
assert(participant.gender == "M")
assert(participant.marital_status == "M")
assert(participant.hire_date == "2014/09/01")

log.info (" The SSN of this participant is: " +participant.ssn)</script></con:config></con:testStep><con:testStep type="groovy" name="Set Participant Id" id="6bbee777-59af-407a-a894-3a2d5efeb4cd"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)


def participant = json.data
/*
def updatedMap = ['data' : participant]
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()

log.info(updatedPayload)

def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)
*/

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("PUT Activate Dependnet", "participantid", participant_id)
groovyUtils.setPropertyValue("GET Benefits List", "participantid", participant_id)
groovyUtils.setPropertyValue("Get Dependents", "participantid", participant_id)
groovyUtils.setPropertyValue("GET Benefit By Id", "participantid", participant_id)
//groovyUtils.setPropertyValue("GET Benefit Coverage", "participantid", participant_id)
groovyUtils.setPropertyValue("PUT Inactivate Dependent", "participantid", participant_id)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="e73c6cee-6bd3-41b8-987d-d7649f9c67f0"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="863fb1f8-1770-45a1-bfc9-2d73703c2f22"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="88e868facf8fbfeab4d686fa3de1f5e4"/>
  <con:entry key="participantId" value="8290806"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Verify Inactive Dependents Existance" id="d98887a5-2f06-4994-a308-f2f5a41a4dae"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

//check if any inactive dependents are there or not
def inactive_dependents = json.data.inactive_dependents.find { it.coveragestatus == "inactive" }
 
 if (inactive_dependents == null){
 log.info " there is no inactive dependent" }
 
 
 /*
 // disable test step "PUT Activate Dependnet" 
  testRunner.testCase.getTestStepByName("Prepare Activate Dependent").setDisabled(true)	
  testRunner.testCase.getTestStepByName("PUT Activate Dependnet").setDisabled(true)	
   }   else{
  	 // enable test step "PUT Activate Dependnet" 
  testRunner.testCase.getTestStepByName("PUT Activate Dependnet").setDisabled(false)	
  }
*/</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Activate Dependent" id="bd54b387-49f4-4289-b324-315be0836c01"><con:settings/><con:config><script>
import groovy.json.* 

def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def activeDependent = json.data.dependents.find { it.coveragestatus == "active" }
def inactiveDependent = json.data.inactive_dependents.find { it.coveragestatus == "inactive" }

log.info("activeDependent ==" +activeDependent)
log.info("inactiveDependent ==" +inactiveDependent)

if(inactiveDependent == null){

	log.info("dependent id ="+ activeDependent.id)
	
	//Set active dependent id for Inactive Dpendent request.
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("PUT Inactivate Dependent", "dependentId", activeDependent.id.toString())
	testRunner.runTestStepByName("PUT Inactivate Dependent")

	// Again Retrieving the complete Dependent details
	def latestResponse = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
	def latestJSON = new JsonSlurper().parseText(latestResponse)
	
	def active_Dependent = latestJSON.data.dependents.find { it.coveragestatus == "active" }
	def inactive_dependent = latestJSON.data.inactive_dependents.find { it.coveragestatus == "inactive" }

	
log.info("active_Dependent ==" +active_Dependent)
log.info("inactive_Dependent ==" +inactive_dependent)
	assert(inactive_dependent != null)
	
	log.info("inactive_dependent ="+inactive_dependent.id)
			
	//Set inactive dependent id to activate in the PUT Activate Dependnet step
	def groovyUtils1 = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils1.setPropertyValue("PUT Activate Dependnet", "dependentId", inactive_dependent.id.toString())
	testRunner.runTestStepByName("PUT Activate Dependnet")
	

}else{
	
	log.info("inactiveDependent ="+inactiveDependent.id)
			
	//Set inactive dependent id to activate in the PUT Activate Dependnet step
	def groovyUtils2 = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils2.setPropertyValue("PUT Activate Dependnet", "dependentId", inactiveDependent.id.toString())
	testRunner.runTestStepByName("PUT Activate Dependnet")
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Activate Dependnet" disabled="true" id="57ce0db6-9347-42c4-b6fa-569e15c6a4e1"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents/{dependentId}/coveragestatus" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Activate Dependnet" id="2a1e5f4d-594a-4460-a03b-da1626b0bc64" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"header": 
	{
		
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"status": "active"
	}
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="729e286c-4ba1-46f3-b36d-fc65bbe8ccf5"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="88e868facf8fbfeab4d686fa3de1f5e4"/>
  <con:entry key="dependentId" value="1925234"/>
  <con:entry key="participantId" value="8290806"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT Inactivate Dependent" disabled="true" id="2dfb466c-520a-481e-9596-d17b375c9af3"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents/{dependentId}/coveragestatus" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Inactivate Dependent" id="2a1e5f4d-594a-4460-a03b-da1626b0bc64" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"header": 
	{
		
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"status": "inactive"
	}
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="58ee97c1-7a0e-401f-bb1a-91f7ddeaa874"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="88e868facf8fbfeab4d686fa3de1f5e4"/>
  <con:entry key="dependentId" value="1925234"/>
  <con:entry key="participantId" value="8290806"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="96fec9bc-df23-4bf6-ae36-f7a8cfb6df4e"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="31c70772-dbf0-4e4a-b7fc-171d358e8235"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="88e868facf8fbfeab4d686fa3de1f5e4"/>
  <con:entry key="participantId" value="8290806"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Benefits List" id="1fdb0f83-3fbd-4b3b-abef-8fc26a5f0b3b"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def BLResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(BLResponse)

def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "medical"}
log.info(MedicalBenlist)
assert(MedicalBenlist.display_order == 1)
assert(MedicalBenlist.org_benefit_name == "Medical")
assert(MedicalBenlist.enrollment_method == "standard")
assert(MedicalBenlist.premium_method == "tier")
assert(MedicalBenlist.annual_payday_count == 26)

/*def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "hsa"}
log.info(HSABenlist)
assert(HSABenlist.display_order == 2)
assert(HSABenlist.org_benefit_name == "Health Savings Account")
assert(HSABenlist.enrollment_method == "enter_annual")
assert(HSABenlist.premium_method == "annual_target")
assert(HSABenlist.annual_payday_count == 26) */


def DentalBenlist = Json.data.find{it.benefit_lookup_code == "dental"}
log.info(DentalBenlist)
assert(DentalBenlist.display_order == 3)
assert(DentalBenlist.org_benefit_name == "Dental")
assert(DentalBenlist.enrollment_method == "standard")
assert(DentalBenlist.premium_method == "tier")
assert(DentalBenlist.annual_payday_count == 26)

def HcraBenlist = Json.data.find{it.benefit_lookup_code == "hcra"}
log.info(HcraBenlist)
assert(HcraBenlist.display_order == 4)
assert(HcraBenlist.org_benefit_name == "Health Care Reimbursement Account")
assert(HcraBenlist.enrollment_method == "enter_annual")
assert(HcraBenlist.premium_method == "annual_target")
assert(HcraBenlist.annual_payday_count == 26)


def VisionBenlist = Json.data.find{it.benefit_lookup_code == "vision"}
log.info(VisionBenlist)
assert(VisionBenlist.display_order == 5)
assert(VisionBenlist.org_benefit_name == "Vision")
assert(VisionBenlist.enrollment_method == "standard")
assert(VisionBenlist.premium_method == "tier")
assert(VisionBenlist.annual_payday_count == 26)



def BSLBenlist = Json.data.find{it.benefit_lookup_code == "basic_subscriber_life"}
log.info(BSLBenlist)
assert(BSLBenlist.display_order == 6)
assert(BSLBenlist.org_benefit_name == "Basic Employee Life")
assert(BSLBenlist.enrollment_method == "standard")
assert(BSLBenlist.premium_method == "tier")
assert(BSLBenlist.annual_payday_count == 26)


def SLBenlist = Json.data.find{it.benefit_lookup_code == "subscriber_life"}
log.info(SLBenlist)
assert(SLBenlist.display_order == 7)
assert(SLBenlist.org_benefit_name == "Voluntary Employee Life")
assert(SLBenlist.enrollment_method == "increments")
assert(SLBenlist.premium_method == "tier")
assert(SLBenlist.annual_payday_count == 26)

def SpLBenlist = Json.data.find{it.benefit_lookup_code == "spouse_life"}
log.info(SpLBenlist)
assert(SpLBenlist.display_order == 8)
assert(SpLBenlist.org_benefit_name == "Voluntary Spouse Life")
assert(SpLBenlist.enrollment_method == "increments")
assert(SpLBenlist.premium_method == "tier")
assert(SpLBenlist.annual_payday_count == 26)


def DLBenlist = Json.data.find{it.benefit_lookup_code == "dependent_life"}
log.info(SpLBenlist)
assert(DLBenlist.display_order == 9)
assert(DLBenlist.org_benefit_name == "Voluntary Dependent Life")
assert(DLBenlist.enrollment_method == "increments")
assert(DLBenlist.premium_method == "tier")
assert(DLBenlist.annual_payday_count == 26)


</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="572494a9-4bc8-4a1c-a491-311cbbfd3643"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="49cfd502-0474-48c8-9fb4-7878c083e702"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="e36d6839-c303-40d5-81f6-344ca9e977a7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="88e868facf8fbfeab4d686fa3de1f5e4"/>
  <con:entry key="benefitId" value="60809"/>
  <con:entry key="participantId" value="8290806"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="b03e9536-0447-45bb-9c71-a122c2efcd4b"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())


</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="70104295-d733-4a31-9e4b-0f1138e4b2bb"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="00a09c30-4648-4139-a8bf-3bdfe042db92"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="88e868facf8fbfeab4d686fa3de1f5e4"/>
  <con:entry key="benefitId" value="60816"/>
  <con:entry key="participantId" value="8290644"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT Session Token" id="51121d01-3839-4002-b2e9-3f02ef54f5ed"><con:settings/><con:config service="MMA MarketLink API" methodName="put" resourcePath="/api/session" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Session Token" mediaType="application/json" postQueryString="false" id="142ab759-2b67-49c9-a8ad-98c513cf99b6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9f0eeace-3a84-438c-95ee-4a4294391ef3"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="88e868facf8fbfeab4d686fa3de1f5e4" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Phase2 Tests Scenarios for QA Regression" disabled="true" id="d7c561be-a85b-4c52-98bc-d565d183928e"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MMA Single Waive Benefits  Regression" searchProperties="true" id="10440158-1988-40d8-8a09-521990a2491c"><con:description>TestCase generated for REST Resource [Session Context] located at [/session/context]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="9a01eeaf-9d4f-4dcb-bfe7-27ca7dc1bb41"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
   "username": "RSingle1",
   "password": "password123"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="51cb92c3-c26f-4209-a034-a6259ae19a80"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="2044985e-0d79-45a2-b7af-501f9b98e5ab"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="e2c9cdc7-7350-4233-b872-5db7ed35a72a"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="2c60dc4e-f189-4686-aa2f-8ffe6892488d"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="edf258cdb2ae679544dada4b10badd7f" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="7cd9dff2-9779-4d41-b9e7-7176a0e04a25"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="5b68d781-cf3b-4041-9412-3f1836883555"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="edf258cdb2ae679544dada4b10badd7f" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="70d5d57e-97b0-4c4a-877f-9e457baebd35"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def updatedMap = ['data' : participant]
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()

log.info(updatedPayload)

def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="ccc86ff7-b895-4ec5-84bb-3dd87d918653"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
    "data": {
        "hire_date": "2014/06/01",
        "zip_code": "19406",
        "organization_code": "qa_regression",
        "middle_name": "",
        "ssn": "777-10-1001",
        "state": "PA",
        "address_1": "456 Regression Way",
        "address_2": "",
        "email2": "",
        "country": "",
        "city": "King of Prussia",
        "participant_id": 8290843,
        "first_name": "QA Test 1",
        "organization_id": 2523,
        "work_phone": "",
        "last_name": "RegressionSTest 1",
        "gender": "M",
        "home_phone": "",
        "marital_status": "S"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3565695c-5716-4ef0-8804-7754beabe47f"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="edf258cdb2ae679544dada4b10badd7f"/>
  <con:entry key="participantId" value="8290843"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="7634c9f7-bff6-4c78-8f4d-5d697302e47f"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="0b0e4e46-9a81-43d4-88ed-ff9d91eced2c"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="edf258cdb2ae679544dada4b10badd7f"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Ensure No Dependents Exists" id="a5055d2d-5d99-4437-b741-ec82b301d35b"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent == null)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="02e959c1-e3a8-498d-9214-68a0fb720d79"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="654e56dd-7e83-4501-b085-2764feea31ae"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="edf258cdb2ae679544dada4b10badd7f"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="e2e3a479-7820-484e-8bed-7a786b921da2"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="4595fd6a-da25-405d-979e-77ff22f60f5c"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b1cd690d-a6af-4817-b2b3-a137fc0bce96"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="edf258cdb2ae679544dada4b10badd7f"/>
  <con:entry key="benefitId" value="60809"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="e619f8f1-f36c-4d8a-b633-76a34b42dcea"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="76744688-f2cb-4795-bf0b-b83f1281decf"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="63e57502-3a92-4fb3-9d0c-da01a963c5be"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="edf258cdb2ae679544dada4b10badd7f"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="4f831365-7e97-44d0-b478-ee42bf37784d"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="f59ac673-aca0-4bad-ac25-1476191d888c"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="f1c6cfe5-5f62-4393-8d7a-83afbd4deb13"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3530f011-e7ed-4909-b5fe-01a08776e521"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="edf258cdb2ae679544dada4b10badd7f"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare PUT Coverage Requests" id="bcf7c22f-b93b-4067-86ff-c6fb9f9619b8"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = benefitsJson.data.find{it.benefit_class == "tier"}
log.info("tierBenefit id="+tierBenefit.org_benefit_id)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
	
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	
	def cur_coverage_plan_id = coverageJson.data.org_plan_id;
	
	log.info("plan id from GET coverage="+ coverageJson.data.org_plan_id)
	
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)
	
	def coveragePlan = plansJson.data.find {it.plan_id != cur_coverage_plan_id}
	if ( coveragePlan == null ) coveragePlan = plansJson.data.find {it.plan_id == cur_coverage_plan_id}
	
	log.info("coverage plan id = "+ coveragePlan.plan_id)
	log.info("coverage level id = "+ coveragePlan.level_id)
	
	def updateCoverageReqMap = [:]
	def updateCoverageDataMap = [:]
	
	updateCoverageDataMap.put("org_plan_id",coveragePlan.plan_id)
	updateCoverageDataMap.put("coverage_level_id",coveragePlan.level_id)
	updateCoverageDataMap.put("dependent_coverages",[])
	updateCoverageDataMap.put("beneficiaries",[])
	if(benefit.benefit_class == "contribution" ){
		if(coveragePlan.waived == true ){
			updateCoverageDataMap.put("subscriber_amount", "0.0")
		} else {
			updateCoverageDataMap.put("subscriber_amount",coveragePlan.subscriber_min_amount )
			log.info("inside else")
		}
	}
	if(benefit.benefit_class == "volume" &amp;&amp; coveragePlan.waived != true ){
		if(coveragePlan.increments != null){
			updateCoverageDataMap.put("increments","2.0" )
		}
	}
	updateCoverageReqMap.put("data",updateCoverageDataMap)
	def updateCoveragePayload = new JsonBuilder(updateCoverageReqMap).toPrettyString()
	
	log.info("updateCoveragePayload ="+updateCoveragePayload)
	
	def updateCoverageRequest = testRunner.testCase.getTestStepByName("PUT Benefit Coverage").getTestRequest()
	updateCoverageRequest.setRequestContent(updateCoveragePayload)
	
	//Set benefit id for PUT Benefit Coverage request.
	groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Coverage");

	def updateCoverageResponse = testRunner.testCase.testSteps["PUT Benefit Coverage"].testRequest.response.contentAsString
	//def updateCoverageJson = new JsonSlurper().parseText(updateCoverageResponse)
	//log.info("updateCoverageJson = "+updateCoverageJson)
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" disabled="true" id="6b36833c-dca1-4c6c-b6c2-da51a99c2519"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
    "data": {
        "org_plan_id": 183959,
        "coverage_level_id": 18,
        "dependent_coverages": [
            
        ],
        "beneficiaries": [
            
        ],
        "increments": "2.0"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="516df17e-b646-4d00-b61f-b3fffe53748f"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="edf258cdb2ae679544dada4b10badd7f"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Single Employee decline  Vison" searchProperties="true" id="828da832-5b21-4824-a1ca-3df1dd1a0457"><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="dd5d4260-cd8d-4d9e-8b15-d57b90bce540"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
   "username": "RSingle2",
   "password": "password123"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="23501070-b965-4ccd-82b8-66a41fdd6802"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get MMAToken" id="8bdba988-736f-4b73-ad0c-f150b86a9157"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Benefits List", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
//groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="groovy" name="Assertions:MAA Token" id="e03894e6-1e59-4fb9-a172-66c5b74f6e8a"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

def MMATokenResponse= json.data
assert(MMATokenResponse.expires != null)
assert(MMATokenResponse.mmatoken != null)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="9bc5fc16-801c-4187-95e8-1dc0c5dfe593"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="bd5a26a1-c616-441e-accc-76ed679c05f1"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="67d23ea953ca448ea95d93e4f9c08308" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Session Context" id="8ed5475c-e9f8-4a76-bfd0-84cbc8916790"><con:settings/><con:config><script>import groovy.json.*

//Parse the json response from login.
def SessionResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(SessionResponse)

def SCResponse= json.data
assert(SCResponse.organization_id == 2523)
assert(SCResponse.participant_id == 8290844)
assert(SCResponse.enrollment_context.enrollment_ends_on == "2014/12/01")
assert(SCResponse.enrollment_context.enrollment_starts_on == "2014/10/15")
assert(SCResponse.enrollment_context.enrollment_type_lookup_code == "open")
assert(SCResponse.enrollment_context.org_plan_year_id == 5043)
assert(SCResponse.enrollment_context.plan_year_ends_on == "2015/12/31")
assert(SCResponse.enrollment_context.plan_year_starts_on == "2015/01/01")


</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="2fa7184d-75c5-44bb-8b9b-8910560fb8ff"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="863aa479-7b22-4726-84ec-f8bef3d7fbfa"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="67d23ea953ca448ea95d93e4f9c08308" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get ParticipantId" id="d7e55a1a-2021-4386-9416-85fe5c2984c0"><con:settings/><con:config><script>import groovy.json.*

//Parse the json response from login.
def PartResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(PartResponse)
def participant = json.data
//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
log.info("json.data.participant_id")

def participant_id = participant.participant_id.toString() ?: "0"

//groovyUtils.setPropertyValue("Get Dependents", "participantId", participant_id)
groovyUtils.setPropertyValue("Get Benefits List", "participantId", participant_id)
groovyUtils.setPropertyValue("Get Benefit Coverage", "participantId", participant_id)
groovyUtils.setPropertyValue("Get Dependents", "participantId", participant_id)
//groovyUtils.setPropertyValue("GET Benefit By Id", "participantId", participant_id)
groovyUtils.setPropertyValue("PUT Benefit Plans", "participantId", participant_id)</script></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Participant details" id="e5a3f4e6-86a1-4ea3-bf86-e0db8bf1aea1"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
assert(participant.city == "King of Prussia")
assert(participant.first_name == "QA Test 2")
assert(participant.gender == "F")
assert(participant.marital_status == "S")
assert(participant.organization_code == "qa_regression")
assert(participant.organization_id == 2523)
assert(participant.participant_id == 8290844)
assert(participant.ssn == "777-10-1002")
assert(participant.state == "PA")
assert(participant.zip_code == "19406")





//loginfo("participant")</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="1d034a36-65d4-49c6-bae5-70805189f112"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="99566184-a7df-4537-acc3-cd9fe3d3a59d"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="67d23ea953ca448ea95d93e4f9c08308"/>
  <con:entry key="participantId" value="8290844"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions: Check Dependents" id="629b14e7-c3fb-432a-8e93-883b2518f9ee"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent == null)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Benefits List" id="b36a5607-bec3-4653-b3b6-57bfba57ef49"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/8290799/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="8f5dccf9-82a6-4285-917a-a99edc435a67"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="67d23ea953ca448ea95d93e4f9c08308"/>
  <con:entry key="participantId" value="8290844"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get Benefit ID" id="ba3bf452-5ad1-4c67-b40a-079c2e0b18a3"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["Get Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Benefits List" id="c2522c0c-53c6-493f-8ffb-7c3892da342f"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def BLResponse = testRunner.testCase.testSteps["Get Benefits List"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(BLResponse)


def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "medical"}
log.info(MedicalBenlist)
assert(MedicalBenlist.display_order == 1)
assert(MedicalBenlist.org_benefit_name == "Medical")
assert(MedicalBenlist.enrollment_method == "standard")
assert(MedicalBenlist.premium_method == "tier")
assert(MedicalBenlist.annual_payday_count == 26)


def DentalBenlist = Json.data.find{it.benefit_lookup_code == "dental"}
log.info(DentalBenlist)
assert(DentalBenlist.display_order == 3)
assert(DentalBenlist.org_benefit_name == "Dental")
assert(DentalBenlist.enrollment_method == "standard")
assert(DentalBenlist.premium_method == "tier")
assert(DentalBenlist.annual_payday_count == 26)


def HcraBenlist = Json.data.find{it.benefit_lookup_code == "hcra"}
log.info(HcraBenlist)
assert(HcraBenlist.display_order == 4)
assert(HcraBenlist.org_benefit_name == "Health Care Reimbursement Account")
assert(HcraBenlist.enrollment_method == "enter_annual")
assert(HcraBenlist.premium_method == "annual_target")
assert(HcraBenlist.annual_payday_count == 26)

def VisionBenlist = Json.data.find{it.benefit_lookup_code == "vision"}
log.info(VisionBenlist)
assert(VisionBenlist.display_order == 5)
assert(VisionBenlist.org_benefit_name == "Vision")
assert(VisionBenlist.enrollment_method == "standard")
assert(VisionBenlist.premium_method == "tier")
assert(VisionBenlist.annual_payday_count == 26)


def BSLBenlist = Json.data.find{it.benefit_lookup_code == "basic_subscriber_life"}
log.info(BSLBenlist)
assert(BSLBenlist.display_order == 6)
assert(BSLBenlist.org_benefit_name == "Basic Employee Life")
assert(BSLBenlist.enrollment_method == "standard")
assert(BSLBenlist.premium_method == "tier")
assert(BSLBenlist.annual_payday_count == 26)


def SLBenlist = Json.data.find{it.benefit_lookup_code == "subscriber_life"}
log.info(SLBenlist)
assert(SLBenlist.display_order == 7)
assert(SLBenlist.org_benefit_name == "Voluntary Employee Life")
assert(SLBenlist.enrollment_method == "increments")
assert(SLBenlist.premium_method == "tier")
assert(SLBenlist.annual_payday_count == 26)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Benefit Coverage" id="cf9a6920-77ff-46cc-be41-dd9418b30300"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60809/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b24f4c87-5093-497d-a44b-6b4e05130ad0"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="67d23ea953ca448ea95d93e4f9c08308"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="8290844"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assertions:Benefit Coverage" id="dd9fbe38-c29b-4cc1-8490-3b29490d5bf2"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["Get Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){
 //getBenefitPlans
 def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )    
 //groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
 //testRunner.runTestStepByName("PUT Benefit Plans");
 
 //Parse the json response from Benefit Plans.
 //def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
// def plansJson = new JsonSlurper().parseText(plansResponse)

 //getBenefitCoverage
 groovyUtils.setPropertyValue("Get Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
 testRunner.runTestStepByName("Get Benefit Coverage");
 
 //Parse the json response from GET Benefit Coverage.
 def getCoverageResponse = testRunner.testCase.testSteps["Get Benefit Coverage"].testRequest.response.contentAsString
 def coverageJson = new JsonSlurper().parseText(getCoverageResponse)





//Below variable used for both HSA &amp; EOI check
 def coverageData = coverageJson.data
 
 //Verify No HSA in "Medical" plan
 if(benefit.org_benefit_name== "Medical"){
 log.info("benefit.org_benefit_name::"+benefit.org_benefit_name)                
 log.info("coverageData.org_plan_name::"+coverageData.org_plan_name)
 assert(coverageData.org_plan_name !="%HSA%")
 }

 if(benefit.benefit_lookup_code == "medical"){
  log.info("coverageJson ="+coverageJson)
  assert(coverageJson.data.coverage_level_name != "Decline")
      assert(coverageJson.data.coverage_level_id == 9)
       assert(coverageJson.data.org_plan_name == "PPO Plan")
       assert(coverageJson.data.coverage_level_lookup_code != "decline")
 }
 

if(benefit.benefit_lookup_code == "dental"){
  log.info("coverageJson ="+coverageJson)
  assert(coverageJson.data.coverage_level_name != "Decline")
      assert(coverageJson.data.coverage_level_id == 9)
       assert(coverageJson.data.org_plan_name == "Delta PPO")
     assert(coverageJson.data.org_plan_id == 183970)
    assert(coverageJson.data.coverage_level_lookup_code != "decline")
 }


if(benefit.benefit_lookup_code == "hcra"){
  log.info("coverageJson ="+coverageJson)
     assert(coverageJson.data.coverage_level_name == "Enrolled")
     assert(coverageJson.data.coverage_level_id == 18)
     assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183965)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code != "decline")
}

/*
if(benefit.benefit_lookup_code == "vision"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Decline")
      assert(coverageJson.data.coverage_level_id == 19)
      assert(coverageJson.data.org_plan_name == "Decline")
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183956)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "decline")
 }
*/

if(benefit.benefit_lookup_code == "basic_subscriber_life"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Enrolled")
      assert(coverageJson.data.coverage_level_id == 18)
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183972)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
 
def beneficiaries = coverageJson.data.beneficiaries
  assert(beneficiaries != null )
  for(beneficiary in beneficiaries){
   //def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
   assert(beneficiary != null)
   log.info("beneficiary.primary_beneficiary="+beneficiary.primary_beneficiary)
  //assert(beneficiary.primary_beneficiary == true)
   log.info("beneficiary ="+ beneficiary)
   assert(beneficiary.allocation == "50.0")
     }
    
 }

if(benefit.benefit_lookup_code == "subscriber_life"){
  log.info("coverageJson ="+coverageJson)
    assert(coverageJson.data.coverage_level_name == "Enrolled")
      assert(coverageJson.data.coverage_level_id == 18)
      assert(coverageJson.data.original_effective_date == "2015/01/01")
     assert(coverageJson.data.org_plan_id == 183959)
     assert(coverageJson.data.waiting_for_eoi == false)
    assert(coverageJson.data.coverage_level_lookup_code != "decline")

 }

}</script></con:config></con:testStep><con:testStep type="groovy" name="PUT Benefit Plans request" id="ad26cb65-0745-45b4-ba85-e3c4131b5beb"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["Get Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
		
	//getBenefitPlans(benefit,plansJson);
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)

	//def coverageJson 
	//getBenefitCoverage(benefit,coverageJson);
	groovyUtils.setPropertyValue("Get Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("Get Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["Get Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
			
	def cur_coverage_plan_id = coverageJson.data.org_plan_id;
	def cur_org_plan_name = coverageJson.data.org_plan_name
	
	log.info("plan id from GET coverage="+ coverageJson.data.org_plan_id)
	log.info("plan name from GET coverage="+ cur_org_plan_name)
	
	// get the plans and make sure Non HSA Medical , Dental and Vision plans are selected.
	if(benefit.benefit_lookup_code == "medical" || benefit.benefit_lookup_code == "dental" 
	|| benefit.benefit_lookup_code == "basic_subscriber_life"
	|| benefit.benefit_lookup_code == "subscriber_life"
	|| benefit.benefit_lookup_code == "hcra"){
		
		// if the current plan is Decline for Medical , Dental and Vision benefits, set to non decline plans
		
		if(cur_org_plan_name == "Decline"){
			
			def coveragePlan = plansJson.data.find {it.plan_name != "Decline" &amp;&amp; it.plan_name != "Medical Plan - HSA" }
								
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)			
			updateCoverage(coveragePlan,benefit);
		}		
	}else if ( benefit.benefit_lookup_code == "vision" || benefit.benefit_lookup_code == "hsa"  ){
		if(cur_org_plan_name != "Decline"){
			def coveragePlan = plansJson.data.find {it.plan_name == "Decline" }
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)			
			updateCoverage(coveragePlan,benefit);
		}
	}
}

def getBenefitPlans(def benefit, def plansJson){
	
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	plansJson = new JsonSlurper().parseText(plansResponse)

	return plansJson;
}

def getBenefitCoverage(def benefit,def coverageJson){
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("Get Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("Get Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["Get Benefit Coverage"].testRequest.response.contentAsString
	coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	return coverageJson;
}

def updateCoverage(def coveragePlan, def benefit) {
			
		def updateCoverageReqMap = [:]
		def updateCoverageDataMap = [:]

		log.info("coveragePlan ="+coveragePlan)
		
		updateCoverageDataMap.put("org_plan_id",coveragePlan.plan_id)
		updateCoverageDataMap.put("coverage_level_id",coveragePlan.level_id)
		updateCoverageDataMap.put("dependent_coverages",[])
		updateCoverageDataMap.put("beneficiaries",[])
		if(benefit.benefit_class == "contribution" ){
			if(coveragePlan.waived == true ){
				updateCoverageDataMap.put("subscriber_amount", "0.0")
			} else {
				updateCoverageDataMap.put("subscriber_amount",coveragePlan.subscriber_min_amount )
			}
		}else if(benefit.benefit_class == "volume" &amp;&amp; coveragePlan.waived != true ){
			if(coveragePlan.increments != null){
				updateCoverageDataMap.put("increments","2.0" )
			}
		}

		log.info("updateCoverageDataMap ="+updateCoverageDataMap)
		
		updateCoverageReqMap.put("data",updateCoverageDataMap)
		def updateCoveragePayload = new JsonBuilder(updateCoverageReqMap).toPrettyString()
		
		log.info("updateCoveragePayload ="+updateCoveragePayload)
		
		def updateCoverageRequest = testRunner.testCase.getTestStepByName("PUT Benefit Coverage").getTestRequest()
		updateCoverageRequest.setRequestContent(updateCoveragePayload)
		
		//Set benefit id for PUT Benefit Coverage request.
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
		testRunner.runTestStepByName("PUT Benefit Coverage");
	
		def updateCoverageResponse = testRunner.testCase.testSteps["PUT Benefit Coverage"].testRequest.response.contentAsString

		//log.info("updateCoverageResponse ="+updateCoverageResponse)
		//def updateCoverageJson = new JsonSlurper().parseText(updateCoverageResponse)
	
		//log.info("updateCoverageJson = "+updateCoverageJson)
	}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="2c58e166-06e7-4016-b299-6473e1d2c6b1"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="2d01369a-4b85-467e-b29c-d1e431a05f88"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="eef38242-56dc-4170-8aee-680029cc9d7f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="67d23ea953ca448ea95d93e4f9c08308"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="8290844"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Single Employee decline benefits Regression" searchProperties="true" id="c6b089a5-c042-4c8b-af60-30821e095f7c"><con:description>TestCase generated for REST Resource [Session Context] located at [/session/context]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="b907dfd7-748e-40e3-8aa8-007ffbcb5035"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "RSingle3",
   "password": "password123"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="8b310c5f-9925-470e-bdbe-5232ff5ec4f3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="f6cf9fbd-5142-4e1f-b9c4-ef448a2a26cb"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="3b83e255-f334-4c1f-b1b2-cd331179c8b5"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="0fa1df2d-d277-4272-ac0a-94d8914441e7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="83bb78e795bf2fc5de32f80db39e25a4" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="3ff7ebc0-b52a-4781-9b35-da356f3ff810"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4d3383db-ab05-49e0-9eea-1e419e3aa1f8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="83bb78e795bf2fc5de32f80db39e25a4" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="6f3ff093-45c0-466c-93f9-d1f502667942"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def updatedMap = ['data' : participant]
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()

log.info(updatedPayload)

def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="fd72d981-4aa5-4cae-8871-c69b3f950465"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "hire_date": "2014/06/03",
        "zip_code": "19406",
        "organization_code": "qa_regression",
        "middle_name": "",
        "ssn": "777-10-1003",
        "state": "PA",
        "address_1": "458 Regression Way",
        "address_2": "",
        "email2": "",
        "country": "",
        "city": "King of Prussia",
        "participant_id": 8290845,
        "first_name": "QA Test 3",
        "organization_id": 2523,
        "work_phone": "",
        "last_name": "RegressionSTest 3",
        "gender": "M",
        "home_phone": "",
        "marital_status": "S"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="71f6c31f-0d15-4dba-b1d0-ab8ad5b70b53"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="83bb78e795bf2fc5de32f80db39e25a4"/>
  <con:entry key="participantId" value="8290845"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="abcc0a2a-0faf-46e6-9096-77d4e5a08817"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c0dc2d10-10d3-48e8-96ca-bf81bb12d2ca"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="83bb78e795bf2fc5de32f80db39e25a4"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Ensure No Dependents Exists" id="c505a10a-55bd-442a-b7ce-70cb9248c1de"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent == null)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="a2b3c485-9cdd-446a-895c-981cd94ba901"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="15c98cdb-c226-44e9-b736-0bd4e95625d8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="83bb78e795bf2fc5de32f80db39e25a4"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="589d4e52-314b-4061-ab10-2611dbec0d05"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="f7c3cc2c-0301-442c-a8af-7a1093d5c6b5"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="bab96e86-8e3a-4619-aceb-ff1b662d6d09"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="83bb78e795bf2fc5de32f80db39e25a4"/>
  <con:entry key="benefitId" value="60809"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="2d5bf443-a6af-44a3-9600-18d666e2a988"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="2f6755d7-c6e0-4bc3-9295-4712e42a2953"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="04787a8b-5377-4710-8192-32bc4b66e0aa"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="83bb78e795bf2fc5de32f80db39e25a4"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="228ad037-4f0a-4e45-a8a3-ebfe059e725a"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="f166a3e7-dc3f-446d-85ea-f5622fe8ad6c"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="99f0bc21-a047-4a22-a49d-7c17e3ccc5d3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="de841368-4942-4a64-8387-346be9e045b6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="83bb78e795bf2fc5de32f80db39e25a4"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare PUT Coverage Requests" id="5082f5e8-51b6-4023-864c-f5dc070be7e8"><con:settings/><con:config><script><![CDATA[import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
	
	
	//getBenefitPlans(benefit,plansJson);
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)

	//def coverageJson 
	//getBenefitCoverage(benefit,coverageJson);
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
			
	def cur_coverage_plan_id = coverageJson.data.org_plan_id;
	def cur_org_plan_name = coverageJson.data.org_plan_name
	
	log.info("plan id from GET coverage="+ coverageJson.data.org_plan_id)
	log.info("plan name from GET coverage="+ cur_org_plan_name)
	
	// get the plans and make sure Non HSA Medical , Dental and Vision plans are selected.
	if(benefit.benefit_lookup_code == "medical" || benefit.benefit_lookup_code == "dental" 
	|| benefit.benefit_lookup_code == "vision" || benefit.benefit_lookup_code == "basic_subscriber_life"){
		
		// if the current plan is Decline for Medical , Dental and Vision benefits, set to non decline plans
		
		if(cur_org_plan_name == "Decline"){
			
			def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
			if(coveragePlan.plan_name == "Medical Plan - HSA"){
				coveragePlan = plansJson.data.find {it.plan_name != "Medical Plan - HSA" && it.plan_name != "Decline" }
			}
						
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)			
			updateCoverage(coveragePlan,benefit);
		}else if(cur_org_plan_name == "Medical Plan - HSA"){
			
			def coveragePlan = plansJson.data.find { it.plan_name != "Medical Plan - HSA" && it.plan_name != "Decline" }

			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)
			updateCoverage(coveragePlan,benefit);
		}

	}else if(benefit.benefit_lookup_code == "hcra" || benefit.benefit_lookup_code == "subscriber_life"){
			
		def coveragePlan = plansJson.data.find {it.plan_name == "Decline" }
		log.info("coverage level id = "+ coveragePlan.level_id)
		log.info("coverage plan id = "+ coveragePlan.plan_id)
		log.info("coverage plan name = "+ coveragePlan.plan_name)
		updateCoverage(coveragePlan,benefit);
	}
}

def getBenefitPlans(def benefit, def plansJson){
	
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	plansJson = new JsonSlurper().parseText(plansResponse)

	return plansJson;
}

def getBenefitCoverage(def benefit,def coverageJson){
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	return coverageJson;
}

def updateCoverage(def coveragePlan, def benefit) {
			
		def updateCoverageReqMap = [:]
		def updateCoverageDataMap = [:]

		log.info("coveragePlan ="+coveragePlan)
		
		updateCoverageDataMap.put("org_plan_id",coveragePlan.plan_id)
		updateCoverageDataMap.put("coverage_level_id",coveragePlan.level_id)
		updateCoverageDataMap.put("dependent_coverages",[])
		updateCoverageDataMap.put("beneficiaries",[])
		if(benefit.benefit_class == "contribution" ){
			if(coveragePlan.waived == true ){
				updateCoverageDataMap.put("subscriber_amount", "0.0")
			} else {
				updateCoverageDataMap.put("subscriber_amount",coveragePlan.subscriber_min_amount )
			}
		}else if(benefit.benefit_class == "volume" && coveragePlan.waived != true ){
			if(coveragePlan.increments != null){
				updateCoverageDataMap.put("increments","2.0" )
			}
		}

		log.info("updateCoverageDataMap ="+updateCoverageDataMap)
		
		updateCoverageReqMap.put("data",updateCoverageDataMap)
		def updateCoveragePayload = new JsonBuilder(updateCoverageReqMap).toPrettyString()
		
		log.info("updateCoveragePayload ="+updateCoveragePayload)
		
		def updateCoverageRequest = testRunner.testCase.getTestStepByName("PUT Benefit Coverage").getTestRequest()
		updateCoverageRequest.setRequestContent(updateCoveragePayload)
		
		//Set benefit id for PUT Benefit Coverage request.
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
		testRunner.runTestStepByName("PUT Benefit Coverage");
	
		def updateCoverageResponse = testRunner.testCase.testSteps["PUT Benefit Coverage"].testRequest.response.contentAsString

		//log.info("updateCoverageResponse ="+updateCoverageResponse)
		//def updateCoverageJson = new JsonSlurper().parseText(updateCoverageResponse)
	
		//log.info("updateCoverageJson = "+updateCoverageJson)
	}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" disabled="true" id="5522ddd5-82d3-441a-91a1-c1e1b59461ae"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "org_plan_id": 183958,
        "coverage_level_id": 19,
        "dependent_coverages": [
            
        ],
        "beneficiaries": [
            
        ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="49a7f32c-2f66-47bd-bd73-ebb1889822d4"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="83bb78e795bf2fc5de32f80db39e25a4"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Single Employee (HDHP) (EOI) Regression" searchProperties="true" id="3d9519f8-bbce-46d3-a664-7c0ccf86ce88"><con:description>TestCase generated for REST Resource [Session Context] located at [/session/context]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="b5c1058b-1331-49ad-be06-4b008229bdb1"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
   "username": "RSingle4",
   "password": "password123"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6034ada9-3872-44a3-9dd2-7c7122ea8277"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="243994af-552d-4ca1-9ccc-e37ef4d65147"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="32b7f81f-7878-43e8-b057-f2bf13ae607a"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="1eacb1fe-c4db-4120-aca1-7283406e0adb"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="7658cadedc10e5ad24383aa570dcd569" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="2f21e59e-25e5-45f4-9399-a49ecd376d86"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b90b81e6-f606-464c-8c49-be032f6147ec"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="7658cadedc10e5ad24383aa570dcd569" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="5ba01b0a-1ade-4dd8-91d9-e503fe671a90"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def updatedMap = ['data' : participant]
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()

log.info(updatedPayload)

def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="b5f58454-30e1-4317-b134-beeafa2ac7d8"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
    "data": {
        "hire_date": "2014/06/04",
        "zip_code": "19406",
        "organization_code": "qa_regression",
        "middle_name": "",
        "ssn": "777-10-1004",
        "state": "PA",
        "address_1": "459 Regression Way",
        "address_2": "",
        "email2": "",
        "country": "",
        "city": "King of Prussia",
        "participant_id": 8290846,
        "first_name": "QA Test 4",
        "organization_id": 2523,
        "work_phone": "",
        "last_name": "RegressionSTest 4",
        "gender": "F",
        "home_phone": "",
        "marital_status": "S"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b2f29d5f-db97-4c39-8724-6a41261f3c97"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="7658cadedc10e5ad24383aa570dcd569"/>
  <con:entry key="participantId" value="8290846"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="44f49ec1-8f82-403f-8315-2b2e5046c8a5"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c68c2214-5324-4af2-ab23-1ed43e75883b"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="7658cadedc10e5ad24383aa570dcd569"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Ensure No Dependents Exists" id="becf88e0-41fd-4360-baef-7c79c58b4176"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent == null)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="8bc57a29-3e86-4610-a90a-fbc548a98fec"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="57963935-b91c-4049-8936-0b97ab9e2f0c"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="7658cadedc10e5ad24383aa570dcd569"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="e0b89d25-800b-415c-a376-8c5921e62b62"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="eca5d9cd-48e2-43e7-a84f-6282f5e10f09"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="bf45fb69-4a68-4875-946d-6a81bd5d336d"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="7658cadedc10e5ad24383aa570dcd569"/>
  <con:entry key="benefitId" value="60809"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="702fde0c-7eed-471a-bcba-a1c66a02b0c6"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="59a1dfcf-1b4e-4f5f-8089-5c574a426a31"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c7e1046b-7e3f-4e1e-ad3f-0934802321f4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="7658cadedc10e5ad24383aa570dcd569"/>
  <con:entry key="benefitId" value="60817"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="9719b4ea-c37c-4b11-95c9-6761bc96bd29"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" disabled="true" id="624a58cd-a737-4c2c-8ec1-266e215b9f57"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="a6da2a97-cf38-48f5-9cbd-3cef20378155"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="22821173-1222-4fbf-9d27-13daf152961c"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="7658cadedc10e5ad24383aa570dcd569"/>
  <con:entry key="benefitId" value="60817"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare PUT Coverage Requests" disabled="true" id="1e671eee-6067-4b98-9e56-b49b24922125"><con:settings/><con:config><script><![CDATA[import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
	
	
	//getBenefitPlans(benefit,plansJson);
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)

	//def coverageJson 
	//getBenefitCoverage(benefit,coverageJson);
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
			
	def cur_coverage_plan_id = coverageJson.data.org_plan_id;
	def cur_org_plan_name = coverageJson.data.org_plan_name
	
	log.info("plan id from GET coverage="+ coverageJson.data.org_plan_id)
	log.info("plan name from GET coverage="+ cur_org_plan_name)
	
	// get the plans and make sure Non HSA Medical , Dental and Vision plans are selected.
	if(benefit.benefit_lookup_code == "medical" || benefit.benefit_lookup_code == "dental" 
	|| benefit.benefit_lookup_code == "vision" || benefit.benefit_lookup_code == "basic_subscriber_life"
	|| benefit.benefit_lookup_code == "hsa" || benefit.benefit_lookup_code == "subscriber_life"
	|| benefit.benefit_lookup_code == "hcra"){
		
		// if the current plan is Decline for Medical , Dental and Vision benefits, set to non decline plans
		
		if(cur_org_plan_name == "Decline"){
			
			def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
			if(coveragePlan.plan_name != "Medical Plan - HSA" && benefit.benefit_lookup_code == "medical"){
				coveragePlan = plansJson.data.find {it.plan_name == "Medical Plan - HSA" }
			}					
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)			
			updateCoverage(coveragePlan,benefit);
		}else if(cur_org_plan_name != "Decline" && benefit.benefit_lookup_code == "medical"){
			coveragePlan = plansJson.data.find {it.plan_name == "Medical Plan - HSA" }
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)			
			updateCoverage(coveragePlan,benefit);
		}
	}
}

def getBenefitPlans(def benefit, def plansJson){
	
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	plansJson = new JsonSlurper().parseText(plansResponse)

	return plansJson;
}

def getBenefitCoverage(def benefit,def coverageJson){
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	return coverageJson;
}

def updateCoverage(def coveragePlan, def benefit) {
			
		def updateCoverageReqMap = [:]
		def updateCoverageDataMap = [:]

		log.info("coveragePlan ="+coveragePlan)
		
		updateCoverageDataMap.put("org_plan_id",coveragePlan.plan_id)
		updateCoverageDataMap.put("coverage_level_id",coveragePlan.level_id)
		updateCoverageDataMap.put("dependent_coverages",[])
		updateCoverageDataMap.put("beneficiaries",[])
		if(benefit.benefit_class == "contribution" ){
			if(coveragePlan.waived == true ){
				updateCoverageDataMap.put("subscriber_amount", "0.0")
			} else {
				updateCoverageDataMap.put("subscriber_amount",coveragePlan.subscriber_min_amount )
			}
		}else if(benefit.benefit_class == "volume" && coveragePlan.waived != true ){
			if(coveragePlan.increments != null){
				updateCoverageDataMap.put("increments","2.0" )
			}
		}

		log.info("updateCoverageDataMap ="+updateCoverageDataMap)
		
		updateCoverageReqMap.put("data",updateCoverageDataMap)
		def updateCoveragePayload = new JsonBuilder(updateCoverageReqMap).toPrettyString()
		
		log.info("updateCoveragePayload ="+updateCoveragePayload)
		
		def updateCoverageRequest = testRunner.testCase.getTestStepByName("PUT Benefit Coverage").getTestRequest()
		updateCoverageRequest.setRequestContent(updateCoveragePayload)
		
		//Set benefit id for PUT Benefit Coverage request.
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
		testRunner.runTestStepByName("PUT Benefit Coverage");
	
		def updateCoverageResponse = testRunner.testCase.testSteps["PUT Benefit Coverage"].testRequest.response.contentAsString

		//log.info("updateCoverageResponse ="+updateCoverageResponse)
		//def updateCoverageJson = new JsonSlurper().parseText(updateCoverageResponse)
	
		//log.info("updateCoverageJson = "+updateCoverageJson)
	}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" disabled="true" id="33c2b63f-9876-4116-9bf3-3ebf171780fa"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-54-205-236-186.compute-1.amazonaws.com:8081</con:endpoint><con:request>{
    "data": {
        "org_plan_id": 183865,
        "coverage_level_id": 9,
        "dependent_coverages": [
            
        ],
        "beneficiaries": [
            
        ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="901416a5-e998-435f-8d9f-c05abe354ffa"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="7658cadedc10e5ad24383aa570dcd569"/>
  <con:entry key="benefitId" value="60769"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Single Employee (HDHP) no EOI no Dental Regression" searchProperties="true" id="248faddb-144f-4620-a866-51ade8ce97b7"><con:description>TestCase generated for REST Resource [Session Context] located at [/session/context]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="a8ec3103-44ee-48c1-b6f1-82f5a7f306f6"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "RSingle6",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="bc0bae21-f6fc-4017-ad36-4387b6f94e1f"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Token" id="19c07187-745d-4085-83ab-bb2a35f1b44f"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)


//assert that the mma token is not null
assert (json.data.mmatoken !=null)
log.info (" MMA TOKEN OBTAINED IS -  "+json.data.mmatoken)

assert (json.data.expires !=null)
log.info (" EXPIRES IS NOT NULL -  "+json.data.expires)
</script></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="5e2e96fc-dec6-4267-b5b9-111ea58e64db"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="f69b0184-4c75-4178-8107-2e729cfdeb82"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="1b9efc7a-3f91-4dd6-8399-2301da39675e"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="c5bb4c13071aff04c0cad15031f46ab6" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Context" id="3e3582eb-ba8a-4a65-8fe5-cc1e6eab4753"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
testRunner.runTestStepByName("Get Session Context");
def response = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

//obtain the values of enrollment start date, end date, etc.,
def enroll_start = json.data.enrollment_context.enrollment_starts_on.toString()
def enroll_end = json.data.enrollment_context.enrollment_ends_on.toString()
def enrollment_status = json.data.enrollment_context.enrollment_type_lookup_code.toString()
def plan_yr_start = json.data.enrollment_context.plan_year_starts_on.toString()
def plan_yr_end = json.data.enrollment_context.plan_year_ends_on.toString()
def participant_id = json.data.participant_id.toString() 
def organization_id = json.data.organization_id.toString() 
def org_plan_year_id = json.data.enrollment_context.org_plan_year_id

assert (json.data.enrollment_context != null)
assert enroll_start=="2014/10/15"
assert enroll_end=="2014/12/01"
assert enrollment_status=="open"
assert plan_yr_start == "2015/01/01"
assert plan_yr_end == "2015/12/31"
assert participant_id == "8290848"
assert organization_id == "2523"
assert org_plan_year_id == 5043

log.info(" Enrollment Start Date is: " +enroll_start)
log.info(" Enrollment End Date is: " +enroll_end)
log.info(" Enrollment Status is: " +enrollment_status)
log.info(" plan_yr_start is: " +plan_yr_start)
log.info(" plan_yr_end is: " +plan_yr_end)
log.info(" participant_id is: " +participant_id)
log.info(" organization_id is: " +organization_id)
log.info(" org_plan_year_id is: " +org_plan_year_id)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="f50036b2-8abb-42bb-888a-ba35228cf974"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="18b99789-033f-4b52-9b15-255396b38e61"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="c5bb4c13071aff04c0cad15031f46ab6" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Participant Details Valid" id="01ace1d2-68c5-45b4-939a-4a529b149e72"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
//validate participant details
assert(participant.ssn == "777-10-1006")
assert(participant.address_1 == "461 Regression Way")
assert(participant.last_name == "RegressionSTest 6")
assert(participant.first_name == "QA Test 6")
assert(participant.city == "King of Prussia")
assert(participant.state == "PA")
assert(participant.zip_code == "19406")
assert(participant.gender == "F")
assert(participant.marital_status == "S")
assert(participant.hire_date == "2014/06/06")

log.info (" The SSN of this participant is: " +participant.ssn)</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="2100cb09-3bf8-488f-96dd-4373367f8d4e"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def updatedMap = ['data' : participant]
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()

log.info(updatedPayload)

def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="454f0e6d-3909-4792-a1be-2af19c40742e"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "hire_date": "2014/06/06",
        "zip_code": "19406",
        "organization_code": "qa_regression",
        "middle_name": "",
        "ssn": "777-10-1006",
        "state": "PA",
        "address_1": "461 Regression Way",
        "address_2": "",
        "email2": "",
        "country": "",
        "city": "King of Prussia",
        "participant_id": 8290848,
        "first_name": "QA Test 6",
        "organization_id": 2523,
        "work_phone": "",
        "last_name": "RegressionSTest 6",
        "gender": "F",
        "home_phone": "",
        "marital_status": "S"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="772d9a8b-4f58-4a42-b280-9d1f48f489fb"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="c5bb4c13071aff04c0cad15031f46ab6"/>
  <con:entry key="participantId" value="8290848"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="d06070ba-3bf2-418b-8549-24cd66922e5d"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="e7fe6f98-2b79-4b74-9351-9383437baef0"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="c5bb4c13071aff04c0cad15031f46ab6"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Ensure No Dependents Exists" id="335f1e57-de1b-4699-be3b-cd4d365d738b"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent == null)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="e6956aad-716f-4059-b0b2-96d6247c3caf"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6eb9778b-17b8-4c1d-9e7d-b1ecf592f02c"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="c5bb4c13071aff04c0cad15031f46ab6"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Benefits List" id="612dabec-37fc-4daf-87f4-ca82af8c5dc4"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def BLResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(BLResponse)

def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "medical"}
log.info(MedicalBenlist)
assert(MedicalBenlist.display_order == 1)
assert(MedicalBenlist.org_benefit_name == "Medical")
assert(MedicalBenlist.enrollment_method == "standard")
assert(MedicalBenlist.premium_method == "tier")
assert(MedicalBenlist.annual_payday_count == 26)

def HSABenlist = Json.data.find{it.benefit_lookup_code == "hsa"}
log.info(HSABenlist)
assert(HSABenlist.display_order == 2)
assert(HSABenlist.org_benefit_name == "Health Savings Account")
assert(HSABenlist.enrollment_method == "enter_monthly")
assert(HSABenlist.premium_method == "monthly_amount")
assert(HSABenlist.annual_payday_count == 26)


def DentalBenlist = Json.data.find{it.benefit_lookup_code == "dental"}
log.info(DentalBenlist)
assert(DentalBenlist.display_order == 3)
assert(DentalBenlist.org_benefit_name == "Dental")
assert(DentalBenlist.enrollment_method == "standard")
assert(DentalBenlist.premium_method == "tier")
assert(DentalBenlist.annual_payday_count == 26)


def HcraBenlist = Json.data.find{it.benefit_lookup_code == "hcra"}
log.info(HcraBenlist)
assert(HcraBenlist.display_order == 4)
assert(HcraBenlist.org_benefit_name == "Health Care Reimbursement Account")
assert(HcraBenlist.enrollment_method == "enter_annual")
assert(HcraBenlist.premium_method == "annual_target")
assert(HcraBenlist.annual_payday_count == 26)

def VisionBenlist = Json.data.find{it.benefit_lookup_code == "vision"}
log.info(VisionBenlist)
assert(VisionBenlist.display_order == 5)
assert(VisionBenlist.org_benefit_name == "Vision")
assert(VisionBenlist.enrollment_method == "standard")
assert(VisionBenlist.premium_method == "tier")
assert(VisionBenlist.annual_payday_count == 26)


def BSLBenlist = Json.data.find{it.benefit_lookup_code == "basic_subscriber_life"}
log.info(BSLBenlist)
assert(BSLBenlist.display_order == 6)
assert(BSLBenlist.org_benefit_name == "Basic Employee Life")
assert(BSLBenlist.enrollment_method == "standard")
assert(BSLBenlist.premium_method == "tier")
assert(BSLBenlist.annual_payday_count == 26)


def SLBenlist = Json.data.find{it.benefit_lookup_code == "subscriber_life"}
log.info(SLBenlist)
assert(SLBenlist.display_order == 7)
assert(SLBenlist.org_benefit_name == "Voluntary Employee Life")
assert(SLBenlist.enrollment_method == "increments")
assert(SLBenlist.premium_method == "tier")
assert(SLBenlist.annual_payday_count == 26)
</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="6385be40-0f43-44af-8f67-2680fff9ec28"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="81bab589-2b27-49f7-a604-4215cf7f7e41"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="00cc834f-e54d-4750-ba93-74d7486b1f70"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="c5bb4c13071aff04c0cad15031f46ab6"/>
  <con:entry key="benefitId" value="60809"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="11c006fe-9fe4-4b70-8e0b-ef543ab2e6f9"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="3866d969-ac20-4ffc-9494-3d03601dfc99"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b76a765c-809b-4cdc-9c12-3fc809c5d0cd"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="c5bb4c13071aff04c0cad15031f46ab6"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Get Benefit Coverage" id="48d90271-e85f-4a79-8259-445342ca0cdc"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){
	//getBenefitCoverage
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)

	if(benefit.benefit_lookup_code == "medical"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Employee Only")
      	assert(coverageJson.data.coverage_level_id == 9)
      	assert(coverageJson.data.org_plan_name == "HSA Eligible")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183969)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "EE")
	}
	
	if(benefit.benefit_lookup_code == "dental"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183955)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	if(benefit.benefit_lookup_code == "subscriber_life"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	assert(coverageJson.data.org_plan_name == "Voluntary Employee Life")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183959)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")

	     def beneficiaries = coverageJson.data.beneficiaries
	     for(beneficiary in beneficiaries){
			//def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
			assert(beneficiary != null)
			assert(beneficiary.primary_beneficiary == true)
			log.info("beneficiary ="+ beneficiary)
			assert(beneficiary.allocation == "100.0")
		}
		// assert No EOI
		assert(coverageJson.data.waiting_for_eoi == false)
	}

	if(benefit.benefit_lookup_code == "basic_subscriber_life"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	//assert(coverageJson.data.org_plan_name == "Basic - $250,000")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183972)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
	}

	if(benefit.benefit_lookup_code == "vision"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Employee Only")
      	assert(coverageJson.data.coverage_level_id == 9)
      	assert(coverageJson.data.org_plan_name == "Vision Care ")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183971)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "EE")
	}

	if(benefit.benefit_lookup_code == "hcra"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	assert(coverageJson.data.org_plan_name == "Health Care Reimbursement Account")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183965)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
	}

	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="2477e797-ed60-4d9c-95c5-dad9be980daf"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="37c0289c-9671-4e9a-81d5-7f977f3b2924"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="61ea162c-b93b-48cd-82c0-d6a5b9fbdf94"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b03dadff-cb3e-4859-809b-3db0cfe59522"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="c5bb4c13071aff04c0cad15031f46ab6"/>
  <con:entry key="benefitId" value="60817"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare PUT Coverage Requests" disabled="true" id="ee250847-66a3-459b-ace7-1450f14961d5"><con:settings/><con:config><script><![CDATA[import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
	
	
	//getBenefitPlans(benefit,plansJson);
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)

	//def coverageJson 
	//getBenefitCoverage(benefit,coverageJson);
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
			
	def cur_coverage_plan_id = coverageJson.data.org_plan_id;
	def cur_org_plan_name = coverageJson.data.org_plan_name
	
	log.info("plan id from GET coverage="+ coverageJson.data.org_plan_id)
	log.info("plan name from GET coverage="+ cur_org_plan_name)
	
	// get the plans and make sure Non HSA Medical , Dental and Vision plans are selected.
	if(benefit.benefit_lookup_code == "medical" || benefit.benefit_lookup_code == "vision" 
	|| benefit.benefit_lookup_code == "basic_subscriber_life" || benefit.benefit_lookup_code == "hsa" 
	|| benefit.benefit_lookup_code == "subscriber_life" || benefit.benefit_lookup_code == "hcra"){
		
		// if the current plan is Decline for Medical , Dental and Vision benefits, set to non decline plans
		
		if(cur_org_plan_name == "Decline"){
			
			def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
			if(coveragePlan.plan_name != "Medical Plan - HSA" && benefit.benefit_lookup_code == "medical"){
				coveragePlan = plansJson.data.find {it.plan_name == "Medical Plan - HSA" }
			}
						
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)			
			updateCoverage(coveragePlan,benefit);
		}else if(cur_org_plan_name != "Medical Plan - HSA" && benefit.benefit_lookup_code == "medical"){
			coveragePlan = plansJson.data.find {it.plan_name == "Medical Plan - HSA" }
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)			
			updateCoverage(coveragePlan,benefit);
		}
	}else if(benefit.benefit_lookup_code == "dental"){
		if(cur_org_plan_name != "Decline"){			
			def coveragePlan = plansJson.data.find {it.plan_name == "Decline" }
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)
			updateCoverage(coveragePlan,benefit);
		}
	}
}

def getBenefitPlans(def benefit, def plansJson){
	
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	plansJson = new JsonSlurper().parseText(plansResponse)

	return plansJson;
}

def getBenefitCoverage(def benefit,def coverageJson){
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	return coverageJson;
}

def updateCoverage(def coveragePlan, def benefit) {
			
		def updateCoverageReqMap = [:]
		def updateCoverageDataMap = [:]

		log.info("coveragePlan ="+coveragePlan)
		
		updateCoverageDataMap.put("org_plan_id",coveragePlan.plan_id)
		updateCoverageDataMap.put("coverage_level_id",coveragePlan.level_id)
		updateCoverageDataMap.put("dependent_coverages",[])
		updateCoverageDataMap.put("beneficiaries",[])
		if(benefit.benefit_class == "contribution" ){
			if(coveragePlan.waived == true ){
				updateCoverageDataMap.put("subscriber_amount", "0.0")
			} else {
				updateCoverageDataMap.put("subscriber_amount",coveragePlan.subscriber_min_amount )
			}
		}else if(benefit.benefit_class == "volume" && coveragePlan.waived != true ){
			if(coveragePlan.increments != null){
				updateCoverageDataMap.put("increments","2.0" )
			}
		}

		log.info("updateCoverageDataMap ="+updateCoverageDataMap)
		
		updateCoverageReqMap.put("data",updateCoverageDataMap)
		def updateCoveragePayload = new JsonBuilder(updateCoverageReqMap).toPrettyString()
		
		log.info("updateCoveragePayload ="+updateCoveragePayload)
		
		def updateCoverageRequest = testRunner.testCase.getTestStepByName("PUT Benefit Coverage").getTestRequest()
		updateCoverageRequest.setRequestContent(updateCoveragePayload)
		
		//Set benefit id for PUT Benefit Coverage request.
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
		testRunner.runTestStepByName("PUT Benefit Coverage");
	
		def updateCoverageResponse = testRunner.testCase.testSteps["PUT Benefit Coverage"].testRequest.response.contentAsString

		//log.info("updateCoverageResponse ="+updateCoverageResponse)
		//def updateCoverageJson = new JsonSlurper().parseText(updateCoverageResponse)
	
		//log.info("updateCoverageJson = "+updateCoverageJson)
	}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" disabled="true" id="52eba968-048a-4bbf-a93f-13e70653e949"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "org_plan_id": 183865,
        "coverage_level_id": 9,
        "dependent_coverages": [
            
        ],
        "beneficiaries": [
            
        ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="09bc5351-b54b-487f-84f1-58546736f68b"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="c5bb4c13071aff04c0cad15031f46ab6"/>
  <con:entry key="benefitId" value="60769"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Single Employee (HDHP) no EOI Waive coverage Regression" searchProperties="true" id="5d318347-dba7-4a1e-96e8-89884a8e1f61"><con:description>TestCase generated for REST Resource [Session Context] located at [/session/context]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="0974da70-bf5e-4b05-a59c-073e044a804a"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "RSingle5",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="2cc7f405-644c-4de9-9638-861199849074"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Token" id="9ded2c0e-ac62-46b4-929e-5675fbe71ac7"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)


//assert that the mma token is not null
assert (json.data.mmatoken !=null)
log.info (" MMA TOKEN OBTAINED IS -  "+json.data.mmatoken)

assert (json.data.expires !=null)
log.info (" EXPIRES IS NOT NULL -  "+json.data.expires)
</script></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="f1b9298e-0773-4d76-be58-8fdd63531770"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="a68cb714-b8d8-477b-bca3-ddaf65136577"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="1afe586f-2c44-426d-97b6-2b7751c6fc42"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="0f390d68b084d79cf4980ece81a951ff" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Session Context" id="789932cb-2d80-49d4-877d-829d0b1d49cf"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
testRunner.runTestStepByName("Get Session Context");
def response = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

//obtain the values of enrollment start date, end date, etc.,
def enroll_start = json.data.enrollment_context.enrollment_starts_on.toString()
def enroll_end = json.data.enrollment_context.enrollment_ends_on.toString()
def enrollment_status = json.data.enrollment_context.enrollment_type_lookup_code.toString()
def plan_yr_start = json.data.enrollment_context.plan_year_starts_on.toString()
def plan_yr_end = json.data.enrollment_context.plan_year_ends_on.toString()
def participant_id = json.data.participant_id.toString() 
def organization_id = json.data.organization_id.toString() 
def org_plan_year_id = json.data.enrollment_context.org_plan_year_id

assert (json.data.enrollment_context != null)
assert enroll_start=="2014/10/15"
assert enroll_end=="2014/12/01"
assert enrollment_status=="open"
assert plan_yr_start == "2015/01/01"
assert plan_yr_end == "2015/12/31"
assert participant_id == "8290847"
assert organization_id == "2523"
assert org_plan_year_id == 5043

log.info(" Enrollment Start Date is: " +enroll_start)
log.info(" Enrollment End Date is: " +enroll_end)
log.info(" Enrollment Status is: " +enrollment_status)
log.info(" plan_yr_start is: " +plan_yr_start)
log.info(" plan_yr_end is: " +plan_yr_end)
log.info(" participant_id is: " +participant_id)
log.info(" organization_id is: " +organization_id)
log.info(" org_plan_year_id is: " +org_plan_year_id)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="bc57b5e6-b145-4a38-9f56-3a9a80e97807"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c4c1a7c5-e29c-4b56-8db3-ff7e690647fb"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="0f390d68b084d79cf4980ece81a951ff" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Participant Details Valid" id="5e4c185b-eb69-40bb-87aa-239e8a0cfbf5"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def empResponse = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def empJson = new JsonSlurper().parseText(empResponse)

def participant = empJson.data
//validate participant details
assert(participant.ssn == "777-10-1005")
assert(participant.address_1 == "460 Regression Way")
assert(participant.last_name == "RegressionSTest 5")
assert(participant.first_name == "QA Test 5")
assert(participant.city == "King of Prussia")
assert(participant.state == "PA")
assert(participant.zip_code == "19406")
assert(participant.gender == "M")
assert(participant.marital_status == "S")
assert(participant.hire_date == "2014/06/05")

log.info (" The SSN of this participant is: " +participant.ssn)</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="67d94106-355d-411d-926c-925983202755"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def updatedMap = ['data' : participant]
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()

log.info(updatedPayload)

def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="979f3497-1c59-4011-a798-1682842bbc17"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "hire_date": "2014/06/05",
        "zip_code": "19406",
        "organization_code": "qa_regression",
        "middle_name": "",
        "ssn": "777-10-1005",
        "state": "PA",
        "address_1": "460 Regression Way",
        "address_2": "",
        "email2": "",
        "country": "",
        "city": "King of Prussia",
        "participant_id": 8290847,
        "first_name": "QA Test 5",
        "organization_id": 2523,
        "work_phone": "",
        "last_name": "RegressionSTest 5",
        "gender": "M",
        "home_phone": "",
        "marital_status": "S"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="696e8a71-d5ec-495a-8629-05a5b4044fce"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="0f390d68b084d79cf4980ece81a951ff"/>
  <con:entry key="participantId" value="8290847"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="70e1b5f6-8a32-48d6-8329-beead06640cd"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c4d0379c-b48c-49c5-9d61-9250ac3954d4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="0f390d68b084d79cf4980ece81a951ff"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Ensure No Dependents Exists" id="8c5f3632-15f8-4ab7-b648-d7ee12463dc0"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent == null)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="045fcda2-06c3-48ce-be14-ca129368d5e3"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3eed1659-0e54-497a-9986-fbf1d976825c"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="0f390d68b084d79cf4980ece81a951ff"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Benefits List" id="0d358bbd-e680-4b13-ac27-cf7451c7ffd3"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def BLResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def Json = new JsonSlurper().parseText(BLResponse)

def MedicalBenlist = Json.data.find{it.benefit_lookup_code == "medical"}
log.info(MedicalBenlist)
assert(MedicalBenlist.display_order == 1)
assert(MedicalBenlist.org_benefit_name == "Medical")
assert(MedicalBenlist.enrollment_method == "standard")
assert(MedicalBenlist.premium_method == "tier")
assert(MedicalBenlist.annual_payday_count == 26)

def DentalBenlist = Json.data.find{it.benefit_lookup_code == "dental"}
log.info(DentalBenlist)
assert(DentalBenlist.display_order == 3)
assert(DentalBenlist.org_benefit_name == "Dental")
assert(DentalBenlist.enrollment_method == "standard")
assert(DentalBenlist.premium_method == "tier")
assert(DentalBenlist.annual_payday_count == 26)


def HcraBenlist = Json.data.find{it.benefit_lookup_code == "hcra"}
log.info(HcraBenlist)
assert(HcraBenlist.display_order == 4)
assert(HcraBenlist.org_benefit_name == "Health Care Reimbursement Account")
assert(HcraBenlist.enrollment_method == "enter_annual")
assert(HcraBenlist.premium_method == "annual_target")
assert(HcraBenlist.annual_payday_count == 26)

def VisionBenlist = Json.data.find{it.benefit_lookup_code == "vision"}
log.info(VisionBenlist)
assert(VisionBenlist.display_order == 5)
assert(VisionBenlist.org_benefit_name == "Vision")
assert(VisionBenlist.enrollment_method == "standard")
assert(VisionBenlist.premium_method == "tier")
assert(VisionBenlist.annual_payday_count == 26)


def BSLBenlist = Json.data.find{it.benefit_lookup_code == "basic_subscriber_life"}
log.info(BSLBenlist)
assert(BSLBenlist.display_order == 6)
assert(BSLBenlist.org_benefit_name == "Basic Employee Life")
assert(BSLBenlist.enrollment_method == "standard")
assert(BSLBenlist.premium_method == "tier")
assert(BSLBenlist.annual_payday_count == 26)


def SLBenlist = Json.data.find{it.benefit_lookup_code == "subscriber_life"}
log.info(SLBenlist)
assert(SLBenlist.display_order == 7)
assert(SLBenlist.org_benefit_name == "Voluntary Employee Life")
assert(SLBenlist.enrollment_method == "increments")
assert(SLBenlist.premium_method == "tier")
assert(SLBenlist.annual_payday_count == 26)
</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="37ca907f-6992-4416-90b3-3b5754175c18"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="a1071a6d-10d2-41d0-9867-af2a025a2a96"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="28bdaef0-6eec-4cb0-81c7-e281b3eedd58"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="0f390d68b084d79cf4980ece81a951ff"/>
  <con:entry key="benefitId" value="60809"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="4ea10396-3d81-4d43-af56-f646db7e6f4f"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="be167e50-36a0-4397-965c-274a50a6b2bc"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b6a974fa-2a7b-4e4f-8be5-3c2d2889d246"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="0f390d68b084d79cf4980ece81a951ff"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Get Benefit Coverage" id="ea6dea4b-70a2-4163-9bcc-156de9274433"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){
	//getBenefitCoverage
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)

	if(benefit.benefit_lookup_code == "medical"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183954)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}
	
	if(benefit.benefit_lookup_code == "dental"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183955)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	if(benefit.benefit_lookup_code == "subscriber_life"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	assert(coverageJson.data.org_plan_name == "Voluntary Employee Life")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183959)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")

	     def beneficiaries = coverageJson.data.beneficiaries
	     for(beneficiary in beneficiaries){
			//def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
			assert(beneficiary != null)
			assert(beneficiary.primary_beneficiary == true)
			log.info("beneficiary ="+ beneficiary)
			assert(beneficiary.allocation == "100.0")
		}
		// assert No EOI
		assert(coverageJson.data.waiting_for_eoi == false)
	}

	if(benefit.benefit_lookup_code == "basic_subscriber_life"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Enrolled")
      	assert(coverageJson.data.coverage_level_id == 18)
      	//assert(coverageJson.data.org_plan_name == "Basic - $250,000")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183972)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "Enrolled")
	}

	if(benefit.benefit_lookup_code == "vision"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183956)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	if(benefit.benefit_lookup_code == "hcra"){
		log.info("coverageJson ="+coverageJson)
		assert(coverageJson.data.coverage_level_name == "Decline")
      	assert(coverageJson.data.coverage_level_id == 19)
      	assert(coverageJson.data.org_plan_name == "Decline")
	     assert(coverageJson.data.original_effective_date == "2015/01/01")
	     assert(coverageJson.data.org_plan_id == 183964)
	     assert(coverageJson.data.waiting_for_eoi == false)
	     assert(coverageJson.data.coverage_level_lookup_code == "decline")
	}

	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="2045e1e5-85da-46e6-818a-f84a11c35c32"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="3c5c3dfd-810d-4dc2-aa0b-b33125f2df12"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="9a6d7d09-c821-4145-8fe3-41ad6f26a8f0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="015c0b77-c7e5-4b6f-a571-f32c2445499a"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="0f390d68b084d79cf4980ece81a951ff"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Assert Benefits" id="cf976108-8d4b-4c39-8c60-5d66b96a2813"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	// Get Benefit coverage
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	
	def cur_org_plan_name = coverageJson.data.org_plan_name
	log.info("plan name ="+ cur_org_plan_name +"plan id = "+coverageJson.data.org_plan_id + "from GET coverage")

	// Get plans for the given bebefit.
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)
	
	// assert basic plan is not waive
	if( benefit.benefit_lookup_code == "basic_subscriber_life" ){		
		assert(cur_org_plan_name != "Decline")
	}else if( benefit.benefit_lookup_code == "subscriber_life"){
		assert(cur_org_plan_name != "Decline")
		def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
		assert(coveragePlan != null )
		// make sure we got Beneficiaries from Get coverage
		assert(coverageJson.data.beneficiaries != null )
		def primaryBeneficiary = coverageJson.data.beneficiaries.find{it.primary_beneficiary == true}
		assert(primaryBeneficiary != null)
		assert(primaryBeneficiary.allocation == "100.0")

		// assert EOI
		assert(coverageJson.data.waiting_for_eoi == false)
		
	}else{
		assert(cur_org_plan_name == "Decline")
	}
	
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare PUT Coverage Requests" id="60fa7724-680e-43ca-acc2-447fae7ac752"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
	
	
	//getBenefitPlans(benefit,plansJson);
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)

	//def coverageJson 
	//getBenefitCoverage(benefit,coverageJson);
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
			
	def cur_coverage_plan_id = coverageJson.data.org_plan_id;
	def cur_org_plan_name = coverageJson.data.org_plan_name
	
	log.info("plan id from GET coverage="+ coverageJson.data.org_plan_id)
	log.info("plan name from GET coverage="+ cur_org_plan_name)
	
	// get the plans and make sure Non HSA Medical , Dental and Vision plans are selected.
	if( benefit.benefit_lookup_code == "subscriber_life" || benefit.benefit_lookup_code == "basic_subscriber_life"){
		
		// if the current plan is Decline for Medical , Dental and Vision benefits, set to non decline plans
		
		if(cur_org_plan_name == "Decline"){
			
			def coveragePlan = plansJson.data.find {it.plan_name != "Decline" }
									
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)			
			updateCoverage(coveragePlan,benefit);
		}
	}else if(benefit.benefit_lookup_code == "medical" || benefit.benefit_lookup_code == "dental" 
	|| benefit.benefit_lookup_code == "vision" || benefit.benefit_lookup_code == "hcra"){
		if(cur_org_plan_name != "Decline"){			
			def coveragePlan = plansJson.data.find {it.plan_name == "Decline" }
			log.info("coverage level id = "+ coveragePlan.level_id)
			log.info("coverage plan id = "+ coveragePlan.plan_id)
			log.info("coverage plan name = "+ coveragePlan.plan_name)
			updateCoverage(coveragePlan,benefit);
		}
	}
}

def getBenefitPlans(def benefit, def plansJson){
	
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )				
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	plansJson = new JsonSlurper().parseText(plansResponse)

	return plansJson;
}

def getBenefitCoverage(def benefit,def coverageJson){
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	return coverageJson;
}

def updateCoverage(def coveragePlan, def benefit) {
			
		def updateCoverageReqMap = [:]
		def updateCoverageDataMap = [:]

		log.info("coveragePlan ="+coveragePlan)
		
		updateCoverageDataMap.put("org_plan_id",coveragePlan.plan_id)
		updateCoverageDataMap.put("coverage_level_id",coveragePlan.level_id)
		updateCoverageDataMap.put("dependent_coverages",[])
		updateCoverageDataMap.put("beneficiaries",[])
		if(benefit.benefit_class == "contribution" ){
			if(coveragePlan.waived == true ){
				updateCoverageDataMap.put("subscriber_amount", "0.0")
			} else {
				updateCoverageDataMap.put("subscriber_amount",coveragePlan.subscriber_min_amount )
			}
		}else if(benefit.benefit_class == "volume" &amp;&amp; coveragePlan.waived != true ){
			if(coveragePlan.increments != null){
				updateCoverageDataMap.put("increments","2.0" )
			}
		}

		log.info("updateCoverageDataMap ="+updateCoverageDataMap)
		
		updateCoverageReqMap.put("data",updateCoverageDataMap)
		def updateCoveragePayload = new JsonBuilder(updateCoverageReqMap).toPrettyString()
		
		log.info("updateCoveragePayload ="+updateCoveragePayload)
		
		def updateCoverageRequest = testRunner.testCase.getTestStepByName("PUT Benefit Coverage").getTestRequest()
		updateCoverageRequest.setRequestContent(updateCoveragePayload)
		
		//Set benefit id for PUT Benefit Coverage request.
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
		testRunner.runTestStepByName("PUT Benefit Coverage");
	
		def updateCoverageResponse = testRunner.testCase.testSteps["PUT Benefit Coverage"].testRequest.response.contentAsString

		//log.info("updateCoverageResponse ="+updateCoverageResponse)
		//def updateCoverageJson = new JsonSlurper().parseText(updateCoverageResponse)
	
		//log.info("updateCoverageJson = "+updateCoverageJson)
	}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" disabled="true" id="0011f48b-1cf7-4f18-9a8e-3fe7740a0dc6"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "org_plan_id": 183959,
        "coverage_level_id": 18,
        "dependent_coverages": [
            
        ],
        "beneficiaries": [
            
        ],
        "increments": "2.0"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="a943fc0a-cb6a-49a3-a43d-908d2fe4051b"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="0f390d68b084d79cf4980ece81a951ff"/>
  <con:entry key="benefitId" value="60813"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Company D Regression Tests" disabled="true" id="f5b71c83-765e-4f8b-8c65-173651fd8b13"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MMA Single Waive Benefits  Regression" searchProperties="true" id="396bdb3b-8ef3-456f-98c5-0871894cf539"><con:description>TestCase generated for REST Resource [Session Context] located at [/session/context]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="ce4cd6c4-4d51-4361-8f15-181740cc7f01"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "qatest01",
   "password": "password1"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="aadd517a-d1ab-43ec-a298-d068dba78228"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="867dc285-df5a-42b5-b6e8-2060ed878315"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Coverage", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="b5ca1638-d0f7-427d-9377-7613bead5740"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="bb89a5df-1a3b-4a85-ab12-1cc853fe58c9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="efb0bdcddc77c797e32107f9b1f873eb" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="2dabc438-aaa0-413b-a9c3-ebd6adebb3b4"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fa0f0a9f-7b5b-4d1f-997d-1204d07592c8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="efb0bdcddc77c797e32107f9b1f873eb" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="d359c13f-37fe-464f-b8c2-da14590f2971"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def updatedMap = ['data' : participant]
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()

log.info(updatedPayload)

def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="6292fe74-51bd-4581-9a93-ee1228640c1c"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "hire_date": "2014/06/01",
        "zip_code": "99999",
        "organization_code": "qa_test_company_d",
        "middle_name": "",
        "state": "PA",
        "ssn": "555-10-1000",
        "address_1": "123 Market St.",
        "address_2": "",
        "email2": "testuser@gmail.com",
        "city": "Test City",
        "participant_id": 8290064,
        "first_name": "Single Test 1",
        "email": "testuser@email.com",
        "organization_id": 2517,
        "work_phone": "",
        "last_name": "Qa Test 1",
        "gender": "M",
        "home_phone": "",
        "marital_status": "S",
        "subscriber_code": "88888"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="09f23ee7-4f3c-4ee2-9782-e32e70fab266"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="efb0bdcddc77c797e32107f9b1f873eb"/>
  <con:entry key="participantId" value="8290064"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="22de6cf7-d9a6-4099-85a2-fef3cf7d29b9"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f1ae6733-8928-4bc2-8260-97db3d52d852"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="efb0bdcddc77c797e32107f9b1f873eb"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Ensure No Dependents Exists" id="481e10e6-4f68-47af-9dbe-b932c9ce03b8"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent == null)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="a731c2cb-f9c2-4f1c-aeea-c3447e7d8c9c"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="7c2b7986-61fa-4ebd-a5a6-e017267de912"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="efb0bdcddc77c797e32107f9b1f873eb"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="773a5438-c9a1-4a8e-bd23-61f8dfdb36eb"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="b969b480-2701-4733-9a92-b3a8da265e7e"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="80f10f1b-8f6d-4e5e-9905-d871d423b7ff"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="efb0bdcddc77c797e32107f9b1f873eb"/>
  <con:entry key="benefitId" value="60769"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="7c6c7410-3840-4ff6-8aaf-a8344b4ed10e"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = json.data.find{it.benefit_class == "tier"}
def contributionBenefit = json.data.find{it.benefit_class == "contribution"}
def volumeBenefit = json.data.find{it.benefit_class == "volume"}

log.info("tierBenefit id="+tierBenefit.org_benefit_id)
log.info("contributionBenefit id="+contributionBenefit.org_benefit_id)
log.info("volumeBenefit id="+volumeBenefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", contributionBenefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", contributionBenefit.org_benefit_id.toString())

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="13009ec2-9091-4d02-b046-fc634fff3c4e"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="665c5b95-d68c-4bec-a5cd-0b862191ec66"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="efb0bdcddc77c797e32107f9b1f873eb"/>
  <con:entry key="benefitId" value="60775"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="4cc23a6c-83d2-4d10-a35a-ce53471927ef"><con:settings/><con:config><script>import groovy.json.* 
/*
//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)

*/</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="b22918ab-16e8-4f9a-a06c-a18a2eedc2d4"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="cf5fef4b-e619-487d-8b9e-1a67d9ae5bce"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [ ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="d12a5892-b4ff-4be8-a1c9-8905cd99d305"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="efb0bdcddc77c797e32107f9b1f873eb"/>
  <con:entry key="benefitId" value="60775"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare PUT Coverage Requests" id="218c3546-6959-4a2c-9314-079521b9d5b6"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from GET Benefits List.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def benefitsJson = new JsonSlurper().parseText(benefitsResponse)

def tierBenefit = benefitsJson.data.find{it.benefit_class == "tier"}
log.info("tierBenefit id="+tierBenefit.org_benefit_id)

for( benefit in benefitsJson.data ){

	log.info("benefit_id = "+benefit.org_benefit_id)
	
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("GET Benefit Coverage");
	
	//Parse the json response from GET Benefit Coverage.
	def getCoverageResponse = testRunner.testCase.testSteps["GET Benefit Coverage"].testRequest.response.contentAsString
	def coverageJson = new JsonSlurper().parseText(getCoverageResponse)
	
	def cur_coverage_plan_id = coverageJson.data.org_plan_id;
	
	log.info("plan id from GET coverage="+ coverageJson.data.org_plan_id)
	
	groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Plans");
	
	//Parse the json response from Benefit Plans.
	def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
	def plansJson = new JsonSlurper().parseText(plansResponse)
	
	def coveragePlan = plansJson.data.find {it.plan_id != cur_coverage_plan_id}
	if ( coveragePlan == null ) coveragePlan = plansJson.data.find {it.plan_id == cur_coverage_plan_id}
	
	log.info("coverage plan id = "+ coveragePlan.plan_id)
	log.info("coverage level id = "+ coveragePlan.level_id)
	
	def updateCoverageReqMap = [:]
	def updateCoverageDataMap = [:]
	
	updateCoverageDataMap.put("org_plan_id",coveragePlan.plan_id)
	updateCoverageDataMap.put("coverage_level_id",coveragePlan.level_id)
	updateCoverageDataMap.put("dependent_coverages",[])
	updateCoverageDataMap.put("beneficiaries",[])
	if(benefit.benefit_class == "contribution" ){
		if(coveragePlan.waived == true ){
			updateCoverageDataMap.put("subscriber_amount", "0.0")
		} else {
			updateCoverageDataMap.put("subscriber_amount",coveragePlan.subscriber_min_amount )
			log.info("inside else")
		}
	}
	if(benefit.benefit_class == "volume" &amp;&amp; coveragePlan.waived != true ){
		if(coveragePlan.increments != null){
			updateCoverageDataMap.put("increments","2.0" )
		}
	}
	updateCoverageReqMap.put("data",updateCoverageDataMap)
	def updateCoveragePayload = new JsonBuilder(updateCoverageReqMap).toPrettyString()
	
	log.info("updateCoveragePayload ="+updateCoveragePayload)
	
	def updateCoverageRequest = testRunner.testCase.getTestStepByName("PUT Benefit Coverage").getTestRequest()
	updateCoverageRequest.setRequestContent(updateCoveragePayload)
	
	//Set benefit id for PUT Benefit Coverage request.
	groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
	testRunner.runTestStepByName("PUT Benefit Coverage");

	def updateCoverageResponse = testRunner.testCase.testSteps["PUT Benefit Coverage"].testRequest.response.contentAsString
	//def updateCoverageJson = new JsonSlurper().parseText(updateCoverageResponse)
	//log.info("updateCoverageJson = "+updateCoverageJson)
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" disabled="true" id="8f1d89f0-fbf0-4c4f-ad5e-0688a1b0cefa"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "org_plan_id": 183880,
        "coverage_level_id": 18,
        "dependent_coverages": [
            
        ],
        "beneficiaries": [
            
        ],
        "increments": "2.0"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="3bca563e-d0df-40f5-8f1d-d8842486a2f9"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="efb0bdcddc77c797e32107f9b1f873eb"/>
  <con:entry key="benefitId" value="60775"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MMA Employee and Spouse Regression" searchProperties="true" id="0c464eef-4afb-4077-9aad-0cf9b564e4df"><con:description>TestCase generated for REST Resource [Session Context] located at [/session/context]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="2605635f-96c2-4198-8766-2d800f819faa"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "mqatest07",
   "password": "password1"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="04bd9f04-28a5-4d73-bb37-60a220c72695"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="832d742f-e2d3-47c1-b99b-d1cd06ca4670"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)

groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)

groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Dependent", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Inactivate Dependent", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Activate Dependnet", "mmatoken", json.data.mmatoken)

groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)

groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="27a54b51-41c7-42f0-a57d-0b62eaef6dac"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="01e5b715-8070-4a83-b3a6-bbdc6e6da27e"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="d7f60bb8c1f5c2f7a2ba947c4110e035" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="812c0193-eea0-4a14-a480-f3aefc9837d6"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="85934770-ae9f-4a50-a5bb-f5cbece6b0fc"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="d7f60bb8c1f5c2f7a2ba947c4110e035" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="285a714c-4e4f-4b28-979c-e08da0250ea7"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def updatedMap = ['data' : participant]
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()

log.info(updatedPayload)

def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="1b35d9f8-c1d3-48c6-a70f-94f640fb8480"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "hire_date": "2014/06/06",
        "zip_code": "19406",
        "organization_code": "qa_test_company_d",
        "middle_name": "",
        "state": "PA",
        "ssn": "555-10-1006",
        "address_1": "123 market st",
        "address_2": "",
        "email2": "testuser@gmail.com",
        "city": "test city",
        "participant_id": 8290120,
        "first_name": "married test7",
        "email": "testuser@email.com",
        "organization_id": 2517,
        "work_phone": "",
        "last_name": "qa test7",
        "gender": "M",
        "home_phone": "",
        "marital_status": "M",
        "subscriber_code": "9898"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9c45f550-02b0-424f-bfcd-720d7043be59"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="d7f60bb8c1f5c2f7a2ba947c4110e035"/>
  <con:entry key="participantId" value="8290120"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="244f6fa8-d4a3-4203-8c7b-e84c808d1670"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c5b9f5e9-66a6-45d8-b24d-0c825c14e1b4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Contains dependents" id="8aa742d0-a469-4c88-97ba-707843a9fcde"><con:configuration><token>dependents</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Contains Id" id="bb8b7fa1-dd4b-41f3-83aa-2518aad7664e"><con:configuration><token>id</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="d7f60bb8c1f5c2f7a2ba947c4110e035"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Ensure Dependents Exists" id="49872415-8190-47bb-80cc-01f70e74f08d"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
assert(dependent != null)</script></con:config></con:testStep><con:testStep type="groovy" name="Prepare Dependent Update" id="5fc9047b-ab2a-4a68-8b7e-ce80e6659b43"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
testRunner.runTestStepByName("Get Dependents");
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
updateDependentAddress(dependent)

def updatedDependentMap = ['data':dependent]
def updatedDependentPayload = new JsonBuilder(updatedDependentMap).toPrettyString()

log.info(updatedDependentPayload)

def updateDependentRequest = testRunner.testCase.getTestStepByName("Update Dependent").getTestRequest()
updateDependentRequest.setRequestContent(updatedDependentPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Update Dependent", "dependentid", dependent.id.toString())

def updateDependentAddress(def dependent) {
  def new_addresses = ["123 Main St.", "6773 Tabor Ave", "98863 Long Run Road", "36 Cherry St", "7624 Horizon Lane"]
  def index = new Random().nextInt(new_addresses.size())
  def address = new_addresses[index]

  dependent.address_1 = address
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Dependent" id="10fece7e-70dd-4dfe-8951-e615ea4ac03d"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents/{dependentId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Dependent" id="8d45d260-c40d-4bcd-914c-d018e4df94a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "lives_at_home": true,
        "zip_code": "19406",
        "coveragestatus": "active",
        "state": "PA",
        "ssn": "",
        "address_1": "98863 Long Run Road",
        "address_2": "",
        "country": "United States",
        "city": "test city",
        "id": 1925249,
        "first_name": "Child Test7",
        "relationship_code": "child",
        "last_name": "QA Test7",
        "birthdate": "2000/02/10",
        "gender": "M"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1923850</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="bf11dcd6-d1ed-4f4f-ae3d-366e857cfaa0"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="d7f60bb8c1f5c2f7a2ba947c4110e035"/>
  <con:entry key="dependentId" value="1925249"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Inactivate Dependent request" id="c5ebe915-8792-4cf7-8e7b-cbe320c1c058"><con:settings/><con:config><script> import groovy.json.* 

//Parse the json response from login.
testRunner.runTestStepByName("Get Dependents");
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def dependent = json.data.dependents.find { it.coveragestatus == "active" }
log.info("dependent id ="+ dependent.id)

//Set active dependent id for Inactive Dpendent request.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Inactivate Dependent", "dependentId", dependent.id.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Inactivate Dependent" id="6f50f671-b656-4415-9849-0f7fd55682e7"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents/{dependentId}/coveragestatus" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Inactivate Dependent" id="2a1e5f4d-594a-4460-a03b-da1626b0bc64" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"header": 
	{
		
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"status": "inactive"
	}
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c63a8f79-916b-4546-bd4f-d8feafb8a635"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="d7f60bb8c1f5c2f7a2ba947c4110e035"/>
  <con:entry key="dependentId" value="1925249"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Activate Dependent request" id="8bb08772-815e-46a3-9682-53da86975774"><con:settings/><con:config><script> import groovy.json.* 

//Parse the json response from login.
testRunner.runTestStepByName("Get Dependents");
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def inactive_dependent = json.data.inactive_dependents.find { it.coveragestatus == "inactive" }
log.info("inactive_dependent id ="+ inactive_dependent.id)

//Set inactive dependent id for Activate Dependent 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Activate Dependnet", "dependentId", inactive_dependent.id.toString())
</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Activate Dependnet" id="b5afe734-a863-4122-ae72-f9edda8d8128"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents/{dependentId}/coveragestatus" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Activate Dependnet" id="2a1e5f4d-594a-4460-a03b-da1626b0bc64" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"header": 
	{
		
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"status": "active"
	}
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="1d15089f-2c39-479c-ae65-87841cd7eb5b"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="d7f60bb8c1f5c2f7a2ba947c4110e035"/>
  <con:entry key="dependentId" value="1925249"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="723d7441-af2d-4d73-b330-ebcf97b57059"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="5cd8ee57-849a-433a-af38-0e4c9c071213"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Contains medical" id="5e1ac9a1-2a17-4e55-ac87-4ff25df39fb8"><con:configuration><token>medical</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Contains dental" id="72c6c2c3-65d4-468d-9cd5-79c7d527ca5d"><con:configuration><token>dental</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Contains vision" id="7989f558-861d-4da4-8dac-5a118145d184"><con:configuration><token>vision</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Contains hcra" id="53d3cd81-c324-4dac-bfe0-e7ede204a312"><con:configuration><token>hcra</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="d7f60bb8c1f5c2f7a2ba947c4110e035"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="8b27824d-d800-4eef-b964-eca8af80b1af"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="81e0cc2f-576a-4cdd-8012-6e1166589bcc"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="7a266779-89b4-47ee-b0cb-9e743b89b69e"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="d7f60bb8c1f5c2f7a2ba947c4110e035"/>
  <con:entry key="benefitId" value="60769"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="d13db903-1478-404a-b022-40d462256d0c"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="d805f6f1-3cb3-4b78-84c5-8140b1af6ec7"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/60769/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b9ab7190-6a41-457b-812f-fbc7bb43fd66"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="d7f60bb8c1f5c2f7a2ba947c4110e035"/>
  <con:entry key="benefitId" value="null"/>
  <con:entry key="participantId" value="0"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="a53573bf-d025-4980-9ac5-e3ea19c49362"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

log.info("benefit id = "+benefit.org_benefit_id)

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="993dee61-1adc-4fb2-b919-c0d320ba8d62"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="10cdc46e-319d-437e-a7b5-bdf58e839407"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [1924143]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="eb2aa239-b15c-4856-82c5-7cdedbf35286"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="d7f60bb8c1f5c2f7a2ba947c4110e035"/>
  <con:entry key="benefitId" value="null"/>
  <con:entry key="participantId" value="0"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare PUT Coverage Request" id="304764d4-1f3c-4a2e-81e2-8a1c722bf230"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(plansResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="API Tests" id="05224c6c-79c6-48bb-92b8-39204cbd8bbe"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Session TestCase" searchProperties="true" id="ca688f98-d35d-4eea-bd3d-f1b173f410f9"><con:description>TestCase generated for REST Resource [Session] located at [/session]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="b73a9420-49bb-4413-a460-9641dba9d1ee"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"username": "RegressionUser1",
	"password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8458cfb7-f466-415b-86aa-4379fa3b59d6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a206f35f-b815-40fe-a70b-029e19a3eff7" name="mmatoken exists"><con:configuration><path>$.data.mmatoken</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Schma Validation" disabled="true" id="57a576c4-dd10-4f1a-bad5-65bcdf49293d"><con:settings/><con:config><script>import com.mma.trion.common.json.util.ValidateJsonWithSchema
import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
log.info(response);
def schemaFile="D:\\GitC\\src\\main\\api\\Trion_Session.jsd";
//log.info( ValidateJsonWithSchema.isValid(schemaFile,response))
def result = ValidateJsonWithSchema.isValid(schemaFile,response)
log.info result

</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Session Failed TestCase" searchProperties="true" id="affa9682-c654-4645-9c6a-cb7f31871db7"><con:description>TestCase generated for REST Resource [Session] located at [/session]</con:description><con:settings/><con:testStep type="restrequest" name="Bad Username" id="eec68c16-877a-4a7f-99c6-729788bf4b58"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Bad Username" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "RegressionUserXXX",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9bb4746a-d52f-4cd6-98d6-919714368a25" name="Valid HTTP Status Codes"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Bad Password" id="14baa610-48c9-4a86-bab6-d390368672c8"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Bad Password" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "RegressionUser1",
   "password": "passwordXXX"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="153c8166-49ae-4b60-9b2a-6bc9eb69d71b" name="Valid HTTP Status Codes"><con:configuration><codes>401</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>4cc2cccc-b393-4baa-ae12-e6b9b723dc1e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Session Context TestCase" searchProperties="true" id="450c7cdb-f743-44e6-a23e-9ea0b7ad85f3"><con:description>TestCase generated for REST Resource [Session Context] located at [/session/context]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="05e9b08a-31c4-4a3f-8cdb-1658ffa8ede7"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"username": "RegressionUser1",
	"password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="8fdff06e-604e-4713-9c09-49030122cb7e"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="d03e5090-acc3-4d26-b3a2-cd092b4064f2"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="139a218d-608e-4c9d-aeb4-f59e210edc3a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="59a42b0dde8deac86cde1ed2bcef1e69" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>89379538-e8b9-4b8a-8b9e-04f2e5c523b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>11ed88f0-697a-4b21-8d7d-1a0fb20548ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9b16f2f-41b0-4dfa-a676-d84fca357a5b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Participants TestCase" searchProperties="true" id="5e970173-0c23-4eba-9fc2-bc41c26da67b"><con:description>TestCase generated for REST Resource [Participants] located at [/participants]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="7099979d-320b-4eef-b81f-2f0e1854c0e5"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"username": "RegressionUser1",
	"password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="72ecfeb0-ea6c-423d-905e-7f5fa212b851"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)




//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="955bd845-697e-4d54-aa89-8ad60d2f0c4b"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="59a42b0dde8deac86cde1ed2bcef1e69" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Participant" id="dafea4fc-6bc4-4684-b733-e628061c404b"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b635a14d-bb93-4110-b723-c85c90ed1f6e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="59a42b0dde8deac86cde1ed2bcef1e69"/>
  <con:entry key="participantId" value="${Get Session Context#ResponseAsXml#declare namespace ns1='http://localhost/api/session/context'; //ns1:Response[1]/ns1:data[1]/ns1:participant_id[1]}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>83389cfd-7ad2-4893-8d81-96d7831e2e7a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27188200-4418-4551-b290-bfceb80cfad6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6675ada6-f0ec-40a5-a161-1ea3ca2576e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>21c68976-18b4-4350-a08b-25880acd2250</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Participant Id TestCase" searchProperties="true" id="5e99e1f4-2356-4b7b-8edf-36cf63a374f8"><con:description>TestCase generated for REST Resource [Participant Id] located at [/participants/{participantId}]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="15c01446-073b-45db-88f1-acc6fbd04f33"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "testnew2",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="2e08d12d-4bd9-440d-8fac-cedb14baaf56"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse1 = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse1)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Existing Participant", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Participant", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="606a0eda-eb59-4ad2-80f0-87a9b7c4664a"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="2f60a1a34a46f7137e2a48b1625d1fb0" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get Existing Participant" id="7f4d5e95-f8d1-43dc-8dfb-239c0b8ce1a4"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Existing Participant" id="352c869d-5e5a-4b0d-b87a-deb79955660c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="2f60a1a34a46f7137e2a48b1625d1fb0"/>
  <con:entry key="participantId" value="${Get Session Context#ResponseAsXml#declare namespace ns1='http://localhost/api/session/context'; //ns1:Response[1]/ns1:data[1]/ns1:participant_id[1]}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="f0b3dbce-0f46-4e92-acaa-556f581a3a1f"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Existing Participant"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

def participant = json.data

def updatedMap = ['data' : participant]
def updatedPayload = new JsonBuilder(updatedMap).toPrettyString()

log.info(updatedPayload)

def updateRequest = testRunner.testCase.getTestStepByName("Update Participant").getTestRequest()
updateRequest.setRequestContent(updatedPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def participant_id = participant.participant_id.toString() ?: "0"
groovyUtils.setPropertyValue("Update Participant", "participantid", participant_id)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Participant" id="aa0127e7-dde3-497b-8cd6-6f476a98e313"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Participant" id="04181436-664c-464c-bf75-734dcdb745b9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "current_salary": "0.0",
        "employment_level": "",
        "udef_20": "",
        "location": "",
        "udef_21": "",
        "organization_code": "qa_regression",
        "udef_22": "",
        "ssn": "444-55-6666",
        "preferred_locale": "",
        "bank_routing_number": "",
        "city": "King Of Prussia",
        "union_code": "",
        "is_voluntary_termination": false,
        "first_name": "Single",
        "vip": false,
        "seniority_date": "",
        "udef_24": "",
        "udef_23": "",
        "gender": "M",
        "original_effective_date": "",
        "udef_26": "",
        "highly_compensated": false,
        "udef_25": "",
        "marital_status": "S",
        "udef_28": "",
        "udef_27": "",
        "subscriber_code": "",
        "udef_29": "",
        "benefits_start_date": "2014/12/01",
        "original_hire_date": "2014/09/01",
        "employee_number": "",
        "udef_10": "",
        "udef_11": "",
        "middle_name": "",
        "address_1": "123 Candlebrook rd",
        "address_2": "",
        "business_title": "",
        "country": "United States",
        "ee_code": "",
        "hours_per_week": 0,
        "bank_account_type": "",
        "email": "",
        "spoken_language": "",
        "udef_15": "",
        "work_phone": "",
        "last_name": "NewHire",
        "owner": false,
        "status_ends_on_expected": "",
        "udef_14": "",
        "udef_13": "",
        "udef_12": "",
        "udef_19": "",
        "udef_18": "",
        "udef_17": "",
        "udef_16": "",
        "is_smoker": "",
        "zip_code": "19406",
        "state": "PA",
        "bank_account_number": "",
        "udef_1": "",
        "participant_id": 8291077,
        "udef_2": "",
        "org_class": "",
        "division": "",
        "udef_5": "",
        "udef_6": "",
        "udef_3": "",
        "udef_4": "",
        "udef_9": "",
        "birthdate": "1975/11/02",
        "udef_7": "",
        "written_language": "",
        "udef_8": "",
        "cell_phone": "",
        "hire_date": "2014/12/01",
        "shareholder": false,
        "termination_date": "",
        "udef_30": "",
        "email2": "",
        "name_suffix": "",
        "pay_rate": "0.0",
        "organization_id": 2523,
        "home_phone": "",
        "employee_type": ""
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ff70411b-c07e-49ac-9f9e-93f507141e5d" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="2f60a1a34a46f7137e2a48b1625d1fb0"/>
  <con:entry key="participantId" value="8291077"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>c8ba7371-fbd2-488a-8a23-e9d1935ec32f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Dependents TestCase" searchProperties="true" id="7ce6130b-2fc8-461f-9098-3c61f36eaa4c"><con:description>TestCase generated for REST Resource [Dependents] located at [/participants/{participantId}/dependents]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="26a61a87-5501-4707-a3f3-8d5f014ba0f7"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "RegressionUser1",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3110e541-6f6c-416b-90c5-a048ece87eb8" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="fac7ee31-353a-4bb5-818b-af88ba838771"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Create Dependent", "mmatoken", json.data.mmatoken)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="77e0932b-eba2-48f2-9754-f809daf4b731"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e2cf0247-7b65-4b47-887b-c7a679c430a5" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="${Get Session Token#ResponseAsXml#declare namespace ns1='http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session'; //ns1:Response[1]/ns1:data[1]/ns1:mmatoken[1]}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Participant ID" id="2abeb22d-13fe-4057-a52b-0191468528b8"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)
log.info(json.data.participant_id)
//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Dependents", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("Create Dependent", "participantId", ""+json.data.participant_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="95e84c27-0808-42dd-aaa6-dcbd34e3c62c"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="29407d98-0a5c-4247-8068-7be886d587aa" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="59a42b0dde8deac86cde1ed2bcef1e69"/>
  <con:entry key="participantId" value="8287304"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create Dependent" disabled="true" id="4d93f287-0109-4803-9dc8-c3f3e67fd7bb"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Dependent" id="edda3517-d49d-4080-9513-fe511cfead4f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{"data": {
   "ssn": "${(int)(Math.random()*999)}-${(int)(Math.random()*99)}-${(int)(Math.random()*9999)}",
   "first_name": "Walter1",
   "middle_name": "P.",
   "last_name": "White2",
   "birthdate": "${=(int)(Math.random()*20)+1993}/${=(int)(Math.random()*12)+1}/${=(int)(Math.random()*27)+1}",
   "gender": "M",
   "relationship_code": "child",
   "qmcso": false,
   "lives_at_home": true,
   "address_1": "14111 Ocean Ave",
   "address_2": "Apt #1",
   "city": "Brooklyn",
   "state": "NY",
   "zip_code": "11230",
   "country": "USA",
   "is_smoker": "NO",
   "termination_date": null
}}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="808f11b8-eede-48eb-9cb0-36f4c6f57b6f" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="59a42b0dde8deac86cde1ed2bcef1e69"/>
  <con:entry key="participantId" value="8287304"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>40608d9d-7f21-4a62-a370-c29de8def5c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c9ed3710-5492-46d1-9c48-63f21f876fd8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>420053c1-65bf-4e3d-910c-9065f842719c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>92b9ede3-e39e-48d1-abf8-32e75bfa24fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Plans TestCase" searchProperties="true" id="bb4c08e9-871e-4d62-8e7b-82a134cdd4c2"><con:description>TestCase generated for REST Resource [Plans] located at [/participants/{participantId}/benefits/{benefitId}/plans]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="fc5ac8c8-e406-4613-ac05-25deecdb3817"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "testnew2",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="126bcbb7-1445-4741-ba22-e6c4d626aa2a"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="b9f2ebc2-6297-46af-ac47-d8e793066a6d"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("PUT Benefit Plans", "mmatoken", json.data.mmatoken)


</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="a5915e8a-45ff-40e7-b520-6880898629c3"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="139a218d-608e-4c9d-aeb4-f59e210edc3a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="2f60a1a34a46f7137e2a48b1625d1fb0" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Participant ID" id="f3459a5b-1bd2-4f43-982f-d9be713e344f"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)
log.info(json.data.participant_id)
log.info(json.data.enrollment_context.enrollment_type_lookup_code[1])
//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//groovyUtils.setPropertyValue("Get Dependents", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("PUT Benefit Plans", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("GET Benefits List", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("GET Benefits List", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[1])
groovyUtils.setPropertyValue("PUT Benefit Plans", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[1])


//groovyUtils.setPropertyValue("GET Benefit By Id", "participantId", ""+json.data.participant_id)
//groovyUtils.setPropertyValue("GET Benefit By Id", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[0])</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="5a32c6de-07b8-4ef4-a289-26c61d58c093"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="19bb72c1-6ca7-4207-9c32-e593447f4a62"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="2f60a1a34a46f7137e2a48b1625d1fb0"/>
  <con:entry key="participantId" value="8291077"/>
  <con:entry key="enrollmentType" value="open"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit plans Request" id="256bea09-6133-43d8-ae07-9b0d1616d0c3"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="2863c989-b074-426a-a85a-4cf370f21df9"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="c0b55fe9-2b20-40f0-a4fe-1e69ee25f3e4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [
            1923864,
            1923915,
            1923774
        ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="936596e0-90be-4d36-84f9-daee6c9d6f15"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="2f60a1a34a46f7137e2a48b1625d1fb0"/>
  <con:entry key="benefitId" value="60895"/>
  <con:entry key="participantId" value="8291077"/>
  <con:entry key="enrollmentType" value="open"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Benefits TestCase" searchProperties="true" id="8eff8d69-3e6d-4603-8170-dae745d483c8"><con:description>TestCase generated for REST Resource [Benefits] located at [/participants/{participantId}/benefits]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="538d5150-9911-497b-b01a-2ca74cc62563"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "testnew2",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="dfa9f468-31d8-4dc7-9393-d7be19768b99"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Benefits list", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="7051b0da-72b4-4936-a4fc-7701ef49fe89"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="2f60a1a34a46f7137e2a48b1625d1fb0" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Participant ID" id="b59a430a-fd12-4a18-a6eb-ba3a7e4b847b"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)
log.info(json.data.participant_id)
log.info(json.data.enrollment_context.enrollment_type_lookup_code[1])
//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//groovyUtils.setPropertyValue("Get Dependents", "participantId", ""+json.data.participant_id)
//groovyUtils.setPropertyValue("Create Dependent", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("Get Benefits list", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("Get Benefits list", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[1])</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Benefits list" id="0aea4939-3b46-426f-8118-0c1540a0c13f"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Benefits list" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="9951d32c-605d-407d-acba-1ee729c67d0c"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="2f60a1a34a46f7137e2a48b1625d1fb0"/>
  <con:entry key="participantId" value="8291077"/>
  <con:entry key="enrollmentType" value="open"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>4172d00a-476a-4736-a807-458817ca681e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Dependent Id TestCase" searchProperties="true" id="df0402ee-731b-4a3e-8e46-a220ff85f34d"><con:description>TestCase generated for REST Resource [Dependent Id] located at [/participants/{participantId}/dependents/{dependentId}]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="69753389-af3b-446c-86af-726c2e5bde32"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "RegressionUser1",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="474f9f42-2c4f-4f10-9689-4117661a769f"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Dependents", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Update Dependent", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="57aa596a-ae66-45ad-9343-78f8ea1c20b5"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="59a42b0dde8deac86cde1ed2bcef1e69" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Participant ID" id="f35e3875-065c-438f-afcb-6826874bd861"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)
log.info(json.data.participant_id)
//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Dependents", "participantId", json.data.participant_id.toString())
groovyUtils.setPropertyValue("Update Dependent", "participantId", json.data.participant_id.toString())</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Dependents" id="d77581d1-1981-4c4d-8f8e-b4fe92171cf6"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dependents" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="59a42b0dde8deac86cde1ed2bcef1e69"/>
  <con:entry key="participantId" value="8287304"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Dependent Update" id="f6646c14-f58e-4a41-ac4d-055ca4d286a7"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dependents"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)

//def dependent = json.data.dependents.find { it.coveragestatus == "active" }
def dependent = json.data.find { it.coveragestatus == "active" }
log.info dependent
updateDependentAddress(dependent)

def updatedDependentMap = ['data':dependent]
def updatedDependentPayload = new JsonBuilder(updatedDependentMap).toPrettyString()

log.info(updatedDependentPayload)

def updateDependentRequest = testRunner.testCase.getTestStepByName("Update Dependent").getTestRequest()
updateDependentRequest.setRequestContent(updatedDependentPayload)

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Update Dependent", "dependentid", dependent.id.toString())

def updateDependentAddress(def dependent) {
  def new_addresses = ["123 Main St.", "6773 Tabor Ave", "98863 Long Run Road", "36 Cherry St", "7624 Horizon Lane"]
  def index = new Random().nextInt(new_addresses.size())
  def address = new_addresses[index]

  dependent.address_1 = address
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Update Dependent" id="74657f87-b96d-4fc0-8398-be7ce7241f8e"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents/{dependentId}" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update Dependent" id="8d45d260-c40d-4bcd-914c-d018e4df94a1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "is_smoker": "NO",
        "lives_at_home": true,
        "zip_code": "88888",
        "coveragestatus": "active",
        "middle_name": "P.",
        "state": "PA",
        "ssn": "XXX-XX-1212",
        "address_1": "6773 Tabor Ave",
        "address_2": "Apt #3",
        "city": "Valley Forge",
        "id": 1923864,
        "first_name": "Antonio",
        "relationship_code": "child",
        "verified": false,
        "last_name": "Foller",
        "birthdate": "1998/08/01",
        "gender": "M"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1923850</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="232572fe-b065-4527-a681-1d2c76455352"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="59a42b0dde8deac86cde1ed2bcef1e69"/>
  <con:entry key="dependentId" value="1923864"/>
  <con:entry key="participantId" value="8287304"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>d4c63a9c-ed7d-4b66-9684-23901751e1cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a4470382-a2ec-471d-be77-bd4dbc8ee0bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ffc9dab7-5508-43ad-809e-691d5701abf3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Coverage Status TestCase" searchProperties="true" id="e697969e-f136-4ee0-b316-ba4cf52d4668"><con:description>TestCase generated for REST Resource [Coverage Status] located at [/participants/{participantId}/dependents/{dependentId}/coveragestatus]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="957834fe-1aee-4b6f-825c-e9724bfa35ac"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "SomaNewhire1",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="f90c327b-e18a-4978-a27f-ed381a5a389b"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Get Dep Data", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Assert Inactive status", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Assert Active status", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Activate Dependent PUT", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("Inactivate Dependent PUT", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="08ae9c8d-840a-4e5b-a251-132f8872112e"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="143eb68707e920a5270b016206a012a8" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Update Participant" id="13e3560a-f253-4340-a725-18f4948ae842"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)
log.info(json.data.participant_id)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//groovyUtils.setPropertyValue("Get Dependents", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("Get Dep Data", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("Inactivate Dependent PUT", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("Activate Dependent PUT", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("Inactivate Dependent PUT", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[1])
groovyUtils.setPropertyValue("Activate Dependent PUT", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[1])


</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Dep Data" id="62ea556e-71ae-4a95-a4b8-281bdd10a19d"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Dep Data" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="143eb68707e920a5270b016206a012a8"/>
  <con:entry key="participantId" value="8291274"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Inactivate requests" id="d2364942-4689-4068-b84f-d8c3c19081b2"><con:settings/><con:config><script> import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Get Dep Data"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)
//def dependent = json.data.dependents.find { it.coveragestatus == "active" }
//def dependent = json.data.find { it.coveragestatus == "inactive" }
log.info json.data.id[0]
log.info json.data.coveragestatus
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Inactivate Dependent PUT", "dependentId", json.data.id[0].toString())
/*
//def inactive_dependent = json.data.inactive_dependents.find { it.coveragestatus == "inactive" }
def inactive_dependent = json.data.find { it.coveragestatus == "inactive" }
log.info inactive_dependent

log.info("dependent id ="+ dependent.id)
log.info("inactive_dependent id ="+ inactive_dependent.id)

//Set inactive dependent id for Activate Dependent and active dependent id for Inactive Dpendent requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Activate Dependnet PUT", "dependentId", inactive_dependent.id.toString())
groovyUtils.setPropertyValue("Inactivate Dependent PUT", "dependentId", dependent.id.toString())
*/</script></con:config></con:testStep><con:testStep type="restrequest" name="Inactivate Dependent PUT" id="aa116620-9046-4af3-a79e-009d4e53edde"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents/{dependentId}/coveragestatus" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Inactivate Dependent PUT" id="2a1e5f4d-594a-4460-a03b-da1626b0bc64" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "header": {},
    "metadata": {},
    "data": {
        "status": "inactive"
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b0dbdda4-f8f4-4601-a94f-637b151aaa2e"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="143eb68707e920a5270b016206a012a8"/>
  <con:entry key="dependentId" value="1926468"/>
  <con:entry key="participantId" value="8291274"/>
  <con:entry key="enrollmentType" value="open"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Assert Inactive status" id="9d149321-a609-4555-8516-0b679ea5016b"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Assert Inactive status" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="143eb68707e920a5270b016206a012a8"/>
  <con:entry key="participantId" value="8291274"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare activate requests" id="ed797578-0121-4703-af05-32d37ba94c7c"><con:settings/><con:config><script> import groovy.json.* 

//Parse the json response from login.
def response = testRunner.testCase.testSteps["Assert Inactive status"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(response)
//def dependent = json.data.dependents.find { it.coveragestatus == "active" }
//def dependent = json.data.find { it.coveragestatus == "inactive" }
log.info json.data.id[0]
log.info json.data.coveragestatus
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Activate Dependent PUT", "dependentId", json.data.id[0].toString())
/*
//def inactive_dependent = json.data.inactive_dependents.find { it.coveragestatus == "inactive" }
def inactive_dependent = json.data.find { it.coveragestatus == "inactive" }
log.info inactive_dependent

log.info("dependent id ="+ dependent.id)
log.info("inactive_dependent id ="+ inactive_dependent.id)

//Set inactive dependent id for Activate Dependent and active dependent id for Inactive Dpendent requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Activate Dependnet PUT", "dependentId", inactive_dependent.id.toString())
groovyUtils.setPropertyValue("Inactivate Dependent PUT", "dependentId", dependent.id.toString())
*/</script></con:config></con:testStep><con:testStep type="restrequest" name="Activate Dependent PUT" id="2b26e7bb-d458-4323-a3f1-da0452712698"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents/{dependentId}/coveragestatus" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Activate Dependent PUT" id="2a1e5f4d-594a-4460-a03b-da1626b0bc64" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
	"header": 
	{
		
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"status": "active"
	}
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/dependents/1921733/coveragestatus</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fe0d980f-334c-40ee-9dce-f3bc8abf3456"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="143eb68707e920a5270b016206a012a8"/>
  <con:entry key="dependentId" value="1926468"/>
  <con:entry key="participantId" value="8291274"/>
  <con:entry key="enrollmentType" value="open"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>dependentId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Assert Active status" id="f4d5a374-40ec-4277-a93d-b12ac5ec3007"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/dependents" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Assert Active status" id="b78120aa-3a88-4f25-8c05-c168907c2b85" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/participants/0/dependents</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="9619be75-19c4-43dc-957a-344f84456f48"><con:configuration/></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="143eb68707e920a5270b016206a012a8"/>
  <con:entry key="participantId" value="8291274"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>0ca5dace-c044-42e9-a7f1-6518f32e11a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>50dc81f8-b461-4383-8779-53646d0a3c27</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0be9d1b4-216e-4c20-8562-3676f589f8bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Benefit Id TestCase" searchProperties="true" id="6f05e704-2588-4e14-9432-4fa6648ca389"><con:description>TestCase generated for REST Resource [Benefit Id] located at [/participants/{participantId}/benefits/{benefitId}]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="86d586f4-1c2e-4828-b324-11f62b90f658"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "testnew2",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="162913f5-2c6b-47fb-b317-43192e468348"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="88b36b97-5e5a-4d7d-8b75-9ceaaaae6b75"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefits List", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit By Id", "mmatoken", json.data.mmatoken)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="3ba7db2f-31c9-4439-90d2-ee9c18b30ce1"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e2cf0247-7b65-4b47-887b-c7a679c430a5" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="2f60a1a34a46f7137e2a48b1625d1fb0" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Participant ID" id="4487b1f9-9335-44ec-b888-d2056115de09"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)
log.info(json.data.participant_id)
log.info(json.data.enrollment_context.enrollment_type_lookup_code[1])
//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//groovyUtils.setPropertyValue("Get Dependents", "participantId", ""+json.data.participant_id)
//groovyUtils.setPropertyValue("Create Dependent", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("GET Benefits List", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("GET Benefit By Id", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("GET Benefits List", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[1])
groovyUtils.setPropertyValue("GET Benefit By Id", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[1])</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="55daffb4-e398-4e93-8f27-279c30f49647"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c2458dfd-8825-4c3f-b1bb-399ef371dc37"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="2f60a1a34a46f7137e2a48b1625d1fb0"/>
  <con:entry key="participantId" value="8291077"/>
  <con:entry key="enrollmentType" value="open"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit By Id request" id="f781e2c5-fea7-40fb-93f4-7e4c9428c6a6"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit By Id", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit By Id" id="f7e1615f-8895-4500-ba36-ebf9573b5eec"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit By Id" id="306c8e1c-938a-43fc-9c02-3152f925caea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="19db3f0f-5a1f-4cc4-a70b-8747b656e44d"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="2f60a1a34a46f7137e2a48b1625d1fb0"/>
  <con:entry key="benefitId" value="60895"/>
  <con:entry key="participantId" value="8291077"/>
  <con:entry key="enrollmentType" value="open"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Coverage TestCase" searchProperties="true" disabled="true" id="44c1f6e8-8fe9-4d9a-b7d6-bbcb9860f374"><con:description>TestCase generated for REST Resource [Coverage] located at [/participants/{participantId}/benefits/{benefitId}/coverage]</con:description><con:settings/><con:testStep type="restrequest" name="Get Session Token" id="7ccd1ad9-93ad-47c5-ae26-4aebe00c6966"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session" methodName="post" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Token" id="be68c8a1-551f-4245-a396-880ec3353628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "QASingle2",
   "password": "password2"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Retrieve MMAToken" id="f2b1109b-53cb-4d9b-be8b-baa22f9584da"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Token"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)
groovyUtils.setPropertyValue("GET Benefit Coverage", "mmatoken", json.data.mmatoken)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="ab89dd2c-1e5c-42ab-9951-bf0f1e50b3c4"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="7ff109076a705f8c44317e3a37ad81a3" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Participant ID" id="f93e8280-0e2c-47a1-ab5e-74e1ea3dea74"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["Get Session Context"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)
log.info(json.data.participant_id)
log.info(json.data.enrollment_context.enrollment_type_lookup_code[1])
//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//groovyUtils.setPropertyValue("Get Dependents", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("GET Benefit Coverage", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("GET Benefits List", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("PUT Benefit Plans", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("PUT Benefit Coverage", "participantId", ""+json.data.participant_id)
groovyUtils.setPropertyValue("GET Benefits List", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[1])
groovyUtils.setPropertyValue("GET Benefit Coverage", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[1])
groovyUtils.setPropertyValue("PUT Benefit Plans", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[1])
groovyUtils.setPropertyValue("PUT Benefit Coverage", "enrollmentType", ""+json.data.enrollment_context.enrollment_type_lookup_code[1])</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefits List" id="b171a5ab-ab71-41b6-86ea-78371c13e44e"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefits List" id="720f5788-b5fb-4fa5-9950-80f799d45eab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="c2458dfd-8825-4c3f-b1bb-399ef371dc37"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="44680820550b6d3e74912054bf8caf96"/>
  <con:entry key="participantId" value="8290797"/>
  <con:entry key="enrollmentType" value="open"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare Benefit Coverage requests" id="eaaf8e78-ab67-498c-bbbb-30b6a3ee6ffc"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def benefitsResponse = testRunner.testCase.testSteps["GET Benefits List"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(benefitsResponse)

def benefit = json.data[0]
log.info benefit.org_benefit_id

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET Benefit Coverage" id="24fc3529-c7a9-4028-a5a8-11635208bfe6"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET Benefit Coverage" id="ce3df572-16ae-4fcc-979b-da561c468f9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/8290797/benefits/60809/coverage</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="7ff109076a705f8c44317e3a37ad81a3"/>
  <con:entry key="benefitId" value="60895"/>
  <con:entry key="participantId" value="8290797"/>
  <con:entry key="enrollmentType" value="open"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Plans" id="4c3cddad-84bb-4574-88d2-206134131f18"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/plans" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Plans" mediaType="application/json" postQueryString="false" id="c0b55fe9-2b20-40f0-a4fe-1e69ee25f3e4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {
        "dependent_ids": [
            1923864,
            1923915,
            1923774
        ]
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/58736/plans</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="936596e0-90be-4d36-84f9-daee6c9d6f15"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="c3cbf3c8aac85c8f4010f4d00d129719"/>
  <con:entry key="benefitId" value="60895"/>
  <con:entry key="participantId" value="8290797"/>
  <con:entry key="enrollmentType" value="open"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Prepare PUT Coverage Request" id="9d87b559-2ad4-4613-a981-e055ee9bb2a0"><con:settings/><con:config><script>import groovy.json.* 

//Parse the json response from login.
def plansResponse = testRunner.testCase.testSteps["PUT Benefit Plans"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(plansResponse)

def benefit = json.data[0]

//Set benefit id for GET Benefit by ID requests.
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("GET Benefit Coverage", "benefitId", benefit.org_benefit_id.toString())
groovyUtils.setPropertyValue("PUT Benefit Plans", "benefitId", benefit.org_benefit_id.toString())

log.info("org_benefit_id = "+ benefit.org_benefit_id)</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT Benefit Coverage" id="e359a3ae-499d-4578-bccb-d4e8c08d83be"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/participants/{participantId}/benefits/{benefitId}/coverage" methodName="put" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT Benefit Coverage" id="c425b513-5be9-453f-aee4-02d83b2e03af" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
    "data": {

        "coverage_level_id": 9,
        "org_plan_id": 184109,
        "beneficiaries": [],
        "dependent_coverages": []
    }
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/participants/0/benefits/0/coverage</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="84c55591-4eb9-47b5-8642-8be2e2236aa1"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mmatoken" value="a4282f0d93895a8a359cbf7de70505f7"/>
  <con:entry key="benefitId" value="60895"/>
  <con:entry key="participantId" value="8290797"/>
  <con:entry key="enrollmentType" value="open"/>
</con:parameters><con:parameterOrder><con:entry>participantId</con:entry><con:entry>benefitId</con:entry><con:entry>mmatoken</con:entry><con:entry>enrollmentType</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="181a64c8-9c6e-4e13-a581-b76856e38fad" name="DataDriven"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2391ef22-7d8e-4e34-9a3a-0b92ed53e425" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LoginTest" searchProperties="true"><con:settings/><con:testStep type="datasource" name="DataSource1" id="686fa711-97fd-4d91-98e0-cdbb78e75b41"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>TestData.xlsx</file><worksheet>Login</worksheet><cell>A2</cell><ignoreEmpty>false</ignoreEmpty></con:configuration></con:dataSource><con:preload>false</con:preload><con:property>Username</con:property><con:property>Password</con:property><con:startRow/><con:endRow/><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>true</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="restrequest" name="GetSessionToken" id="65ded5c1-ec12-401a-8eb4-1cf612cb292a"><con:settings/><con:config service="MMA MarketLink API" methodName="post" resourcePath="/api/session" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetSessionToken" id="07b93f29-e8e6-4ca5-b81a-082d08f52ac2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request>{
   "username": "${DataSource1#Username}",
   "password": "${DataSource1#Password}"
}</con:request><con:originalUri>http://ec2-107-21-95-133.compute-1.amazonaws.com/api/session</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1d6e6691-d032-402b-8672-b65584d403f3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Copy of Retrieve MMAToken" id="909b7e20-4049-442d-972f-bb32a14ccc75"><con:settings/><con:config><script>import groovy.json.JsonSlurper 

//Parse the json response from login.
def loginResponse = testRunner.testCase.testSteps["GetSessionToken"].testRequest.response.contentAsString
def json = new JsonSlurper().parseText(loginResponse)

//Set mmatoken on ALL secured requests
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
groovyUtils.setPropertyValue("Get Session Context", "mmatoken", json.data.mmatoken)</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Session Context" id="e77653c5-de60-4e2e-8245-2b4d974db416"><con:settings/><con:config service="MMA MarketLink API" resourcePath="/api/session/context" methodName="get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Session Context" id="2aa547d6-28ee-4371-9820-c1381a992917" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://ec2-107-21-95-133.compute-1.amazonaws.com:8089</con:endpoint><con:request/><con:originalUri>http://localhost/api/session/context</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="139a218d-608e-4c9d-aeb4-f59e210edc3a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mmatoken" value="402c51c1fb7207f4eb418c55f7f48419" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="31ae8f02-c107-4df6-b565-8aa252acfeaa"><con:settings/><con:config><dataSourceStep>DataSource1</dataSourceStep><targetStep>GetSessionToken</targetStep></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>686fa711-97fd-4d91-98e0-cdbb78e75b41</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="7c7ce02c-5def-4869-aff4-fdb2f0a15aca" name="E2E Tests"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:properties/><con:reportParameters/></con:testSuite><con:restMockService id="ddbca642-bd04-49ef-a1b7-fed2a22a2786" port="8080" path="/" host="Porter" name="MMA MarketLink API MockService"><con:settings/><con:properties/><con:restMockAction name="/api/session" method="POST" resourcePath="/api/session" id="ff0bfea2-1e79-4a21-8f2d-2d2db83ddc0b"><con:settings/><con:defaultResponse>Response 200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 200" id="b37852a6-8b80-450a-a960-2a5bfb258ad9" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
	"header": 
	{
		"httpstatus": 200
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"mmatoken": "7b22f2b631acd4c234678229adc3b608",
		"expires": "2014-08-04T23:39:01Z"
	}
}</con:responseContent></con:response><con:response name="Response 401" id="dfa4d59b-6829-4084-8c18-1be04001fdfe" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
  "header": {"date": "2014-07-228T01:30:00.000", "code": "10010", "source_system": "MMA Exchange", 
    "instance": "dev-web-01", "version": "0.1.3" },
  "data": {"status": "401", "severity": "Fatal", "cause": "authenticateUser", 
    "message": "Authentication Failed.  See system log for additional information.", 
    "details": "n/a.  Details suppressed for security reasons.", 
    "friendlyMessage": "Authentication Failed."
  }
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/session/context" method="GET" resourcePath="/api/session/context" id="ef5e87b4-8e22-414e-b559-006e4031d7aa"><con:settings/><con:defaultResponse>Response 200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 200" id="d36f79e8-ee2e-48d0-9c56-01b0e0367c66" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
  "header": {
  	"httpstatus": 200, 
  	"error_code": "", 
  	"error_message": ""
  },  
  "metadata": {},
  "data": {
    "organization_id": 12345,
  	"vendor_id": 12345,
    "participant_id": 12345,
  	"enrollment_context": [
  	  {
        "enrollment_type_lookup_code": "initial",
        "org_plan_year_id": 145,
        "plan_year_starts_on": "2014/01/01",
        "plan_year_ends_on": "2014/12/31",
        "enrollment_starts_on": "2014/05/03",
        "enrollment_ends_on": "2014/06/02"
	  }
  	],
  	"custom_text": [
      {
        "key": "DASHBOARD_PAGE_TEXT",
        "value": "Welcome to the benefits management system for Wawa.com.  Reminder: Open enrollment closes on October 31st."
      },
      {
        "key": "WELCOME_PAGE_TEXT",
        "value": "Welcome to the Wawa enrollment workflow for 2014!"
      }
  	]
  }
}</con:responseContent></con:response><con:response name="Response 404" id="e43f2668-d446-414f-b2c3-4b688846520d" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
  "header": {
    "httpstatus": 404, 
    "error_code": "10020", 
    "error_message": "Sorry, you session could not be retrieved at this time."
  },  
  "metadata": {},
  "data": {}
}
</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/participants" method="GET" resourcePath="/api/participants" id="5cb32c1f-adb1-43c8-9c37-614bb564b634"><con:settings/><con:defaultResponse>Response 200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 200" id="998b8740-0426-4fe7-863a-796dc185a321" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
	"header": 
	{
		"httpstatus": 200
	},

	"metadata": 
	{
		"participant_id": 
		{
			"update": true,
			"required": false,
			"caption": "Participant Id",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)"
		},

		"address_1": 
		{
			"update": true,
			"required": false,
			"caption": "Address 1",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)"
		},

		"address_2": 
		{
			"update": true,
			"required": false,
			"caption": "Address 2",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)"
		},

		"bank_account_number": 
		{
			"update": false,
			"required": false,
			"caption": "Bank Account Number",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "null"
		},

		"bank_account_type": 
		{
			"update": false,
			"required": false,
			"caption": "Bank Account Type",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(1)"
		},

		"bank_routing_number": 
		{
			"update": false,
			"required": false,
			"caption": "Bank Routing Number",
			"data_type": "NUMBER",
			"validation_data": null,
			"sql_type": "null"
		},

		"benefits_start_date": 
		{
			"update": false,
			"required": false,
			"caption": "Eligibility Period Start Date",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		},

		"birthdate": 
		{
			"update": false,
			"required": false,
			"caption": "Birthdate",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		},

		"business_title": 
		{
			"update": false,
			"required": false,
			"caption": "Business Title",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(50)"
		},

		"cell_phone": 
		{
			"update": false,
			"required": false,
			"caption": "Cell",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(30)"
		},

		"city": 
		{
			"update": true,
			"required": false,
			"caption": "City",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)"
		},

		"country": 
		{
			"update": true,
			"required": false,
			"caption": "Country",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)"
		},

		"current_salary": 
		{
			"update": false,
			"required": false,
			"caption": "Current Salary",
			"data_type": "NUMBER",
			"validation_data": null,
			"sql_type": "decimal(10,2)"
		},

		"division": 
		{
			"update": false,
			"required": false,
			"caption": "Division",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(50)"
		},

		"ee_code": 
		{
			"update": false,
			"required": false,
			"caption": "External Private ID",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"email": 
		{
			"update": false,
			"required": false,
			"caption": "E-mail",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(100)"
		},

		"email2": 
		{
			"update": true,
			"required": false,
			"caption": "Alternate E-mail",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(100)"
		},

		"employee_number": 
		{
			"update": false,
			"required": false,
			"caption": "Employee Number",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"employee_type": 
		{
			"update": false,
			"required": false,
			"caption": "Employee Type",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)"
		},

		"employment_level": 
		{
			"update": false,
			"required": false,
			"caption": "Employment Level",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"F",
					"F"
				],

				[
					"P",
					"P"
				]
			],

			"sql_type": "varchar(50)"
		},

		"first_name": 
		{
			"update": true,
			"required": false,
			"caption": "First Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(30)"
		},

		"gender": 
		{
			"update": true,
			"required": false,
			"caption": "Gender",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"M",
					"M"
				],

				[
					"F",
					"F"
				]
			],

			"sql_type": "varchar(2)"
		},

		"highly_compensated": 
		{
			"update": false,
			"required": false,
			"caption": "Highly Compensated",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "tinyint(1)"
		},

		"hire_date": 
		{
			"update": false,
			"required": false,
			"caption": "Hire Date",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		},

		"home_phone": 
		{
			"update": true,
			"required": false,
			"caption": "Home Phone",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(30)"
		},

		"hours_per_week": 
		{
			"update": false,
			"required": false,
			"caption": "Hours Per Week",
			"data_type": "NUMBER",
			"validation_data": null,
			"sql_type": "int(11)"
		},

		"is_smoker": 
		{
			"update": false,
			"required": false,
			"caption": "Tobacco User",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"YES",
					"YES"
				],

				[
					"NO",
					"NO"
				]
			],

			"sql_type": "varchar(16)"
		},

		"is_voluntary_termination": 
		{
			"update": false,
			"required": false,
			"caption": "Voluntary Termination",
			"data_type": "NUMBER",
			"validation_data": null,
			"sql_type": "tinyint(1)"
		},

		"last_name": 
		{
			"update": true,
			"required": false,
			"caption": "Last Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(50)"
		},

		"location": 
		{
			"update": false,
			"required": false,
			"caption": "Location",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(50)"
		},

		"marital_status": 
		{
			"update": true,
			"required": false,
			"caption": "Marital Status",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"Married",
					"M"
				],

				[
					"Single",
					"S"
				],

				[
					"Domestic Partner",
					"P"
				],

				[
					"Unreported",
					"U"
				]
			],

			"sql_type": "varchar(1)"
		},

		"middle_name": 
		{
			"update": true,
			"required": false,
			"caption": "Middle Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(30)"
		},

		"name_suffix": 
		{
			"update": false,
			"required": false,
			"caption": "Name Suffix",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)"
		},

		"org_class": 
		{
			"update": false,
			"required": false,
			"caption": "Class",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(50)"
		},

		"organization_code": 
		{
			"update": false,
			"required": false,
			"caption": "Organization_code",
			"data_type": "null",
			"validation_data": null,
			"sql_type": "varchar(128)"
		},

		"organization_id": 
		{
			"update": false,
			"required": false,
			"caption": "Organization_id",
			"data_type": "null",
			"validation_data": null,
			"sql_type": "int(11)"
		},

		"original_effective_date": 
		{
			"update": false,
			"required": false,
			"caption": "Original Effective Date",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		},

		"original_hire_date": 
		{
			"update": false,
			"required": false,
			"caption": "Original Hire Date",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		},

		"owner": 
		{
			"update": false,
			"required": false,
			"caption": "Owner",
			"data_type": "NUMBER",
			"validation_data": null,
			"sql_type": "tinyint(1)"
		},

		"pay_rate": 
		{
			"update": false,
			"required": false,
			"caption": "Pay Rate",
			"data_type": "NUMBER",
			"validation_data": null,
			"sql_type": "decimal(10,2)"
		},

		"preferred_locale": 
		{
			"update": false,
			"required": false,
			"caption": "Preferred Language",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(32)"
		},

		"seniority_date": 
		{
			"update": false,
			"required": false,
			"caption": "Seniority Date",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "date"
		},

		"shareholder": 
		{
			"update": false,
			"required": false,
			"caption": "Shareholder",
			"data_type": "NUMBER",
			"validation_data": null,
			"sql_type": "tinyint(1)"
		},

		"spoken_language": 
		{
			"update": false,
			"required": false,
			"caption": "Preferred Spoken Language",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"AMERICAN INDIAN",
					"AMERICAN INDIAN"
				],

				[
					"ARABIC",
					"ARABIC"
				],

				[
					"ARAMAIC",
					"ARAMAIC"
				],

				[
					"ARMENIAN",
					"ARMENIAN"
				],

				[
					"CAMBODIAN",
					"CAMBODIAN"
				],

				[
					"CANTONESE",
					"CANTONESE"
				],

				[
					"CHINESE",
					"CHINESE"
				],

				[
					"DECLINED TO STATE",
					"DECLINED TO STATE"
				],

				[
					"ENGLISH",
					"ENGLISH"
				],

				[
					"FARSI",
					"FARSI"
				],

				[
					"FRENCH",
					"FRENCH"
				],

				[
					"GERMAN",
					"GERMAN"
				],

				[
					"HAWAIIAN",
					"HAWAIIAN"
				],

				[
					"HEARING IMPAIRED",
					"HEARING IMPAIRED"
				],

				[
					"HEBEEW",
					"HEBEEW"
				],

				[
					"HINDI",
					"HINDI"
				],

				[
					"HMONG",
					"HMONG"
				],

				[
					"ILOCANO",
					"ILOCANO"
				],

				[
					"INDONESIAN",
					"INDONESIAN"
				],

				[
					"IRISH",
					"IRISH"
				],

				[
					"ITALIAN",
					"ITALIAN"
				],

				[
					"JAPANESE",
					"JAPANESE"
				],

				[
					"KOREAN",
					"KOREAN"
				],

				[
					"LAO",
					"LAO"
				],

				[
					"MANDARIN",
					"MANDARIN"
				],

				[
					"MEIN",
					"MEIN"
				],

				[
					"NIGERIAN",
					"NIGERIAN"
				],

				[
					"OTHER NON-ENGLISH",
					"OTHER NON-ENGLISH"
				],

				[
					"PERSIAN",
					"PERSIAN"
				],

				[
					"POLISH",
					"POLISH"
				],

				[
					"PUSHTO",
					"PUSHTO"
				],

				[
					"RUSSIAN",
					"RUSSIAN"
				],

				[
					"SAMOAN",
					"SAMOAN"
				],

				[
					"SCOTTISH",
					"SCOTTISH"
				],

				[
					"SIGNLANGUAGE",
					"SIGNLANGUAGE"
				],

				[
					"SPANISH",
					"SPANISH"
				],

				[
					"SPEECHLOSS",
					"SPEECHLOSS"
				],

				[
					"TAGALOG",
					"TAGALOG"
				],

				[
					"TAHITIAN",
					"TAHITIAN"
				],

				[
					"THAI",
					"THAI"
				],

				[
					"TURKISH",
					"TURKISH"
				],

				[
					"UNDETERMINED",
					"UNDETERMINED"
				],

				[
					"VIETNAMESE",
					"VIETNAMESE"
				]
			],

			"sql_type": "varchar(30)"
		},

		"ssn": 
		{
			"update": true,
			"required": false,
			"caption": "SSN",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(15)"
		},

		"state": 
		{
			"update": true,
			"required": false,
			"caption": "State",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"APO Europe",
					"AE"
				],

				[
					"Alabama",
					"AL"
				],

				[
					"Alaska",
					"AK"
				],

				[
					"American Samoa",
					"AS"
				],

				[
					"APO Pacific",
					"AP"
				],

				[
					"Arizona",
					"AZ"
				],

				[
					"Arkansas",
					"AR"
				],

				[
					"California",
					"CA"
				],

				[
					"Colorado",
					"CO"
				],

				[
					"Connecticut",
					"CT"
				],

				[
					"Delaware",
					"DE"
				],

				[
					"District Of Columbia",
					"DC"
				],

				[
					"Florida",
					"FL"
				],

				[
					"Georgia",
					"GA"
				],

				[
					"Guam",
					"GU"
				],

				[
					"Hawaii",
					"HI"
				],

				[
					"Idaho",
					"ID"
				],

				[
					"Illinois",
					"IL"
				],

				[
					"Indiana",
					"IN"
				],

				[
					"Iowa",
					"IA"
				],

				[
					"Kansas",
					"KS"
				],

				[
					"Kentucky",
					"KY"
				],

				[
					"Louisiana",
					"LA"
				],

				[
					"Maine",
					"ME"
				],

				[
					"Marshall Islands",
					"MH"
				],

				[
					"Maryland",
					"MD"
				],

				[
					"Massachusetts",
					"MA"
				],

				[
					"Michigan",
					"MI"
				],

				[
					"Minnesota",
					"MN"
				],

				[
					"Mississippi",
					"MS"
				],

				[
					"Missouri",
					"MO"
				],

				[
					"Montana",
					"MT"
				],

				[
					"Nebraska",
					"NE"
				],

				[
					"Nevada",
					"NV"
				],

				[
					"New Hampshire",
					"NH"
				],

				[
					"New Jersey",
					"NJ"
				],

				[
					"New Mexico",
					"NM"
				],

				[
					"New York",
					"NY"
				],

				[
					"North Carolina",
					"NC"
				],

				[
					"North Dakota",
					"ND"
				],

				[
					"Northern Mariana Is.",
					"MP"
				],

				[
					"Ohio",
					"OH"
				],

				[
					"Oklahoma",
					"OK"
				],

				[
					"Oregon",
					"OR"
				],

				[
					"Palau",
					"PW"
				],

				[
					"Pennsylvania",
					"PA"
				],

				[
					"Puerto Rico",
					"PR"
				],

				[
					"Rhode Island",
					"RI"
				],

				[
					"South Carolina",
					"SC"
				],

				[
					"South Dakota",
					"SD"
				],

				[
					"Tennessee",
					"TN"
				],

				[
					"Texas",
					"TX"
				],

				[
					"US Virgin Islands",
					"VI"
				],

				[
					"Utah",
					"UT"
				],

				[
					"Vermont",
					"VT"
				],

				[
					"Virginia",
					"VA"
				],

				[
					"Washington",
					"WA"
				],

				[
					"West Virginia",
					"WV"
				],

				[
					"Wisconsin",
					"WI"
				],

				[
					"Wyoming",
					"WY"
				]
			],

			"sql_type": "varchar(5)"
		},

		"status_ends_on_expected": 
		{
			"update": false,
			"required": false,
			"caption": "Expected Status End Date",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		},

		"subscriber_code": 
		{
			"update": false,
			"required": false,
			"caption": "API-SSO Lookup Code",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"termination_date": 
		{
			"update": false,
			"required": false,
			"caption": "Termination Date",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		},

		"udef_1": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field1",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_10": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field10",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_11": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field11",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_12": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field12",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_13": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field13",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_14": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field14",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_15": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field15",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_16": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field16",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_17": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field17",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_18": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field18",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_19": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field19",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_2": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field2",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_20": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field20",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_3": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field3",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_4": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field4",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_5": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field5",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_6": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field6",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_7": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field7",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_8": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field8",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"udef_9": 
		{
			"update": false,
			"required": false,
			"caption": "User Defined Field9",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"union_code": 
		{
			"update": false,
			"required": false,
			"caption": "Union",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(255)"
		},

		"vip": 
		{
			"update": false,
			"required": false,
			"caption": "VIP",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "tinyint(1)"
		},

		"work_phone": 
		{
			"update": true,
			"required": false,
			"caption": "Office",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(30)"
		},

		"written_language": 
		{
			"update": false,
			"required": false,
			"caption": "Preferred Written Language",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"AMERICAN INDIAN",
					"AMERICAN INDIAN"
				],

				[
					"ARABIC",
					"ARABIC"
				],

				[
					"ARAMAIC",
					"ARAMAIC"
				],

				[
					"ARMENIAN",
					"ARMENIAN"
				],

				[
					"CAMBODIAN",
					"CAMBODIAN"
				],

				[
					"CANTONESE",
					"CANTONESE"
				],

				[
					"CHINESE",
					"CHINESE"
				],

				[
					"DECLINED TO STATE",
					"DECLINED TO STATE"
				],

				[
					"ENGLISH",
					"ENGLISH"
				],

				[
					"FARSI",
					"FARSI"
				],

				[
					"FRENCH",
					"FRENCH"
				],

				[
					"GERMAN",
					"GERMAN"
				],

				[
					"HAWAIIAN",
					"HAWAIIAN"
				],

				[
					"HEARING IMPAIRED",
					"HEARING IMPAIRED"
				],

				[
					"HEBEEW",
					"HEBEEW"
				],

				[
					"HINDI",
					"HINDI"
				],

				[
					"HMONG",
					"HMONG"
				],

				[
					"ILOCANO",
					"ILOCANO"
				],

				[
					"INDONESIAN",
					"INDONESIAN"
				],

				[
					"IRISH",
					"IRISH"
				],

				[
					"ITALIAN",
					"ITALIAN"
				],

				[
					"JAPANESE",
					"JAPANESE"
				],

				[
					"KOREAN",
					"KOREAN"
				],

				[
					"LAO",
					"LAO"
				],

				[
					"MANDARIN",
					"MANDARIN"
				],

				[
					"MEIN",
					"MEIN"
				],

				[
					"NIGERIAN",
					"NIGERIAN"
				],

				[
					"OTHER NON-ENGLISH",
					"OTHER NON-ENGLISH"
				],

				[
					"PERSIAN",
					"PERSIAN"
				],

				[
					"POLISH",
					"POLISH"
				],

				[
					"PUSHTO",
					"PUSHTO"
				],

				[
					"RUSSIAN",
					"RUSSIAN"
				],

				[
					"SAMOAN",
					"SAMOAN"
				],

				[
					"SCOTTISH",
					"SCOTTISH"
				],

				[
					"SIGNLANGUAGE",
					"SIGNLANGUAGE"
				],

				[
					"SPANISH",
					"SPANISH"
				],

				[
					"SPEECHLOSS",
					"SPEECHLOSS"
				],

				[
					"TAGALOG",
					"TAGALOG"
				],

				[
					"TAHITIAN",
					"TAHITIAN"
				],

				[
					"THAI",
					"THAI"
				],

				[
					"TURKISH",
					"TURKISH"
				],

				[
					"UNDETERMINED",
					"UNDETERMINED"
				],

				[
					"VIETNAMESE",
					"VIETNAMESE"
				]
			],

			"sql_type": "varchar(30)"
		},

		"zip_code": 
		{
			"update": true,
			"required": false,
			"caption": "Zip",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(15)"
		}
	},

	"data": 
	[
		{
			"participant_id": "101010101",
			"address_1": "123 Main St.",
			"address_2": "Apt #2",
			"bank_account_number": "111222333",
			"bank_account_type": "C",
			"bank_routing_number": "222333444",
			"benefits_start_date": "2014/04/03",
			"birthdate": "1990/04/04",
			"business_title": "Associate",
			"cell_phone": "222-333-4444",
			"city": "Philadelphia",
			"country": "US",
			"current_salary": "55000.0",
			"division": "Division A",
			"ee_code": "ID 123",
			"email": "testuser@yahoo.com",
			"email2": "testuser@hotmail.com",
			"employee_number": "1234",
			"employee_type": "Full Time",
			"employment_level": "F",
			"first_name": "Tester",
			"gender": "F",
			"highly_compensated": "1",
			"hire_date": "2014/04/05",
			"home_phone": "111-222-3333",
			"hours_per_week": "35",
			"is_smoker": "YES",
			"is_voluntary_termination": "1",
			"last_name": "Subscriber",
			"location": "Office A",
			"marital_status": "M",
			"middle_name": "Soapui",
			"name_suffix": "Jr.",
			"org_class": "ORG_CLASS_A",
			"organization_code": "test_company_a",
			"organization_id": "2270",
			"original_effective_date": "2014/05/05",
			"original_hire_date": "2014/06/05",
			"owner": "1",
			"pay_rate": "55.55",
			"preferred_locale": "Locale.SPAIN",
			"seniority_date": "2014/07/05",
			"shareholder": "1",
			"spoken_language": "IRISH",
			"ssn": "111-22-0001",
			"state": "CT",
			"status_ends_on_expected": "2055/05/05",
			"subscriber_code": "101010101",
			"termination_date": "",
			"udef_1": "User Value A",
			"udef_10": "User Value J",
			"udef_11": "User Value K",
			"udef_12": "User Value L",
			"udef_13": "User Value M",
			"udef_14": "User Value N",
			"udef_15": "User Value O",
			"udef_16": "User Value P",
			"udef_17": "User Value Q",
			"udef_18": "User Value R",
			"udef_19": "User Value S",
			"udef_2": "User Value C",
			"udef_20": "User Value T",
			"udef_3": "User Value D",
			"udef_4": "User Value D",
			"udef_5": "User Value E",
			"udef_6": "User Value F",
			"udef_7": "User Value G",
			"udef_8": "User Value H",
			"udef_9": "User Value I",
			"union_code": "UNION A",
			"vip": "1",
			"work_phone": "666-777-8888",
			"written_language": "FRENCH",
			"zip_code": "99999"
		},

		{
			"participant_id": "101010102",
			"address_1": "234 Main St.",
			"address_2": "Apt #3",
			"bank_account_number": "222333444",
			"bank_account_type": "S",
			"bank_routing_number": "333444555",
			"benefits_start_date": "2014/04/04",
			"birthdate": "1990/04/05",
			"business_title": "Sr. Associate",
			"cell_phone": "222-333-4445",
			"city": "Valley Forge",
			"country": "USA",
			"current_salary": "65000.0",
			"division": "Division B",
			"ee_code": "ID 124",
			"email": "testuser@email.com",
			"email2": "testuser@gmail.com",
			"employee_number": "1235",
			"employee_type": "Part Time",
			"employment_level": "P",
			"first_name": "Test",
			"gender": "M",
			"highly_compensated": "0",
			"hire_date": "2014/04/06",
			"home_phone": "333-444-5555",
			"hours_per_week": "40",
			"is_smoker": "NO",
			"is_voluntary_termination": "0",
			"last_name": "User",
			"location": "Office B",
			"marital_status": "S",
			"middle_name": "Regression",
			"name_suffix": "Dr.",
			"org_class": "ORG_CLASS_B",
			"organization_code": "test_company_a",
			"organization_id": "2270",
			"original_effective_date": "2014/05/06",
			"original_hire_date": "2014/06/06",
			"owner": "0",
			"pay_rate": "55.56",
			"preferred_locale": "Locale.CANADA",
			"seniority_date": "2014/07/06",
			"shareholder": "0",
			"spoken_language": "POLISH",
			"ssn": "111-22-0002",
			"state": "PA",
			"status_ends_on_expected": "2055/05/06",
			"subscriber_code": "101010102",
			"termination_date": "",
			"udef_1": "User Value 1",
			"udef_10": "User Value 10",
			"udef_11": "User Value 11",
			"udef_12": "User Value 12",
			"udef_13": "User Value 13",
			"udef_14": "User Value 14",
			"udef_15": "User Value 15",
			"udef_16": "User Value 16",
			"udef_17": "User Value 17",
			"udef_18": "User Value 18",
			"udef_19": "User Value 19",
			"udef_2": "User Value 2",
			"udef_20": "User Value 20",
			"udef_3": "User Value 3",
			"udef_4": "User Value 4",
			"udef_5": "User Value 5",
			"udef_6": "User Value 6",
			"udef_7": "User Value 7",
			"udef_8": "User Value 8",
			"udef_9": "User Value 9",
			"union_code": "UNION B",
			"vip": "0",
			"work_phone": "777-888-9999",
			"written_language": "GERMAN",
			"zip_code": "88888"
		}
	]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/participants/participantId" method="PUT" resourcePath="/api/participants/participantId" id="2d342c74-cadc-4f43-a546-ffe84a868f82"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath></con:restMockAction><con:restMockAction name="/api/participants/participantId/dependents" method="GET" resourcePath="/api/participants/participantId/dependents" id="f378b8e7-1e27-455a-a89e-5673ff2071aa"><con:settings/><con:defaultResponse>Response 200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 200" id="1700b4a3-a2a9-4489-81f0-0edeff089551" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
	"header": 
	{
		"httpstatus": 200
	},

	"metadata": 
	{
		"ssn": 
		{
			"update": true,
			"required": false,
			"caption": "SSN",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(15)",
			"max_length": 15
		},

		"first_name": 
		{
			"update": true,
			"required": false,
			"caption": "First Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(30)",
			"max_length": 30
		},

		"middle_name": 
		{
			"update": true,
			"required": false,
			"caption": "Middle Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(30)",
			"max_length": 30
		},

		"last_name": 
		{
			"update": true,
			"required": false,
			"caption": "Last Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(50)",
			"max_length": 50
		},

		"birthdate": 
		{
			"update": true,
			"required": false,
			"caption": "Birthdate",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		},

		"gender": 
		{
			"update": true,
			"required": false,
			"caption": "Gender",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"Male",
					"M"
				],

				[
					"Female",
					"F"
				]
			],

			"sql_type": "varchar(2)",
			"max_length": 2
		},

		"relationship_code": 
		{
			"update": true,
			"required": true,
			"caption": "Relationship",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"Spouse",
					"spouse"
				],

				[
					"Child",
					"child"
				],

				[
					"Student",
					"student"
				],

				[
					"Disabled Dependent",
					"disabled"
				],

				[
					"Domestic Partner",
					"partner"
				],

				[
					"Child of Domestic Partner",
					"child_of_partner"
				],

				[
					"Common Law Spouse",
					"cl_spouse"
				],

				[
					"Grandchild",
					"grandchild"
				],

				[
					"Child Age 26 to 30",
					"chile_age_26_to_30"
				]
			],

			"max_length": 60,
			"sql_type": "varchar(60)"
		},

		"qmcso": 
		{
			"update": false,
			"required": false,
			"caption": "QMCSO",
			"data_type": "BOOLEAN",
			"validation_data": null,
			"sql_type": "tinyint(1)"
		},

		"lives_at_home": 
		{
			"update": true,
			"required": true,
			"caption": "Lives At Home",
			"data_type": "BOOLEAN",
			"validation_data": null,
			"sql_type": null
		},

		"address_1": 
		{
			"update": true,
			"required": false,
			"caption": "Address 1",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"address_2": 
		{
			"update": true,
			"required": false,
			"caption": "Address 2",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"city": 
		{
			"update": true,
			"required": false,
			"caption": "City",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"state": 
		{
			"update": true,
			"required": false,
			"caption": "State",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"APO Europe",
					"AE"
				],

				[
					"Alabama",
					"AL"
				],

				[
					"Alaska",
					"AK"
				],

				[
					"American Samoa",
					"AS"
				],

				[
					"APO Pacific",
					"AP"
				],

				[
					"Arizona",
					"AZ"
				],

				[
					"Arkansas",
					"AR"
				],

				[
					"California",
					"CA"
				],

				[
					"Colorado",
					"CO"
				],

				[
					"Connecticut",
					"CT"
				],

				[
					"Delaware",
					"DE"
				],

				[
					"District Of Columbia",
					"DC"
				],

				[
					"Florida",
					"FL"
				],

				[
					"Georgia",
					"GA"
				],

				[
					"Guam",
					"GU"
				],

				[
					"Hawaii",
					"HI"
				],

				[
					"Idaho",
					"ID"
				],

				[
					"Illinois",
					"IL"
				],

				[
					"Indiana",
					"IN"
				],

				[
					"Iowa",
					"IA"
				],

				[
					"Kansas",
					"KS"
				],

				[
					"Kentucky",
					"KY"
				],

				[
					"Louisiana",
					"LA"
				],

				[
					"Maine",
					"ME"
				],

				[
					"Marshall Islands",
					"MH"
				],

				[
					"Maryland",
					"MD"
				],

				[
					"Massachusetts",
					"MA"
				],

				[
					"Michigan",
					"MI"
				],

				[
					"Minnesota",
					"MN"
				],

				[
					"Mississippi",
					"MS"
				],

				[
					"Missouri",
					"MO"
				],

				[
					"Montana",
					"MT"
				],

				[
					"Nebraska",
					"NE"
				],

				[
					"Nevada",
					"NV"
				],

				[
					"New Hampshire",
					"NH"
				],

				[
					"New Jersey",
					"NJ"
				],

				[
					"New Mexico",
					"NM"
				],

				[
					"New York",
					"NY"
				],

				[
					"North Carolina",
					"NC"
				],

				[
					"North Dakota",
					"ND"
				],

				[
					"Northern Mariana Is.",
					"MP"
				],

				[
					"Ohio",
					"OH"
				],

				[
					"Oklahoma",
					"OK"
				],

				[
					"Oregon",
					"OR"
				],

				[
					"Palau",
					"PW"
				],

				[
					"Pennsylvania",
					"PA"
				],

				[
					"Puerto Rico",
					"PR"
				],

				[
					"Rhode Island",
					"RI"
				],

				[
					"South Carolina",
					"SC"
				],

				[
					"South Dakota",
					"SD"
				],

				[
					"Tennessee",
					"TN"
				],

				[
					"Texas",
					"TX"
				],

				[
					"US Virgin Islands",
					"VI"
				],

				[
					"Utah",
					"UT"
				],

				[
					"Vermont",
					"VT"
				],

				[
					"Virginia",
					"VA"
				],

				[
					"Washington",
					"WA"
				],

				[
					"West Virginia",
					"WV"
				],

				[
					"Wisconsin",
					"WI"
				],

				[
					"Wyoming",
					"WY"
				]
			],

			"sql_type": "varchar(5)",
			"max_length": 5
		},

		"zip_code": 
		{
			"update": true,
			"required": false,
			"caption": "Zip",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(15)",
			"max_length": 15
		},

		"country": 
		{
			"update": true,
			"required": false,
			"caption": "Country",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"is_smoker": 
		{
			"update": true,
			"required": false,
			"caption": "Tobacco User",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"YES",
					"YES"
				],

				[
					"NO",
					"NO"
				]
			],

			"sql_type": "varchar(16)",
			"max_length": 16
		},

		"termination_date": 
		{
			"update": true,
			"required": false,
			"caption": "Termination Date",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		}
	},

	"data": 
	[
		{
			"coveragestatus": "active",
			"id": 1921707,
			"ssn": "XXX-XX-1212",
			"first_name": "Walter",
			"middle_name": "P.",
			"last_name": "Melon",
			"birthdate": "1998/08/01",
			"gender": "M",
			"relationship_code": "child",
			"qmcso": false,
			"lives_at_home": true,
			"address_1": "1111 Ocean Ave",
			"address_2": "Apt #1",
			"city": "Brooklyn",
			"state": "NY",
			"zip_code": "11230",
			"country": "USA",
			"is_smoker": "NO",
			"termination_date": null
		},

		{
			"coveragestatus": "inactive",			
			"id": 1921708,
			"ssn": "XXX-XX-1313",
			"first_name": "Phil",
			"middle_name": "Allen",
			"last_name": "Delphia",
			"birthdate": "1971/11/21",
			"gender": "M",
			"relationship_code": "spouse",
			"qmcso": false,
			"lives_at_home": true,
			"address_1": "1111 Ocean Ave",
			"address_2": "Apt #1",
			"city": "Brooklyn",
			"state": "NY",
			"zip_code": "11230",
			"country": "USA",
			"is_smoker": "YES",
			"termination_date": null
		}
	]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/participants/participantId/dependents" method="POST" resourcePath="/api/participants/participantId/dependents" id="0a8a642f-e052-40c7-a0d4-6cd148cc685a"><con:settings/><con:defaultResponse>Response 201</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 201" id="d170f334-7a10-49fe-9cb4-f59940025c4b" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
	"header": 
	{
		"httpstatus": 200
	},

	"metadata": 
	{
		"ssn": 
		{
			"update": true,
			"required": false,
			"caption": "SSN",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(15)",
			"max_length": 15
		},

		"first_name": 
		{
			"update": true,
			"required": false,
			"caption": "First Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(30)",
			"max_length": 30
		},

		"middle_name": 
		{
			"update": true,
			"required": false,
			"caption": "Middle Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(30)",
			"max_length": 30
		},

		"last_name": 
		{
			"update": true,
			"required": false,
			"caption": "Last Name",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(50)",
			"max_length": 50
		},

		"birthdate": 
		{
			"update": true,
			"required": false,
			"caption": "Birthdate",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		},

		"gender": 
		{
			"update": true,
			"required": false,
			"caption": "Gender",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"Male",
					"M"
				],

				[
					"Female",
					"F"
				]
			],

			"sql_type": "varchar(2)",
			"max_length": 2
		},

		"relationship_code": 
		{
			"update": true,
			"required": true,
			"caption": "Relationship",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"Spouse",
					"spouse"
				],

				[
					"Child",
					"child"
				],

				[
					"Student",
					"student"
				],

				[
					"Disabled Dependent",
					"disabled"
				],

				[
					"Domestic Partner",
					"partner"
				],

				[
					"Child of Domestic Partner",
					"child_of_partner"
				],

				[
					"Common Law Spouse",
					"cl_spouse"
				],

				[
					"Grandchild",
					"grandchild"
				],

				[
					"Child Age 26 to 30",
					"chile_age_26_to_30"
				]
			],

			"max_length": 60,
			"sql_type": "varchar(60)"
		},

		"qmcso": 
		{
			"update": false,
			"required": false,
			"caption": "QMCSO",
			"data_type": "BOOLEAN",
			"validation_data": null,
			"sql_type": "tinyint(1)"
		},

		"lives_at_home": 
		{
			"update": true,
			"required": true,
			"caption": "Lives At Home",
			"data_type": "BOOLEAN",
			"validation_data": null,
			"sql_type": null
		},

		"address_1": 
		{
			"update": true,
			"required": false,
			"caption": "Address 1",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"address_2": 
		{
			"update": true,
			"required": false,
			"caption": "Address 2",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"city": 
		{
			"update": true,
			"required": false,
			"caption": "City",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"state": 
		{
			"update": true,
			"required": false,
			"caption": "State",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"APO Europe",
					"AE"
				],

				[
					"Alabama",
					"AL"
				],

				[
					"Alaska",
					"AK"
				],

				[
					"American Samoa",
					"AS"
				],

				[
					"APO Pacific",
					"AP"
				],

				[
					"Arizona",
					"AZ"
				],

				[
					"Arkansas",
					"AR"
				],

				[
					"California",
					"CA"
				],

				[
					"Colorado",
					"CO"
				],

				[
					"Connecticut",
					"CT"
				],

				[
					"Delaware",
					"DE"
				],

				[
					"District Of Columbia",
					"DC"
				],

				[
					"Florida",
					"FL"
				],

				[
					"Georgia",
					"GA"
				],

				[
					"Guam",
					"GU"
				],

				[
					"Hawaii",
					"HI"
				],

				[
					"Idaho",
					"ID"
				],

				[
					"Illinois",
					"IL"
				],

				[
					"Indiana",
					"IN"
				],

				[
					"Iowa",
					"IA"
				],

				[
					"Kansas",
					"KS"
				],

				[
					"Kentucky",
					"KY"
				],

				[
					"Louisiana",
					"LA"
				],

				[
					"Maine",
					"ME"
				],

				[
					"Marshall Islands",
					"MH"
				],

				[
					"Maryland",
					"MD"
				],

				[
					"Massachusetts",
					"MA"
				],

				[
					"Michigan",
					"MI"
				],

				[
					"Minnesota",
					"MN"
				],

				[
					"Mississippi",
					"MS"
				],

				[
					"Missouri",
					"MO"
				],

				[
					"Montana",
					"MT"
				],

				[
					"Nebraska",
					"NE"
				],

				[
					"Nevada",
					"NV"
				],

				[
					"New Hampshire",
					"NH"
				],

				[
					"New Jersey",
					"NJ"
				],

				[
					"New Mexico",
					"NM"
				],

				[
					"New York",
					"NY"
				],

				[
					"North Carolina",
					"NC"
				],

				[
					"North Dakota",
					"ND"
				],

				[
					"Northern Mariana Is.",
					"MP"
				],

				[
					"Ohio",
					"OH"
				],

				[
					"Oklahoma",
					"OK"
				],

				[
					"Oregon",
					"OR"
				],

				[
					"Palau",
					"PW"
				],

				[
					"Pennsylvania",
					"PA"
				],

				[
					"Puerto Rico",
					"PR"
				],

				[
					"Rhode Island",
					"RI"
				],

				[
					"South Carolina",
					"SC"
				],

				[
					"South Dakota",
					"SD"
				],

				[
					"Tennessee",
					"TN"
				],

				[
					"Texas",
					"TX"
				],

				[
					"US Virgin Islands",
					"VI"
				],

				[
					"Utah",
					"UT"
				],

				[
					"Vermont",
					"VT"
				],

				[
					"Virginia",
					"VA"
				],

				[
					"Washington",
					"WA"
				],

				[
					"West Virginia",
					"WV"
				],

				[
					"Wisconsin",
					"WI"
				],

				[
					"Wyoming",
					"WY"
				]
			],

			"sql_type": "varchar(5)",
			"max_length": 5
		},

		"zip_code": 
		{
			"update": true,
			"required": false,
			"caption": "Zip",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(15)",
			"max_length": 15
		},

		"country": 
		{
			"update": true,
			"required": false,
			"caption": "Country",
			"data_type": "TEXT",
			"validation_data": null,
			"sql_type": "varchar(60)",
			"max_length": 60
		},

		"is_smoker": 
		{
			"update": true,
			"required": false,
			"caption": "Tobacco User",
			"data_type": "TEXT",
			"validation_data": 
			[
				[
					"YES",
					"YES"
				],

				[
					"NO",
					"NO"
				]
			],

			"sql_type": "varchar(16)",
			"max_length": 16
		},

		"termination_date": 
		{
			"update": true,
			"required": false,
			"caption": "Termination Date",
			"data_type": "DATE",
			"validation_data": null,
			"sql_type": "date"
		}
	},

	"data": 
	[
		{
			"coveragestatus": "active",
			"id": 1921707,
			"ssn": "XXX-XX-1212",
			"first_name": "Walter",
			"middle_name": "P.",
			"last_name": "Melon",
			"birthdate": "1998/08/01",
			"gender": "M",
			"relationship_code": "child",
			"qmcso": false,
			"lives_at_home": true,
			"address_1": "1111 Ocean Ave",
			"address_2": "Apt #1",
			"city": "Brooklyn",
			"state": "NY",
			"zip_code": "11230",
			"country": "USA",
			"is_smoker": "NO",
			"termination_date": null
		},

		{
			"coveragestatus": "inactive",			
			"id": 1921708,
			"ssn": "XXX-XX-1313",
			"first_name": "Phil",
			"middle_name": "Allen",
			"last_name": "Delphia",
			"birthdate": "1971/11/21",
			"gender": "M",
			"relationship_code": "spouse",
			"qmcso": false,
			"lives_at_home": true,
			"address_1": "1111 Ocean Ave",
			"address_2": "Apt #1",
			"city": "Brooklyn",
			"state": "NY",
			"zip_code": "11230",
			"country": "USA",
			"is_smoker": "YES",
			"termination_date": null
		}
	]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/participants/participantId/dependents/dependentId" method="PUT" resourcePath="/api/participants/participantId/dependents/dependentId" id="ade64865-d9fa-495c-b543-2a275eab927b"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath></con:restMockAction><con:restMockAction name="/api/participants/participantId/dependents/dependentId/coveragestatus" method="PUT" resourcePath="/api/participants/participantId/dependents/dependentId/coveragestatus" id="f57df0d6-926a-4d0d-a0ca-65e4766e1f8a"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath></con:restMockAction><con:restMockAction name="/api/participants/participantId/benefits" method="GET" resourcePath="/api/participants/participantId/benefits" id="57b7b03d-0d71-4c72-a8bb-ad184e61171f"><con:settings/><con:defaultResponse>Response 200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 200" id="2f33b418-c7de-46a0-960c-63cb39d2a831" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
	"header": 
	{
		"httpstatus": 200
	},

	"metadata": 
	{
		
	},

	"data": 
	[
		{
			"org_benefit_id": 58736,
			"org_benefit_name": "Medical",
			"benefit_class": "tier",
			"display_order": 1,
			"beneficiary_required": false,
			"benefit_lookup_code": "medical",
			"benefit_dependencies": 
			[
				
			],

			"dependents_allowed": true,
			"annual_payday_count": 26,
			"active_enrollment_required": false,
			"hide_volume_on_confirm": false,
			"hide_cost_if_empty": null,
			"hide_cost_on_confirm": false,
			"hide_if_terminated": false,
			"premium_method": "tier",
			"enrollment_method": "standard",
			"allowed_dependent_relationships": 
			[
				{
					"id": 17759,
					"name": "Spouse",
					"min_age": 0,
					"max_age": 99
				},

				{
					"id": 17760,
					"name": "Child",
					"min_age": 0,
					"max_age": 25
				}
			],

			"allowed_dependent_ids": 
			[
				1923456,
				192345
			]
		},

		{
			"org_benefit_id": 58740,
			"org_benefit_name": "Health Savings Account",
			"benefit_class": "contribution",
			"display_order": 2,
			"beneficiary_required": false,
			"benefit_lookup_code": "hsa",
			"benefit_dependencies": 
			[
				
			],

			"dependents_allowed": false,
			"annual_payday_count": 26,
			"active_enrollment_required": false,
			"hide_volume_on_confirm": false,
			"hide_cost_if_empty": null,
			"hide_cost_on_confirm": false,
			"hide_if_terminated": false,
			"premium_method": "annual_target",
			"enrollment_method": "enter_pay_period"
		},

		{
			"org_benefit_id": 60618,
			"org_benefit_name": "Premium FSA",
			"benefit_class": "contribution",
			"display_order": 3,
			"beneficiary_required": false,
			"benefit_lookup_code": "premium_fsa",
			"benefit_dependencies": 
			[
				
			],

			"dependents_allowed": false,
			"annual_payday_count": 26,
			"active_enrollment_required": false,
			"hide_volume_on_confirm": false,
			"hide_cost_if_empty": null,
			"hide_cost_on_confirm": false,
			"hide_if_terminated": false,
			"premium_method": "annual_target",
			"enrollment_method": "enter_pay_period"
		},

		{
			"org_benefit_id": 60598,
			"org_benefit_name": "Health Care Reimbursement Account",
			"benefit_class": "contribution",
			"display_order": 4,
			"beneficiary_required": false,
			"benefit_lookup_code": "hcra",
			"benefit_dependencies": 
			[
				
			],

			"dependents_allowed": false,
			"annual_payday_count": 26,
			"active_enrollment_required": false,
			"hide_volume_on_confirm": false,
			"hide_cost_if_empty": null,
			"hide_cost_on_confirm": false,
			"hide_if_terminated": false,
			"premium_method": "annual_target",
			"enrollment_method": "enter_annual"
		},

		{
			"org_benefit_id": 58737,
			"org_benefit_name": "Dental",
			"benefit_class": "tier",
			"display_order": 6,
			"beneficiary_required": false,
			"benefit_lookup_code": "dental",
			"benefit_dependencies": 
			[
				
			],

			"dependents_allowed": true,
			"annual_payday_count": 26,
			"active_enrollment_required": false,
			"hide_volume_on_confirm": false,
			"hide_cost_if_empty": null,
			"hide_cost_on_confirm": false,
			"hide_if_terminated": false,
			"premium_method": "tier",
			"enrollment_method": "standard"
		},

		{
			"org_benefit_id": 58738,
			"org_benefit_name": "Vision",
			"benefit_class": "tier",
			"display_order": 7,
			"beneficiary_required": false,
			"benefit_lookup_code": "vision",
			"benefit_dependencies": 
			[
				
			],

			"dependents_allowed": true,
			"annual_payday_count": 26,
			"active_enrollment_required": false,
			"hide_volume_on_confirm": false,
			"hide_cost_if_empty": null,
			"hide_cost_on_confirm": false,
			"hide_if_terminated": false,
			"premium_method": "tier",
			"enrollment_method": "standard"
		},

		{
			"org_benefit_id": 58739,
			"org_benefit_name": "Prescription Drug",
			"benefit_class": "tier",
			"display_order": 8,
			"beneficiary_required": true,
			"benefit_lookup_code": "rx",
			"benefit_dependencies": 
			[
				
			],

			"dependents_allowed": false,
			"annual_payday_count": 26,
			"active_enrollment_required": false,
			"hide_volume_on_confirm": false,
			"hide_cost_if_empty": null,
			"hide_cost_on_confirm": false,
			"hide_if_terminated": false,
			"premium_method": "tier",
			"enrollment_method": "standard"
		},

		{
			"org_benefit_id": 58742,
			"org_benefit_name": "Basic Employee Life",
			"benefit_class": "volume",
			"display_order": 9,
			"beneficiary_required": true,
			"benefit_lookup_code": "basic_subscriber_life",
			"benefit_dependencies": 
			[
				
			],

			"dependents_allowed": false,
			"annual_payday_count": 26,
			"active_enrollment_required": false,
			"hide_volume_on_confirm": false,
			"hide_cost_if_empty": null,
			"hide_cost_on_confirm": false,
			"hide_if_terminated": false,
			"premium_method": "tier",
			"enrollment_method": "standard"
		}
	]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/participants/participantId/benefits/benefitId" method="GET" resourcePath="/api/participants/participantId/benefits/benefitId" id="8a43ea7d-f81e-4d7f-8552-0173f75b9792"><con:settings/><con:defaultResponse>Response 200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 200" id="726e4f1b-4794-4153-82e3-17cd5610563e" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
	"header": 
	{
		"httpstatus": 200
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"org_benefit_id": 58742,
		"org_benefit_name": "Basic Employee Life",
		"benefit_class": "volume",
		"display_order": 9,
		"beneficiary_required": true,
		"benefit_lookup_code": "basic_subscriber_life",
		"benefit_dependencies": 
		[
			
		],

		"dependents_allowed": false,
		"annual_payday_count": 26,
		"active_enrollment_required": false,
		"hide_volume_on_confirm": false,
		"hide_cost_if_empty": null,
		"hide_cost_on_confirm": false,
		"hide_if_terminated": false,
		"premium_method": "tier",
		"enrollment_method": "standard",
		"allowed_dependent_relationships": 
		[
			
		],

		"allowed_dependent_ids": 
		[
			
		]
	}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/participants/participantId/benefits/benefitId/coverage" method="GET" resourcePath="/api/participants/participantId/benefits/benefitId/coverage" id="35124dda-079a-49de-b356-5843ab1628fe"><con:settings/><con:defaultResponse>Response 200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 200" id="7d93f3cf-3c6f-4eaa-b7bd-693e1ca79e83" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
	"header": 
	{
		"httpstatus": 200
	},

	"metadata": 
	{
		
	},

	"data": 
	{
		"org_plan_id": 166555,
		"org_plan_name": "Basic Life eligible",
		"coverage_level_id": 26,
		"coverage_level_name": "Employee Only",
		"coverage_level_lookup_code": "EE",
		"original_effective_date": "2014/04/04",
		"change_effective_date": "2014/04/04",
		"termination_date": null,
		"req_subscriber_premium": "2.31",
		"subscriber_premium": "2.31",
		"req_org_premium": "4.62",
		"org_premium": "4.62",
		"carrier_name": "Unum",
		"carrier_logo_url": null,
		"dependent_coverages": 
		[
			
		],

		"waiting_for_eoi": false,
		"warning_dependencies": null,
		"req_increments": "0.0",
		"increments": "0.0",
		"req_volume": "130000.0",
		"volume": "130000.0",
		"beneficiaries": 
		[
			{
				"id": 2729980,
				"name": "RegressionUser1 Beneficiary",
				"relationship": "none",
				"allocation": "100.0",
				"primary_beneficiary": true
			}
		],

		"defined_benefit_credits": 
		[
			
		]
	}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/participants/participantId/benefits/benefitId/coverage" method="PUT" resourcePath="/api/participants/participantId/benefits/benefitId/coverage" id="c97ccd1e-19f8-4613-913b-b7fda9e1c072"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath></con:restMockAction><con:restMockAction name="/api/participants/participantId/benefits/benefitId/plans" method="GET" resourcePath="/api/participants/participantId/benefits/benefitId/plans" id="abdf72b0-5527-423a-b22c-3eec0db65aa6"><con:settings/><con:defaultResponse>Response 200</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 200" id="c5b13ebf-5965-4ac2-a4af-740639ccb7a4" httpResponseStatus="200" mediaType="application/json" dataSource=""><con:settings/><con:responseContent>{
	"header": 
	{
		"httpstatus": 200
	},

	"metadata": 
	{
		
	},

	"data": 
	[
		{
			"plan_id": 166555,
			"plan_name": "Basic Life eligible",
			"level_id": 26,
			"level_name": "Employee Only",
			"subscriber_premium": "2.31",
			"plan_url": null,
			"pcp_code_setting": null,
			"pcp_name_setting": null,
			"waived": false,
			"plan_type": null,
			"carrier": "Unum",
			"carrier_logo_url": null,
			"spd_url": null,
			"provider_url": null,
			"attributes": 
			{
				
			},

			"content_details": 
			[
				
			],

			"volume": "110000.0"
		},

		{
			"plan_id": 166549,
			"plan_name": "Decline",
			"level_id": 19,
			"level_name": "Decline",
			"subscriber_premium": "0.0",
			"plan_url": null,
			"pcp_code_setting": null,
			"pcp_name_setting": null,
			"waived": true,
			"plan_type": null,
			"carrier": "Generic",
			"carrier_logo_url": null,
			"spd_url": null,
			"provider_url": null,
			"attributes": 
			{
				
			},

			"content_details": 
			[
				
			]
		}
	]
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:requirements/><con:properties><con:property><con:name>username</con:name><con:value>RegressionUser1</con:value></con:property><con:property><con:name>password</con:name><con:value>password2</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>